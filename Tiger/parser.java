
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Mar 24 16:21:59 CST 2009
//----------------------------------------------------

package Tiger;

import java_cup.runtime.*;
import java.io.Reader;
import java.io.FileReader;
import ErrorMsg.*;
import Absyn.*;
import Symbol.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Mar 24 16:21:59 CST 2009
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\131\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\004\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\041\003\000\002\004\003\000\002\005\003\000" +
    "\002\006\003\000\002\007\005\000\002\007\005\000\002" +
    "\007\005\000\002\007\005\000\002\007\005\000\002\007" +
    "\005\000\002\007\005\000\002\007\005\000\002\007\005" +
    "\000\002\007\005\000\002\007\005\000\002\007\005\000" +
    "\002\010\003\000\002\011\007\000\002\012\006\000\002" +
    "\013\010\000\002\021\005\000\002\014\006\000\002\015" +
    "\010\000\002\016\010\000\002\017\005\000\002\022\006" +
    "\000\002\031\006\000\002\040\005\000\002\025\004\000" +
    "\002\025\002\000\002\046\003\000\002\046\003\000\002" +
    "\046\003\000\002\024\012\000\002\024\013\000\002\020" +
    "\007\000\002\023\006\000\002\023\007\000\002\047\003" +
    "\000\002\047\003\000\002\047\003\000\002\026\003\000" +
    "\002\027\005\000\002\030\005\000\002\033\003\000\002" +
    "\033\002\000\002\032\005\000\002\032\003\000\002\034" +
    "\004\000\002\034\002\000\002\035\005\000\002\035\002" +
    "\000\002\036\006\000\002\036\002\000\002\037\007\000" +
    "\002\037\002\000\002\042\006\000\002\042\002\000\002" +
    "\043\007\000\002\043\002\000\002\045\004\000\002\045" +
    "\002\000\002\044\003\000\002\044\003\000\002\044\003" +
    "\000\002\044\003\000\002\050\003\000\002\051\005\000" +
    "\002\052\006\000\002\053\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\244\000\030\005\033\011\044\013\021\015\040\016" +
    "\023\024\013\030\024\040\036\054\026\055\043\056\030" +
    "\001\002\000\076\002\uffad\006\uffad\007\uffad\010\uffad\012" +
    "\uffad\014\uffad\020\uffad\021\uffad\022\uffad\023\uffad\025\uffad" +
    "\027\uffad\031\uffad\032\uffad\033\uffad\035\uffad\036\uffad\037" +
    "\uffad\040\uffad\041\uffad\042\uffad\043\uffad\044\uffad\045\uffad" +
    "\046\uffad\047\uffad\050\uffad\051\uffad\052\uffad\053\uffad\001" +
    "\002\000\070\002\ufff2\006\ufff2\007\ufff2\010\ufff2\012\ufff2" +
    "\014\ufff2\020\ufff2\021\ufff2\022\ufff2\023\ufff2\025\ufff2\027" +
    "\ufff2\031\ufff2\033\ufff2\035\ufff2\037\ufff2\040\ufff2\041\ufff2" +
    "\042\ufff2\043\ufff2\044\ufff2\045\ufff2\046\ufff2\047\ufff2\050" +
    "\ufff2\051\ufff2\052\ufff2\001\002\000\004\002\246\001\002" +
    "\000\070\002\ufffc\006\ufffc\007\ufffc\010\ufffc\012\ufffc\014" +
    "\ufffc\020\ufffc\021\ufffc\022\ufffc\023\ufffc\025\ufffc\027\ufffc" +
    "\031\ufffc\033\ufffc\035\ufffc\037\ufffc\040\ufffc\041\ufffc\042" +
    "\ufffc\043\ufffc\044\ufffc\045\ufffc\046\ufffc\047\ufffc\050\ufffc" +
    "\051\ufffc\052\ufffc\001\002\000\076\002\uffae\006\uffae\007" +
    "\uffae\010\uffae\012\uffae\014\uffae\020\uffae\021\uffae\022\uffae" +
    "\023\uffae\025\uffae\027\uffae\031\uffae\032\uffae\033\uffae\035" +
    "\uffae\036\uffae\037\uffae\040\uffae\041\uffae\042\uffae\043\uffae" +
    "\044\uffae\045\uffae\046\uffae\047\uffae\050\uffae\051\uffae\052" +
    "\uffae\053\uffae\001\002\000\070\002\ufffd\006\ufffd\007\ufffd" +
    "\010\ufffd\012\ufffd\014\ufffd\020\ufffd\021\ufffd\022\ufffd\023" +
    "\ufffd\025\ufffd\027\ufffd\031\ufffd\033\ufffd\035\ufffd\037\ufffd" +
    "\040\ufffd\041\ufffd\042\ufffd\043\ufffd\044\ufffd\045\ufffd\046" +
    "\ufffd\047\ufffd\050\ufffd\051\ufffd\052\ufffd\001\002\000\070" +
    "\002\ufff5\006\ufff5\007\ufff5\010\ufff5\012\ufff5\014\ufff5\020" +
    "\ufff5\021\ufff5\022\ufff5\023\ufff5\025\ufff5\027\ufff5\031\ufff5" +
    "\033\ufff5\035\ufff5\037\ufff5\040\ufff5\041\ufff5\042\ufff5\043" +
    "\ufff5\044\ufff5\045\ufff5\046\ufff5\047\ufff5\050\ufff5\051\ufff5" +
    "\052\ufff5\001\002\000\030\005\033\011\044\013\021\015" +
    "\040\016\023\024\013\030\024\040\036\054\026\055\043" +
    "\056\030\001\002\000\070\002\ufff8\006\ufff8\007\ufff8\010" +
    "\ufff8\012\ufff8\014\ufff8\020\ufff8\021\ufff8\022\ufff8\023\ufff8" +
    "\025\ufff8\027\ufff8\031\ufff8\033\ufff8\035\ufff8\037\ufff8\040" +
    "\ufff8\041\ufff8\042\ufff8\043\ufff8\044\ufff8\045\ufff8\046\ufff8" +
    "\047\ufff8\050\ufff8\051\ufff8\052\ufff8\001\002\000\070\002" +
    "\uffef\006\uffef\007\uffef\010\uffef\012\uffef\014\uffef\020\uffef" +
    "\021\uffef\022\uffef\023\uffef\025\uffef\027\uffef\031\uffef\033" +
    "\uffef\035\uffef\037\uffef\040\uffef\041\uffef\042\uffef\043\uffef" +
    "\044\uffef\045\uffef\046\uffef\047\uffef\050\uffef\051\uffef\052" +
    "\uffef\001\002\000\034\002\000\037\060\040\052\041\056" +
    "\042\054\043\061\044\057\045\064\046\062\047\063\050" +
    "\055\051\053\052\066\001\002\000\070\002\ufffe\006\ufffe" +
    "\007\ufffe\010\ufffe\012\ufffe\014\ufffe\020\ufffe\021\ufffe\022" +
    "\ufffe\023\ufffe\025\ufffe\027\ufffe\031\ufffe\033\ufffe\035\ufffe" +
    "\037\ufffe\040\ufffe\041\ufffe\042\ufffe\043\ufffe\044\ufffe\045" +
    "\ufffe\046\ufffe\047\ufffe\050\ufffe\051\ufffe\052\ufffe\001\002" +
    "\000\076\002\uffee\006\uffee\007\uffee\010\uffee\012\uffee\014" +
    "\uffee\020\uffee\021\uffee\022\uffee\023\uffee\025\uffee\027\uffee" +
    "\031\uffee\032\235\033\uffee\035\uffee\036\234\037\uffee\040" +
    "\uffee\041\uffee\042\uffee\043\uffee\044\uffee\045\uffee\046\uffee" +
    "\047\uffee\050\uffee\051\uffee\052\uffee\053\236\001\002\000" +
    "\030\005\033\011\044\013\021\015\040\016\023\024\013" +
    "\030\024\040\036\054\026\055\043\056\030\001\002\000" +
    "\076\002\uffb0\006\uffb0\007\uffb0\010\uffb0\012\uffb0\014\uffb0" +
    "\020\uffb0\021\uffb0\022\uffb0\023\uffb0\025\uffb0\027\uffb0\031" +
    "\uffb0\032\uffb0\033\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0" +
    "\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0\047" +
    "\uffb0\050\uffb0\051\uffb0\052\uffb0\053\uffb0\001\002\000\070" +
    "\002\uffeb\006\uffeb\007\uffeb\010\uffeb\012\uffeb\014\uffeb\020" +
    "\uffeb\021\uffeb\022\uffeb\023\uffeb\025\uffeb\027\uffeb\031\uffeb" +
    "\033\uffeb\035\uffeb\037\uffeb\040\uffeb\041\uffeb\042\uffeb\043" +
    "\uffeb\044\uffeb\045\uffeb\046\uffeb\047\uffeb\050\uffeb\051\uffeb" +
    "\052\uffeb\001\002\000\032\005\033\011\044\013\021\015" +
    "\040\016\023\024\013\030\024\031\uffbd\040\036\054\026" +
    "\055\043\056\030\001\002\000\070\002\ufffa\006\ufffa\007" +
    "\ufffa\010\ufffa\012\ufffa\014\ufffa\020\ufffa\021\ufffa\022\ufffa" +
    "\023\ufffa\025\ufffa\027\ufffa\031\ufffa\033\ufffa\035\ufffa\037" +
    "\ufffa\040\ufffa\041\ufffa\042\ufffa\043\ufffa\044\ufffa\045\ufffa" +
    "\046\ufffa\047\ufffa\050\ufffa\051\ufffa\052\ufffa\001\002\000" +
    "\102\002\uffac\006\uffac\007\uffac\010\uffac\012\uffac\014\uffac" +
    "\020\uffac\021\uffac\022\uffac\023\uffac\025\uffac\027\uffac\030" +
    "\176\031\uffac\032\177\033\uffac\034\175\035\uffac\036\uffac" +
    "\037\uffac\040\uffac\041\uffac\042\uffac\043\uffac\044\uffac\045" +
    "\uffac\046\uffac\047\uffac\050\uffac\051\uffac\052\uffac\053\uffac" +
    "\001\002\000\070\002\ufff9\006\ufff9\007\ufff9\010\ufff9\012" +
    "\ufff9\014\ufff9\020\ufff9\021\ufff9\022\ufff9\023\ufff9\025\ufff9" +
    "\027\ufff9\031\ufff9\033\ufff9\035\ufff9\037\ufff9\040\ufff9\041" +
    "\ufff9\042\ufff9\043\ufff9\044\ufff9\045\ufff9\046\ufff9\047\ufff9" +
    "\050\ufff9\051\ufff9\052\ufff9\001\002\000\070\002\uffed\006" +
    "\uffed\007\uffed\010\uffed\012\uffed\014\uffed\020\uffed\021\uffed" +
    "\022\uffed\023\uffed\025\uffed\027\uffed\031\uffed\033\uffed\035" +
    "\uffed\037\uffed\040\uffed\041\uffed\042\uffed\043\uffed\044\uffed" +
    "\045\uffed\046\uffed\047\uffed\050\uffed\051\uffed\052\uffed\001" +
    "\002\000\070\002\ufff0\006\ufff0\007\ufff0\010\ufff0\012\ufff0" +
    "\014\ufff0\020\ufff0\021\ufff0\022\ufff0\023\ufff0\025\ufff0\027" +
    "\ufff0\031\ufff0\033\ufff0\035\ufff0\037\ufff0\040\ufff0\041\ufff0" +
    "\042\ufff0\043\ufff0\044\ufff0\045\ufff0\046\ufff0\047\ufff0\050" +
    "\ufff0\051\ufff0\052\ufff0\001\002\000\070\002\ufff4\006\ufff4" +
    "\007\ufff4\010\ufff4\012\ufff4\014\ufff4\020\ufff4\021\ufff4\022" +
    "\ufff4\023\ufff4\025\ufff4\027\ufff4\031\ufff4\033\ufff4\035\ufff4" +
    "\037\ufff4\040\ufff4\041\ufff4\042\ufff4\043\ufff4\044\ufff4\045" +
    "\ufff4\046\ufff4\047\ufff4\050\ufff4\051\ufff4\052\ufff4\001\002" +
    "\000\070\002\uffde\006\uffde\007\uffde\010\uffde\012\uffde\014" +
    "\uffde\020\uffde\021\uffde\022\uffde\023\uffde\025\uffde\027\uffde" +
    "\031\uffde\033\uffde\035\uffde\037\uffde\040\uffde\041\uffde\042" +
    "\uffde\043\uffde\044\uffde\045\uffde\046\uffde\047\uffde\050\uffde" +
    "\051\uffde\052\uffde\001\002\000\070\002\ufff3\006\ufff3\007" +
    "\ufff3\010\ufff3\012\ufff3\014\ufff3\020\ufff3\021\ufff3\022\ufff3" +
    "\023\ufff3\025\ufff3\027\ufff3\031\ufff3\033\ufff3\035\ufff3\037" +
    "\ufff3\040\ufff3\041\ufff3\042\ufff3\043\ufff3\044\ufff3\045\ufff3" +
    "\046\ufff3\047\ufff3\050\ufff3\051\ufff3\052\ufff3\001\002\000" +
    "\070\002\uffff\006\uffff\007\uffff\010\uffff\012\uffff\014\uffff" +
    "\020\uffff\021\uffff\022\uffff\023\uffff\025\uffff\027\uffff\031" +
    "\uffff\033\uffff\035\uffff\037\uffff\040\uffff\041\uffff\042\uffff" +
    "\043\uffff\044\uffff\045\uffff\046\uffff\047\uffff\050\uffff\051" +
    "\uffff\052\uffff\001\002\000\030\005\033\011\044\013\021" +
    "\015\040\016\023\024\013\030\024\040\036\054\026\055" +
    "\043\056\030\001\002\000\070\002\ufff6\006\ufff6\007\ufff6" +
    "\010\ufff6\012\ufff6\014\ufff6\020\ufff6\021\ufff6\022\ufff6\023" +
    "\ufff6\025\ufff6\027\ufff6\031\ufff6\033\ufff6\035\ufff6\037\ufff6" +
    "\040\ufff6\041\ufff6\042\ufff6\043\ufff6\044\ufff6\045\ufff6\046" +
    "\ufff6\047\ufff6\050\ufff6\051\ufff6\052\ufff6\001\002\000\012" +
    "\012\106\014\uffd1\022\115\023\107\001\002\000\070\002" +
    "\ufff7\006\ufff7\007\ufff7\010\ufff7\012\ufff7\014\ufff7\020\ufff7" +
    "\021\ufff7\022\ufff7\023\ufff7\025\ufff7\027\ufff7\031\ufff7\033" +
    "\ufff7\035\ufff7\037\ufff7\040\ufff7\041\ufff7\042\ufff7\043\ufff7" +
    "\044\ufff7\045\ufff7\046\ufff7\047\ufff7\050\ufff7\051\ufff7\052" +
    "\ufff7\001\002\000\076\002\uffaf\006\uffaf\007\uffaf\010\uffaf" +
    "\012\uffaf\014\uffaf\020\uffaf\021\uffaf\022\uffaf\023\uffaf\025" +
    "\uffaf\027\uffaf\031\uffaf\032\uffaf\033\uffaf\035\uffaf\036\uffaf" +
    "\037\uffaf\040\uffaf\041\uffaf\042\uffaf\043\uffaf\044\uffaf\045" +
    "\uffaf\046\uffaf\047\uffaf\050\uffaf\051\uffaf\052\uffaf\053\uffaf" +
    "\001\002\000\070\002\uffec\006\uffec\007\uffec\010\uffec\012" +
    "\uffec\014\uffec\020\uffec\021\uffec\022\uffec\023\uffec\025\uffec" +
    "\027\uffec\031\uffec\033\uffec\035\uffec\037\uffec\040\uffec\041" +
    "\uffec\042\uffec\043\uffec\044\uffec\045\uffec\046\uffec\047\uffec" +
    "\050\uffec\051\uffec\052\uffec\001\002\000\004\054\046\001" +
    "\002\000\070\002\ufff1\006\ufff1\007\ufff1\010\ufff1\012\ufff1" +
    "\014\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1\025\ufff1\027" +
    "\ufff1\031\ufff1\033\ufff1\035\ufff1\037\ufff1\040\ufff1\041\ufff1" +
    "\042\ufff1\043\ufff1\044\ufff1\045\ufff1\046\ufff1\047\ufff1\050" +
    "\ufff1\051\ufff1\052\ufff1\001\002\000\004\053\104\001\002" +
    "\000\004\021\050\001\002\000\030\005\033\011\044\013" +
    "\021\015\040\016\023\024\013\030\024\040\036\054\026" +
    "\055\043\056\030\001\002\000\034\006\065\037\060\040" +
    "\052\041\056\042\054\043\061\044\057\045\064\046\062" +
    "\047\063\050\055\051\053\052\066\001\002\000\030\005" +
    "\033\011\044\013\021\015\040\016\023\024\013\030\024" +
    "\040\036\054\026\055\043\056\030\001\002\000\030\005" +
    "\033\011\044\013\021\015\040\016\023\024\013\030\024" +
    "\040\036\054\026\055\043\056\030\001\002\000\030\005" +
    "\033\011\044\013\021\015\040\016\023\024\013\030\024" +
    "\040\036\054\026\055\043\056\030\001\002\000\030\005" +
    "\033\011\044\013\021\015\040\016\023\024\013\030\024" +
    "\040\036\054\026\055\043\056\030\001\002\000\030\005" +
    "\033\011\044\013\021\015\040\016\023\024\013\030\024" +
    "\040\036\054\026\055\043\056\030\001\002\000\030\005" +
    "\033\011\044\013\021\015\040\016\023\024\013\030\024" +
    "\040\036\054\026\055\043\056\030\001\002\000\030\005" +
    "\033\011\044\013\021\015\040\016\023\024\013\030\024" +
    "\040\036\054\026\055\043\056\030\001\002\000\030\005" +
    "\033\011\044\013\021\015\040\016\023\024\013\030\024" +
    "\040\036\054\026\055\043\056\030\001\002\000\030\005" +
    "\033\011\044\013\021\015\040\016\023\024\013\030\024" +
    "\040\036\054\026\055\043\056\030\001\002\000\030\005" +
    "\033\011\044\013\021\015\040\016\023\024\013\030\024" +
    "\040\036\054\026\055\043\056\030\001\002\000\030\005" +
    "\033\011\044\013\021\015\040\016\023\024\013\030\024" +
    "\040\036\054\026\055\043\056\030\001\002\000\030\005" +
    "\033\011\044\013\021\015\040\016\023\024\013\030\024" +
    "\040\036\054\026\055\043\056\030\001\002\000\030\005" +
    "\033\011\044\013\021\015\040\016\023\024\013\030\024" +
    "\040\036\054\026\055\043\056\030\001\002\000\070\002" +
    "\uffdf\006\uffdf\007\uffdf\010\uffdf\012\uffdf\014\uffdf\020\uffdf" +
    "\021\uffdf\022\uffdf\023\uffdf\025\uffdf\027\uffdf\031\uffdf\033" +
    "\uffdf\035\uffdf\037\060\040\052\041\056\042\054\043\061" +
    "\044\057\045\064\046\062\047\063\050\055\051\053\052" +
    "\uffdf\001\002\000\070\002\uffdb\006\uffdb\007\uffdb\010\uffdb" +
    "\012\uffdb\014\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\025" +
    "\uffdb\027\uffdb\031\uffdb\033\uffdb\035\uffdb\037\060\040\052" +
    "\041\056\042\054\043\061\044\057\045\064\046\062\047" +
    "\063\050\055\051\053\052\066\001\002\000\070\002\uffe3" +
    "\006\uffe3\007\uffe3\010\uffe3\012\uffe3\014\uffe3\020\uffe3\021" +
    "\uffe3\022\uffe3\023\uffe3\025\uffe3\027\uffe3\031\uffe3\033\uffe3" +
    "\035\uffe3\037\060\040\052\041\056\042\054\043\061\044" +
    "\057\045\064\046\062\047\063\050\055\051\uffe3\052\uffe3" +
    "\001\002\000\070\002\uffe4\006\uffe4\007\uffe4\010\uffe4\012" +
    "\uffe4\014\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\025\uffe4" +
    "\027\uffe4\031\uffe4\033\uffe4\035\uffe4\037\060\040\052\041" +
    "\056\042\054\043\061\044\057\045\064\046\062\047\063" +
    "\050\055\051\uffe4\052\uffe4\001\002\000\070\002\uffe1\006" +
    "\uffe1\007\uffe1\010\uffe1\012\uffe1\014\uffe1\020\uffe1\021\uffe1" +
    "\022\uffe1\023\uffe1\025\uffe1\027\uffe1\031\uffe1\033\uffe1\035" +
    "\uffe1\037\060\040\052\041\056\042\054\043\061\044\057" +
    "\045\064\046\062\047\063\050\055\051\uffe1\052\uffe1\001" +
    "\002\000\070\002\uffe6\006\uffe6\007\uffe6\010\uffe6\012\uffe6" +
    "\014\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6\025\uffe6\027" +
    "\uffe6\031\uffe6\033\uffe6\035\uffe6\037\060\040\052\041\056" +
    "\042\054\043\061\044\057\045\064\046\062\047\063\050" +
    "\055\051\uffe6\052\uffe6\001\002\000\070\002\uffea\006\uffea" +
    "\007\uffea\010\uffea\012\uffea\014\uffea\020\uffea\021\uffea\022" +
    "\uffea\023\uffea\025\uffea\027\uffea\031\uffea\033\uffea\035\uffea" +
    "\037\uffea\040\uffea\041\056\042\054\043\uffea\044\uffea\045" +
    "\uffea\046\uffea\047\uffea\050\uffea\051\uffea\052\uffea\001\002" +
    "\000\070\002\uffe5\006\uffe5\007\uffe5\010\uffe5\012\uffe5\014" +
    "\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\025\uffe5\027\uffe5" +
    "\031\uffe5\033\uffe5\035\uffe5\037\060\040\052\041\056\042" +
    "\054\043\061\044\057\045\064\046\062\047\063\050\055" +
    "\051\uffe5\052\uffe5\001\002\000\070\002\uffe8\006\uffe8\007" +
    "\uffe8\010\uffe8\012\uffe8\014\uffe8\020\uffe8\021\uffe8\022\uffe8" +
    "\023\uffe8\025\uffe8\027\uffe8\031\uffe8\033\uffe8\035\uffe8\037" +
    "\uffe8\040\uffe8\041\uffe8\042\uffe8\043\uffe8\044\uffe8\045\uffe8" +
    "\046\uffe8\047\uffe8\050\uffe8\051\uffe8\052\uffe8\001\002\000" +
    "\070\002\uffe2\006\uffe2\007\uffe2\010\uffe2\012\uffe2\014\uffe2" +
    "\020\uffe2\021\uffe2\022\uffe2\023\uffe2\025\uffe2\027\uffe2\031" +
    "\uffe2\033\uffe2\035\uffe2\037\060\040\052\041\056\042\054" +
    "\043\061\044\057\045\064\046\062\047\063\050\055\051" +
    "\uffe2\052\uffe2\001\002\000\070\002\uffe7\006\uffe7\007\uffe7" +
    "\010\uffe7\012\uffe7\014\uffe7\020\uffe7\021\uffe7\022\uffe7\023" +
    "\uffe7\025\uffe7\027\uffe7\031\uffe7\033\uffe7\035\uffe7\037\uffe7" +
    "\040\uffe7\041\uffe7\042\uffe7\043\uffe7\044\uffe7\045\uffe7\046" +
    "\uffe7\047\uffe7\050\uffe7\051\uffe7\052\uffe7\001\002\000\070" +
    "\002\uffe0\006\uffe0\007\uffe0\010\uffe0\012\uffe0\014\uffe0\020" +
    "\uffe0\021\uffe0\022\uffe0\023\uffe0\025\uffe0\027\uffe0\031\uffe0" +
    "\033\uffe0\035\uffe0\037\060\040\052\041\056\042\054\043" +
    "\061\044\057\045\064\046\062\047\063\050\055\051\uffe0" +
    "\052\uffe0\001\002\000\070\002\uffe9\006\uffe9\007\uffe9\010" +
    "\uffe9\012\uffe9\014\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9" +
    "\025\uffe9\027\uffe9\031\uffe9\033\uffe9\035\uffe9\037\uffe9\040" +
    "\uffe9\041\056\042\054\043\uffe9\044\uffe9\045\uffe9\046\uffe9" +
    "\047\uffe9\050\uffe9\051\uffe9\052\uffe9\001\002\000\030\005" +
    "\033\011\044\013\021\015\040\016\023\024\013\030\024" +
    "\040\036\054\026\055\043\056\030\001\002\000\034\021" +
    "\uffda\037\060\040\052\041\056\042\054\043\061\044\057" +
    "\045\064\046\062\047\063\050\055\051\053\052\066\001" +
    "\002\000\004\054\164\001\002\000\004\054\156\001\002" +
    "\000\012\012\uffce\014\uffce\022\uffce\023\uffce\001\002\000" +
    "\004\014\146\001\002\000\012\012\uffcf\014\uffcf\022\uffcf" +
    "\023\uffcf\001\002\000\012\012\uffd0\014\uffd0\022\uffd0\023" +
    "\uffd0\001\002\000\012\012\106\014\uffd1\022\115\023\107" +
    "\001\002\000\004\054\116\001\002\000\004\043\117\001" +
    "\002\000\010\004\126\034\121\054\120\001\002\000\012" +
    "\012\uffc5\014\uffc5\022\uffc5\023\uffc5\001\002\000\006\035" +
    "\uffb9\054\132\001\002\000\012\012\uffca\014\uffca\022\uffca" +
    "\023\uffca\001\002\000\012\012\uffc7\014\uffc7\022\uffc7\023" +
    "\uffc7\001\002\000\012\012\uffc8\014\uffc8\022\uffc8\023\uffc8" +
    "\001\002\000\012\012\uffc6\014\uffc6\022\uffc6\023\uffc6\001" +
    "\002\000\004\017\127\001\002\000\004\054\130\001\002" +
    "\000\012\012\uffc3\014\uffc3\022\uffc3\023\uffc3\001\002\000" +
    "\012\012\uffc9\014\uffc9\022\uffc9\023\uffc9\001\002\000\004" +
    "\026\135\001\002\000\004\035\134\001\002\000\012\012" +
    "\uffc4\014\uffc4\022\uffc4\023\uffc4\001\002\000\004\054\136" +
    "\001\002\000\010\025\137\031\uffb7\035\uffb7\001\002\000" +
    "\004\054\141\001\002\000\006\031\uffba\035\uffba\001\002" +
    "\000\004\026\142\001\002\000\004\054\143\001\002\000" +
    "\010\025\137\031\uffb7\035\uffb7\001\002\000\006\031\uffb8" +
    "\035\uffb8\001\002\000\004\014\uffd2\001\002\000\032\005" +
    "\033\010\uffbd\011\044\013\021\015\040\016\023\024\013" +
    "\030\024\040\036\054\026\055\043\056\030\001\002\000" +
    "\040\010\uffbb\027\152\031\uffbb\037\060\040\052\041\056" +
    "\042\054\043\061\044\057\045\064\046\062\047\063\050" +
    "\055\051\053\052\066\001\002\000\004\010\151\001\002" +
    "\000\070\002\uffdd\006\uffdd\007\uffdd\010\uffdd\012\uffdd\014" +
    "\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd\025\uffdd\027\uffdd" +
    "\031\uffdd\033\uffdd\035\uffdd\037\uffdd\040\uffdd\041\uffdd\042" +
    "\uffdd\043\uffdd\044\uffdd\045\uffdd\046\uffdd\047\uffdd\050\uffdd" +
    "\051\uffdd\052\uffdd\001\002\000\030\005\033\011\044\013" +
    "\021\015\040\016\023\024\013\030\024\040\036\054\026" +
    "\055\043\056\030\001\002\000\006\010\uffbe\031\uffbe\001" +
    "\002\000\040\010\uffbb\027\152\031\uffbb\037\060\040\052" +
    "\041\056\042\054\043\061\044\057\045\064\046\062\047" +
    "\063\050\055\051\053\052\066\001\002\000\006\010\uffbc" +
    "\031\uffbc\001\002\000\006\026\160\053\uffb1\001\002\000" +
    "\004\053\162\001\002\000\004\054\161\001\002\000\006" +
    "\043\uffb2\053\uffb2\001\002\000\030\005\033\011\044\013" +
    "\021\015\040\016\023\024\013\030\024\040\036\054\026" +
    "\055\043\056\030\001\002\000\042\012\uffcb\014\uffcb\022" +
    "\uffcb\023\uffcb\037\060\040\052\041\056\042\054\043\061" +
    "\044\057\045\064\046\062\047\063\050\055\051\053\052" +
    "\066\001\002\000\004\030\165\001\002\000\006\031\uffb9" +
    "\054\132\001\002\000\004\031\167\001\002\000\006\026" +
    "\160\043\uffb1\001\002\000\004\043\171\001\002\000\030" +
    "\005\033\011\044\013\021\015\040\016\023\024\013\030" +
    "\024\040\036\054\026\055\043\056\030\001\002\000\042" +
    "\012\uffcd\014\uffcd\022\uffcd\023\uffcd\037\060\040\052\041" +
    "\056\042\054\043\061\044\057\045\064\046\062\047\063" +
    "\050\055\051\053\052\066\001\002\000\012\012\uffcc\014" +
    "\uffcc\022\uffcc\023\uffcc\001\002\000\070\002\ufffb\006\ufffb" +
    "\007\ufffb\010\ufffb\012\ufffb\014\ufffb\020\ufffb\021\ufffb\022" +
    "\ufffb\023\ufffb\025\ufffb\027\ufffb\031\ufffb\033\ufffb\035\ufffb" +
    "\037\ufffb\040\ufffb\041\056\042\054\043\ufffb\044\ufffb\045" +
    "\ufffb\046\ufffb\047\ufffb\050\ufffb\051\ufffb\052\ufffb\001\002" +
    "\000\006\035\uffb5\054\212\001\002\000\032\005\033\011" +
    "\044\013\021\015\040\016\023\024\013\030\024\031\uffc1" +
    "\040\036\054\026\055\043\056\030\001\002\000\030\005" +
    "\033\011\044\013\021\015\040\016\023\024\013\030\024" +
    "\040\036\054\026\055\043\056\030\001\002\000\034\033" +
    "\201\037\060\040\052\041\056\042\054\043\061\044\057" +
    "\045\064\046\062\047\063\050\055\051\053\052\066\001" +
    "\002\000\100\002\uffa9\006\uffa9\007\uffa9\010\uffa9\012\uffa9" +
    "\014\uffa9\017\202\020\uffa9\021\uffa9\022\uffa9\023\uffa9\025" +
    "\uffa9\027\uffa9\031\uffa9\032\uffa9\033\uffa9\035\uffa9\036\uffa9" +
    "\037\uffa9\040\uffa9\041\uffa9\042\uffa9\043\uffa9\044\uffa9\045" +
    "\uffa9\046\uffa9\047\uffa9\050\uffa9\051\uffa9\052\uffa9\053\uffa9" +
    "\001\002\000\030\005\033\011\044\013\021\015\040\016" +
    "\023\024\013\030\024\040\036\054\026\055\043\056\030" +
    "\001\002\000\070\002\uffd7\006\uffd7\007\uffd7\010\uffd7\012" +
    "\uffd7\014\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7\025\uffd7" +
    "\027\uffd7\031\uffd7\033\uffd7\035\uffd7\037\060\040\052\041" +
    "\056\042\054\043\061\044\057\045\064\046\062\047\063" +
    "\050\055\051\053\052\066\001\002\000\036\025\uffbf\031" +
    "\uffbf\037\060\040\052\041\056\042\054\043\061\044\057" +
    "\045\064\046\062\047\063\050\055\051\053\052\066\001" +
    "\002\000\006\025\210\031\uffc2\001\002\000\004\031\207" +
    "\001\002\000\070\002\uffd5\006\uffd5\007\uffd5\010\uffd5\012" +
    "\uffd5\014\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5\025\uffd5" +
    "\027\uffd5\031\uffd5\033\uffd5\035\uffd5\037\uffd5\040\uffd5\041" +
    "\uffd5\042\uffd5\043\uffd5\044\uffd5\045\uffd5\046\uffd5\047\uffd5" +
    "\050\uffd5\051\uffd5\052\uffd5\001\002\000\030\005\033\011" +
    "\044\013\021\015\040\016\023\024\013\030\024\040\036" +
    "\054\026\055\043\056\030\001\002\000\036\025\uffc0\031" +
    "\uffc0\037\060\040\052\041\056\042\054\043\061\044\057" +
    "\045\064\046\062\047\063\050\055\051\053\052\066\001" +
    "\002\000\004\043\215\001\002\000\004\035\214\001\002" +
    "\000\070\002\uffd4\006\uffd4\007\uffd4\010\uffd4\012\uffd4\014" +
    "\uffd4\020\uffd4\021\uffd4\022\uffd4\023\uffd4\025\uffd4\027\uffd4" +
    "\031\uffd4\033\uffd4\035\uffd4\037\uffd4\040\uffd4\041\uffd4\042" +
    "\uffd4\043\uffd4\044\uffd4\045\uffd4\046\uffd4\047\uffd4\050\uffd4" +
    "\051\uffd4\052\uffd4\001\002\000\030\005\033\011\044\013" +
    "\021\015\040\016\023\024\013\030\024\040\036\054\026" +
    "\055\043\056\030\001\002\000\036\025\220\035\uffb3\037" +
    "\060\040\052\041\056\042\054\043\061\044\057\045\064" +
    "\046\062\047\063\050\055\051\053\052\066\001\002\000" +
    "\004\035\uffb6\001\002\000\004\054\221\001\002\000\004" +
    "\043\222\001\002\000\030\005\033\011\044\013\021\015" +
    "\040\016\023\024\013\030\024\040\036\054\026\055\043" +
    "\056\030\001\002\000\036\025\220\035\uffb3\037\060\040" +
    "\052\041\056\042\054\043\061\044\057\045\064\046\062" +
    "\047\063\050\055\051\053\052\066\001\002\000\004\035" +
    "\uffb4\001\002\000\004\031\226\001\002\000\070\002\uffd6" +
    "\006\uffd6\007\uffd6\010\uffd6\012\uffd6\014\uffd6\020\uffd6\021" +
    "\uffd6\022\uffd6\023\uffd6\025\uffd6\027\uffd6\031\uffd6\033\uffd6" +
    "\035\uffd6\037\uffd6\040\uffd6\041\uffd6\042\uffd6\043\uffd6\044" +
    "\uffd6\045\uffd6\046\uffd6\047\uffd6\050\uffd6\051\uffd6\052\uffd6" +
    "\001\002\000\034\020\230\037\060\040\052\041\056\042" +
    "\054\043\061\044\057\045\064\046\062\047\063\050\055" +
    "\051\053\052\066\001\002\000\030\005\033\011\044\013" +
    "\021\015\040\016\023\024\013\030\024\040\036\054\026" +
    "\055\043\056\030\001\002\000\070\002\uffd9\006\uffd9\007" +
    "\232\010\uffd9\012\uffd9\014\uffd9\020\uffd9\021\uffd9\022\uffd9" +
    "\023\uffd9\025\uffd9\027\uffd9\031\uffd9\033\uffd9\035\uffd9\037" +
    "\060\040\052\041\056\042\054\043\061\044\057\045\064" +
    "\046\062\047\063\050\055\051\053\052\066\001\002\000" +
    "\030\005\033\011\044\013\021\015\040\016\023\024\013" +
    "\030\024\040\036\054\026\055\043\056\030\001\002\000" +
    "\070\002\uffd8\006\uffd8\007\uffd8\010\uffd8\012\uffd8\014\uffd8" +
    "\020\uffd8\021\uffd8\022\uffd8\023\uffd8\025\uffd8\027\uffd8\031" +
    "\uffd8\033\uffd8\035\uffd8\037\060\040\052\041\056\042\054" +
    "\043\061\044\057\045\064\046\062\047\063\050\055\051" +
    "\053\052\066\001\002\000\004\054\242\001\002\000\030" +
    "\005\033\011\044\013\021\015\040\016\023\024\013\030" +
    "\024\040\036\054\026\055\043\056\030\001\002\000\030" +
    "\005\033\011\044\013\021\015\040\016\023\024\013\030" +
    "\024\040\036\054\026\055\043\056\030\001\002\000\070" +
    "\002\uffd3\006\uffd3\007\uffd3\010\uffd3\012\uffd3\014\uffd3\020" +
    "\uffd3\021\uffd3\022\uffd3\023\uffd3\025\uffd3\027\uffd3\031\uffd3" +
    "\033\uffd3\035\uffd3\037\060\040\052\041\056\042\054\043" +
    "\061\044\057\045\064\046\062\047\063\050\055\051\053" +
    "\052\066\001\002\000\034\033\241\037\060\040\052\041" +
    "\056\042\054\043\061\044\057\045\064\046\062\047\063" +
    "\050\055\051\053\052\066\001\002\000\076\002\uffaa\006" +
    "\uffaa\007\uffaa\010\uffaa\012\uffaa\014\uffaa\020\uffaa\021\uffaa" +
    "\022\uffaa\023\uffaa\025\uffaa\027\uffaa\031\uffaa\032\uffaa\033" +
    "\uffaa\035\uffaa\036\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa" +
    "\043\uffaa\044\uffaa\045\uffaa\046\uffaa\047\uffaa\050\uffaa\051" +
    "\uffaa\052\uffaa\053\uffaa\001\002\000\076\002\uffab\006\uffab" +
    "\007\uffab\010\uffab\012\uffab\014\uffab\020\uffab\021\uffab\022" +
    "\uffab\023\uffab\025\uffab\027\uffab\031\uffab\032\uffab\033\uffab" +
    "\035\uffab\036\uffab\037\uffab\040\uffab\041\uffab\042\uffab\043" +
    "\uffab\044\uffab\045\uffab\046\uffab\047\uffab\050\uffab\051\uffab" +
    "\052\uffab\053\uffab\001\002\000\034\006\244\037\060\040" +
    "\052\041\056\042\054\043\061\044\057\045\064\046\062" +
    "\047\063\050\055\051\053\052\066\001\002\000\030\005" +
    "\033\011\044\013\021\015\040\016\023\024\013\030\024" +
    "\040\036\054\026\055\043\056\030\001\002\000\070\002" +
    "\uffdc\006\uffdc\007\uffdc\010\uffdc\012\uffdc\014\uffdc\020\uffdc" +
    "\021\uffdc\022\uffdc\023\uffdc\025\uffdc\027\uffdc\031\uffdc\033" +
    "\uffdc\035\uffdc\037\060\040\052\041\056\042\054\043\061" +
    "\044\057\045\064\046\062\047\063\050\055\051\053\052" +
    "\066\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\244\000\060\002\005\003\015\004\034\005\016\006" +
    "\010\007\024\010\030\011\014\012\004\013\044\014\031" +
    "\015\033\016\011\017\040\022\013\031\036\040\026\041" +
    "\006\044\017\050\021\051\041\052\007\053\003\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\056\003\242\004\034\005\016\006\010\007" +
    "\024\010\030\011\014\012\004\013\044\014\031\015\033" +
    "\016\011\017\040\022\013\031\036\040\026\041\006\044" +
    "\017\050\021\051\041\052\007\053\003\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\056\003\226\004\034\005\016" +
    "\006\010\007\024\010\030\011\014\012\004\013\044\014" +
    "\031\015\033\016\011\017\040\022\013\031\036\040\026" +
    "\041\006\044\017\050\021\051\041\052\007\053\003\001" +
    "\001\000\002\001\001\000\002\001\001\000\060\003\146" +
    "\004\034\005\016\006\010\007\024\010\030\011\014\012" +
    "\004\013\044\014\031\015\033\016\011\017\040\022\013" +
    "\031\036\034\224\040\026\041\006\044\017\050\021\051" +
    "\041\052\007\053\003\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\056\003\173\004\034\005\016\006" +
    "\010\007\024\010\030\011\014\012\004\013\044\014\031" +
    "\015\033\016\011\017\040\022\013\031\036\040\026\041" +
    "\006\044\017\050\021\051\041\052\007\053\003\001\001" +
    "\000\002\001\001\000\014\020\111\023\112\024\107\025" +
    "\110\046\113\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\056\003\050" +
    "\004\034\005\016\006\010\007\024\010\030\011\014\012" +
    "\004\013\044\014\031\015\033\016\011\017\040\022\013" +
    "\031\036\040\026\041\006\044\017\050\021\051\041\052" +
    "\007\053\003\001\001\000\002\001\001\000\056\003\102" +
    "\004\034\005\016\006\010\007\024\010\030\011\014\012" +
    "\004\013\044\014\031\015\033\016\011\017\040\022\013" +
    "\031\036\040\026\041\006\044\017\050\021\051\041\052" +
    "\007\053\003\001\001\000\056\003\101\004\034\005\016" +
    "\006\010\007\024\010\030\011\014\012\004\013\044\014" +
    "\031\015\033\016\011\017\040\022\013\031\036\040\026" +
    "\041\006\044\017\050\021\051\041\052\007\053\003\001" +
    "\001\000\056\003\100\004\034\005\016\006\010\007\024" +
    "\010\030\011\014\012\004\013\044\014\031\015\033\016" +
    "\011\017\040\022\013\031\036\040\026\041\006\044\017" +
    "\050\021\051\041\052\007\053\003\001\001\000\056\003" +
    "\077\004\034\005\016\006\010\007\024\010\030\011\014" +
    "\012\004\013\044\014\031\015\033\016\011\017\040\022" +
    "\013\031\036\040\026\041\006\044\017\050\021\051\041" +
    "\052\007\053\003\001\001\000\056\003\076\004\034\005" +
    "\016\006\010\007\024\010\030\011\014\012\004\013\044" +
    "\014\031\015\033\016\011\017\040\022\013\031\036\040" +
    "\026\041\006\044\017\050\021\051\041\052\007\053\003" +
    "\001\001\000\056\003\075\004\034\005\016\006\010\007" +
    "\024\010\030\011\014\012\004\013\044\014\031\015\033" +
    "\016\011\017\040\022\013\031\036\040\026\041\006\044" +
    "\017\050\021\051\041\052\007\053\003\001\001\000\056" +
    "\003\074\004\034\005\016\006\010\007\024\010\030\011" +
    "\014\012\004\013\044\014\031\015\033\016\011\017\040" +
    "\022\013\031\036\040\026\041\006\044\017\050\021\051" +
    "\041\052\007\053\003\001\001\000\056\003\073\004\034" +
    "\005\016\006\010\007\024\010\030\011\014\012\004\013" +
    "\044\014\031\015\033\016\011\017\040\022\013\031\036" +
    "\040\026\041\006\044\017\050\021\051\041\052\007\053" +
    "\003\001\001\000\056\003\072\004\034\005\016\006\010" +
    "\007\024\010\030\011\014\012\004\013\044\014\031\015" +
    "\033\016\011\017\040\022\013\031\036\040\026\041\006" +
    "\044\017\050\021\051\041\052\007\053\003\001\001\000" +
    "\056\003\071\004\034\005\016\006\010\007\024\010\030" +
    "\011\014\012\004\013\044\014\031\015\033\016\011\017" +
    "\040\022\013\031\036\040\026\041\006\044\017\050\021" +
    "\051\041\052\007\053\003\001\001\000\056\003\070\004" +
    "\034\005\016\006\010\007\024\010\030\011\014\012\004" +
    "\013\044\014\031\015\033\016\011\017\040\022\013\031" +
    "\036\040\026\041\006\044\017\050\021\051\041\052\007" +
    "\053\003\001\001\000\056\003\067\004\034\005\016\006" +
    "\010\007\024\010\030\011\014\012\004\013\044\014\031" +
    "\015\033\016\011\017\040\022\013\031\036\040\026\041" +
    "\006\044\017\050\021\051\041\052\007\053\003\001\001" +
    "\000\056\003\066\004\034\005\016\006\010\007\024\010" +
    "\030\011\014\012\004\013\044\014\031\015\033\016\011" +
    "\017\040\022\013\031\036\040\026\041\006\044\017\050" +
    "\021\051\041\052\007\053\003\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\056\003\104" +
    "\004\034\005\016\006\010\007\024\010\030\011\014\012" +
    "\004\013\044\014\031\015\033\016\011\017\040\022\013" +
    "\031\036\040\026\041\006\044\017\050\021\051\041\052" +
    "\007\053\003\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\020\111\023\112" +
    "\024\107\025\144\046\113\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\026\123\027\122\030\124\047\121" +
    "\001\001\000\002\001\001\000\004\036\132\001\001\000" +
    "\004\023\130\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\037" +
    "\137\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\037\143\001\001\000" +
    "\002\001\001\000\002\001\001\000\060\003\146\004\034" +
    "\005\016\006\010\007\024\010\030\011\014\012\004\013" +
    "\044\014\031\015\033\016\011\017\040\022\013\031\036" +
    "\034\147\040\026\041\006\044\017\050\021\051\041\052" +
    "\007\053\003\001\001\000\004\035\152\001\001\000\002" +
    "\001\001\000\002\001\001\000\056\003\153\004\034\005" +
    "\016\006\010\007\024\010\030\011\014\012\004\013\044" +
    "\014\031\015\033\016\011\017\040\022\013\031\036\040" +
    "\026\041\006\044\017\050\021\051\041\052\007\053\003" +
    "\001\001\000\002\001\001\000\004\035\154\001\001\000" +
    "\002\001\001\000\004\045\156\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\056\003\162\004" +
    "\034\005\016\006\010\007\024\010\030\011\014\012\004" +
    "\013\044\014\031\015\033\016\011\017\040\022\013\031" +
    "\036\040\026\041\006\044\017\050\021\051\041\052\007" +
    "\053\003\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\036\165\001\001\000\002\001\001\000\004\045\167" +
    "\001\001\000\002\001\001\000\056\003\171\004\034\005" +
    "\016\006\010\007\024\010\030\011\014\012\004\013\044" +
    "\014\031\015\033\016\011\017\040\022\013\031\036\040" +
    "\026\041\006\044\017\050\021\051\041\052\007\053\003" +
    "\001\001\000\004\024\172\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\042\212\001\001\000\062\003\203" +
    "\004\034\005\016\006\010\007\024\010\030\011\014\012" +
    "\004\013\044\014\031\015\033\016\011\017\040\022\013" +
    "\031\036\032\204\033\205\040\026\041\006\044\017\050" +
    "\021\051\041\052\007\053\003\001\001\000\056\003\177" +
    "\004\034\005\016\006\010\007\024\010\030\011\014\012" +
    "\004\013\044\014\031\015\033\016\011\017\040\022\013" +
    "\031\036\040\026\041\006\044\017\050\021\051\041\052" +
    "\007\053\003\001\001\000\002\001\001\000\002\001\001" +
    "\000\056\003\202\004\034\005\016\006\010\007\024\010" +
    "\030\011\014\012\004\013\044\014\031\015\033\016\011" +
    "\017\040\022\013\031\036\040\026\041\006\044\017\050" +
    "\021\051\041\052\007\053\003\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\056\003\210\004\034\005\016\006\010" +
    "\007\024\010\030\011\014\012\004\013\044\014\031\015" +
    "\033\016\011\017\040\022\013\031\036\040\026\041\006" +
    "\044\017\050\021\051\041\052\007\053\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\056\003\215\004\034\005\016\006\010\007" +
    "\024\010\030\011\014\012\004\013\044\014\031\015\033" +
    "\016\011\017\040\022\013\031\036\040\026\041\006\044" +
    "\017\050\021\051\041\052\007\053\003\001\001\000\004" +
    "\043\216\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\056\003\222\004\034\005\016\006\010" +
    "\007\024\010\030\011\014\012\004\013\044\014\031\015" +
    "\033\016\011\017\040\022\013\031\036\040\026\041\006" +
    "\044\017\050\021\051\041\052\007\053\003\001\001\000" +
    "\004\043\223\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\056\003\230\004" +
    "\034\005\016\006\010\007\024\010\030\011\014\012\004" +
    "\013\044\014\031\015\033\016\011\017\040\022\013\031" +
    "\036\040\026\041\006\044\017\050\021\051\041\052\007" +
    "\053\003\001\001\000\002\001\001\000\056\003\232\004" +
    "\034\005\016\006\010\007\024\010\030\011\014\012\004" +
    "\013\044\014\031\015\033\016\011\017\040\022\013\031" +
    "\036\040\026\041\006\044\017\050\021\051\041\052\007" +
    "\053\003\001\001\000\002\001\001\000\002\001\001\000" +
    "\056\003\237\004\034\005\016\006\010\007\024\010\030" +
    "\011\014\012\004\013\044\014\031\015\033\016\011\017" +
    "\040\022\013\031\036\040\026\041\006\044\017\050\021" +
    "\051\041\052\007\053\003\001\001\000\056\003\236\004" +
    "\034\005\016\006\010\007\024\010\030\011\014\012\004" +
    "\013\044\014\031\015\033\016\011\017\040\022\013\031" +
    "\036\040\026\041\006\044\017\050\021\051\041\052\007" +
    "\053\003\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\056" +
    "\003\244\004\034\005\016\006\010\007\024\010\030\011" +
    "\014\012\004\013\044\014\031\015\033\016\011\017\040" +
    "\022\013\031\036\040\026\041\006\044\017\050\021\051" +
    "\041\052\007\053\003\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



   public static void main(String[] args){
      try{
       parser p = new parser(new Lexer(new FileReader(args[0])));
       Object result = p.parse().value;
	   System.out.println("\nCongratulations!!!Here comes the end of parser!");
      }catch(Exception e ){
	   System.out.println("Some error has happen!!");
	  } 	 
   }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // SubscriptVar2 ::= ID LBRACKET Exp_kl RBRACKET 
            {
              SubscriptVar RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                              try{
							     SimpleVar var = new SimpleVar(idleft,Symbol.symbol(id)); 
							     RESULT = new SubscriptVar(idleft,var,exp);
							  }catch(Exception e){
								 ErrorMsg mye = new ErrorMsg("SubscriptVar2");
                                 mye.error(idleft,idright,"SubscriptVar2");
								 e.printStackTrace();
							  }
						 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SubscriptVar2",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // SubscriptVar ::= Lvalue_kl LBRACKET Exp_kl RBRACKET 
            {
              SubscriptVar RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Var var = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                              try{
							     RESULT = new SubscriptVar(varleft,var,exp);
							  }catch(Exception e){
								 ErrorMsg mye = new ErrorMsg("SubscriptVar");
                                 mye.error(varleft,varright,"SubscriptVar");
								 e.printStackTrace();
							  }
						 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SubscriptVar",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // FieldVar_kl ::= Lvalue_kl PERIOD ID 
            {
              FieldVar RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Var var = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              try{
							     RESULT = new FieldVar(varleft,var,Symbol.symbol(id));
							  }catch(Exception e){
								 ErrorMsg mye = new ErrorMsg("FieldVar_kl");
                                 mye.error(varleft,varright,"FieldVar_kl");
								 e.printStackTrace();
							  }
						 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FieldVar_kl",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // SimpleVar_kl ::= ID 
            {
              SimpleVar RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              try{
							     RESULT = new SimpleVar(idleft,Symbol.symbol(id));
							  }catch(Exception e){
								 ErrorMsg mye = new ErrorMsg("SimpleVar_kl");
                                 mye.error(idleft,idright,"SimpleVar_kl");
								 e.printStackTrace();
							  }
						 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SimpleVar_kl",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Lvalue_kl ::= SubscriptVar2 
            {
              Var RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SubscriptVar var = (SubscriptVar)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = var;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lvalue_kl",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Lvalue_kl ::= SubscriptVar 
            {
              Var RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SubscriptVar var = (SubscriptVar)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = var;System.out.println("\n\n21\n\n\n\n\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lvalue_kl",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Lvalue_kl ::= FieldVar_kl 
            {
              Var RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FieldVar var = (FieldVar)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = var;System.out.println("\n\n20\n\n\n\n\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lvalue_kl",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Lvalue_kl ::= SimpleVar_kl 
            {
              Var RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleVar var = (SimpleVar)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = var;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lvalue_kl",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // TypeOpt_kl ::= 
            {
              NameTy RESULT =null;
		System.out.println("\n\n29\n\n\n\n\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeOpt_kl",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // TypeOpt_kl ::= COLON ID 
            {
              NameTy RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              try{
							     RESULT = new NameTy(idleft,Symbol.symbol(id));
							  }catch(Exception e){
								 ErrorMsg mye = new ErrorMsg("TypeOpt_kl");
                                 mye.error(idleft,idright,"TypeOpt_kl");
								 e.printStackTrace();
							  }
						 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeOpt_kl",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // FieldExpList_right_kl ::= 
            {
              FieldExpList RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FieldExpList_right_kl",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // FieldExpList_right_kl ::= COMMA ID EQ Exp_kl FieldExpList_right_kl 
            {
              FieldExpList RESULT =null;
		int commaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int commaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object comma = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FieldExpList f = (FieldExpList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              try{
							     RESULT = new FieldExpList(commaleft,Symbol.symbol(id),exp,f);
							  }catch(Exception e){
								 ErrorMsg mye = new ErrorMsg("FieldExpList_right_kl");
								 mye.error(commaleft,commaright,"FieldExpList_right_kl");
								 e.printStackTrace();
							  }
						 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FieldExpList_right_kl",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // FieldExpList_kl ::= 
            {
              FieldExpList RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FieldExpList_kl",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // FieldExpList_kl ::= ID EQ Exp_kl FieldExpList_right_kl 
            {
              FieldExpList RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FieldExpList f = (FieldExpList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              try{
							     RESULT = new FieldExpList(idleft,Symbol.symbol(id),exp,f);
							  }catch(Exception e){
								 ErrorMsg mye = new ErrorMsg("FieldExpList_kl");
								 mye.error(idleft,idright,"FieldExpList_kl");
                                 e.printStackTrace();
							  }
						 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FieldExpList_kl",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // FieldList_right_kl ::= 
            {
              FieldList RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FieldList_right_kl",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // FieldList_right_kl ::= COMMA ID COLON ID FieldList_right_kl 
            {
              FieldList RESULT =null;
		int commaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int commaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object comma = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FieldList f = (FieldList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              try{
							     RESULT = new FieldList(commaleft,Symbol.symbol(id1),Symbol.symbol(id2),f);
							  }catch(Exception e){
								 ErrorMsg mye = new ErrorMsg("FieldList_right_kl");
								 mye.error(commaleft,commaright,"FieldList_right_kl");
                                 e.printStackTrace();
							  }
						 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FieldList_right_kl",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // FieldList_kl ::= 
            {
              FieldList RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FieldList_kl",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // FieldList_kl ::= ID COLON ID FieldList_right_kl 
            {
              FieldList RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FieldList f = (FieldList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              try{
							     RESULT = new FieldList(id1left,Symbol.symbol(id1),Symbol.symbol(id2),f);
							  }catch(Exception e){
								 ErrorMsg mye = new ErrorMsg("FieldList_kl");
                                 mye.error(id1left,id1right,"FieldList_kl");
								 e.printStackTrace();
							  }
						 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FieldList_kl",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ExpSeq_right_kl ::= 
            {
              ExpList RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpSeq_right_kl",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ExpSeq_right_kl ::= SEMICOLON Exp_kl ExpSeq_right_kl 
            {
              ExpList RESULT =null;
		int semicolonleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int semicolonright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object semicolon = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int expseqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expseqright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpList expseq = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              try{
							     RESULT = new ExpList(exp,expseq);
							  }catch(Exception e){
								 ErrorMsg mye = new ErrorMsg("ExpSeq_right_kl");
                                 mye.error(semicolonleft,semicolonright,"ExpSeq_right_kl");
								 e.printStackTrace();
							  }
						 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpSeq_right_kl",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ExpSeq_kl ::= 
            {
              ExpList RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpSeq_kl",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ExpSeq_kl ::= Exp_kl ExpSeq_right_kl 
            {
              ExpList RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int expseqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expseqright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpList expseq = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              try{
							     RESULT = new ExpList(exp,expseq);
							  }catch(Exception e){
								 ErrorMsg mye = new ErrorMsg("ExpSeq_right_kl");
                                 mye.error(expleft,expright,"ExpSeq_right_kl");
								 e.printStackTrace();
							  }
						 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpSeq_kl",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ExpList_kl ::= Exp_kl 
            {
              ExpList RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpList_kl",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ExpList_kl ::= ExpList_kl COMMA Exp_kl 
            {
              ExpList RESULT =null;
		int explistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int explistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpList explist = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              try{
							     RESULT = new ExpList(exp,explist);
							  }catch(Exception e){
								 ErrorMsg mye = new ErrorMsg("ExpList_kl");
                                 mye.error(explistleft,explistright,"ExpList_kl");
								 e.printStackTrace();
							  }
						 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpList_kl",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ExpListOpt_kl ::= 
            {
              ExpList RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpListOpt_kl",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ExpListOpt_kl ::= ExpList_kl 
            {
              ExpList RESULT =null;
		int explistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int explistright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpList explist = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              try{
							     RESULT = explist;
							  }catch(Exception e){
								 ErrorMsg mye = new ErrorMsg("ExpList_kl");
                                 mye.error(explistleft,explistright,"ExpList_kl");
								 e.printStackTrace();
							  }
							 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpListOpt_kl",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ArrayTy_kl ::= ARRAY OF ID 
            {
              ArrayTy RESULT =null;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object array = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              try{
							     RESULT = new ArrayTy(arrayleft,Symbol.symbol(id));
							  }catch(Exception e){
								 ErrorMsg mye = new ErrorMsg("ArrayTy_kl");
                                 mye.error(arrayleft,arrayright,"ArrayTy_kl");
								 e.printStackTrace();
							  }
						 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArrayTy_kl",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // RecordTy_kl ::= LBRACE FieldList_kl RBRACE 
            {
              RecordTy RESULT =null;
		int lbraceleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lbraceright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lbrace = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fieldleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fieldright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FieldList field = (FieldList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                              try{
							     RESULT = new RecordTy(lbraceleft,field);
							  }catch(Exception e){
								 ErrorMsg mye = new ErrorMsg("RecordTy_kl");
                                 mye.error(lbraceleft,lbraceright,"RecordTy_kl");
								 e.printStackTrace();
							  }
						 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RecordTy_kl",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NameTy_kl ::= ID 
            {
              NameTy RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              try{
							     RESULT = new NameTy(idleft,Symbol.symbol(id));
							  }catch(Exception e){
								 ErrorMsg mye = new ErrorMsg("NameTy_kl");
                                 mye.error(idleft,idright,"NameTy_kl");
								 e.printStackTrace();
							  }
						 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NameTy_kl",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Type_kl ::= ArrayTy_kl 
            {
              Ty RESULT =null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayTy ty = (ArrayTy)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = ty;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type_kl",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Type_kl ::= RecordTy_kl 
            {
              Ty RESULT =null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		RecordTy ty = (RecordTy)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = ty;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type_kl",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Type_kl ::= NameTy_kl 
            {
              Ty RESULT =null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NameTy ty = (NameTy)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = ty;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type_kl",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // TypeDec_kl ::= TYPE ID EQ Type_kl TypeDec_kl 
            {
              TypeDec RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Ty type = (Ty)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nextleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nextright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TypeDec next = (TypeDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              try{
							     RESULT = new TypeDec(tleft,Symbol.symbol(id),type,next);
							  }catch(Exception e){
								 ErrorMsg mye = new ErrorMsg("TypeDec_kl");
                                 mye.error(tleft,tright,"TypeDec_kl2");
								 e.printStackTrace();
							  }
						 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeDec_kl",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // TypeDec_kl ::= TYPE ID EQ Type_kl 
            {
              TypeDec RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Ty type = (Ty)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              try{
							     RESULT = new TypeDec(tleft,Symbol.symbol(id),type,null);
							  }catch(Exception e){
								 ErrorMsg mye = new ErrorMsg("TypeDec_kl");
                                 mye.error(tleft,tright,"TypeDec_kl");
								 e.printStackTrace();
							  }
						 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeDec_kl",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // VarDec_kl ::= VAR ID TypeOpt_kl ASSIGN Exp_kl 
            {
              VarDec RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int typeoptleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeoptright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NameTy typeopt = (NameTy)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              try{
							    RESULT = new VarDec(varleft,Symbol.symbol(id),typeopt,exp);
							  }catch(Exception e){
								 ErrorMsg mye = new ErrorMsg("VarDec_kl");
                                 mye.error(varleft,varright,"VarDec_kl");
								 e.printStackTrace();
							  }
						 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDec_kl",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FunctionDec_kl ::= FUNC ID LPAREN FieldList_kl RPAREN TypeOpt_kl EQ Exp_kl FunctionDec_kl 
            {
              FunctionDec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int fieldleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int fieldright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		FieldList field = (FieldList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int typeoptleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int typeoptright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NameTy typeopt = (NameTy)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nextleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nextright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FunctionDec next = (FunctionDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              try{
							    RESULT = new FunctionDec(idleft,Symbol.symbol(id),field,typeopt,exp,next);
							  }catch(Exception e){
								 ErrorMsg mye = new ErrorMsg("FunctionDec_kl2");
                                 mye.error(idleft,idright,"FunctionDec_kl2");
								 e.printStackTrace();
							  }
						 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunctionDec_kl",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FunctionDec_kl ::= FUNC ID LPAREN FieldList_kl RPAREN TypeOpt_kl EQ Exp_kl 
            {
              FunctionDec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int fieldleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int fieldright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		FieldList field = (FieldList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int typeoptleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeoptright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NameTy typeopt = (NameTy)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              try{
							    RESULT = new FunctionDec(idleft,Symbol.symbol(id),field,typeopt,exp,null);
							  }catch(Exception e){
								 ErrorMsg mye = new ErrorMsg("FunctionDec_kl");
                                 mye.error(idleft,idright,"FunctionDec_kl");
								 e.printStackTrace();
							  }
						 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunctionDec_kl",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Dec_kl ::= FunctionDec_kl 
            {
              Dec RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FunctionDec dec = (FunctionDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = dec;System.out.println("\n\n26\n\n\n\n\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Dec_kl",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Dec_kl ::= VarDec_kl 
            {
              Dec RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDec dec = (VarDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = dec;System.out.println("\n\n25\n\n\n\n\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Dec_kl",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Dec_kl ::= TypeDec_kl 
            {
              Dec RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TypeDec dec = (TypeDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = dec;System.out.println("\n\n24\n\n\n\n\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Dec_kl",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DecList_kl ::= 
            {
              DecList RESULT =null;
		System.out.println("\n\n23\n\n\n\n\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DecList_kl",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DecList_kl ::= Dec_kl DecList_kl 
            {
              DecList RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int declistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declistright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DecList declist = (DecList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              try{
							     RESULT = new DecList(dec,declist);
							  }catch(Exception e){
								 ErrorMsg mye = new ErrorMsg("DecList_kl");
                                 mye.error(decleft,decright,"DecList_kl");
								 e.printStackTrace();
							  }
						 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DecList_kl",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // AssignExp_kl ::= Lvalue_kl ASSIGN Exp_kl 
            {
              AssignExp RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Var var = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              try{
							     RESULT = new AssignExp(varleft,var,exp);
							  }catch(Exception e){
								 ErrorMsg mye = new ErrorMsg("AssignExp_kl");
                                 mye.error(varleft,varright,"AssignExp_kl");
								 e.printStackTrace();
							  }
						 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AssignExp_kl",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // RecordExp_kl ::= ID LBRACE FieldExpList_kl RBRACE 
            {
              RecordExp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int fieldleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fieldright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FieldExpList field = (FieldExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                              try{
							     RESULT = new RecordExp(idleft,Symbol.symbol(id),field);
							  }catch(Exception e){
								 ErrorMsg mye = new ErrorMsg("RecordExp_kl");
                                 mye.error(idleft,idright,"RecordExp_kl");
								 e.printStackTrace();
							  }
						 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RecordExp_kl",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CallExp_kl ::= ID LPAREN ExpListOpt_kl RPAREN 
            {
              CallExp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expseqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expseqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpList expseq = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                              try{
							     RESULT = new CallExp(idleft,Symbol.symbol(id),expseq);
							  }catch(Exception e){
								 ErrorMsg mye = new ErrorMsg("CallExp_kl");
                                 mye.error(idleft,idright,"CallExp_kl");
								 e.printStackTrace();
							  }
						 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CallExp_kl",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SeqExp_kl ::= LPAREN ExpSeq_kl RPAREN 
            {
              SeqExp RESULT =null;
		int lparenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lparenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lparen = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expseqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expseqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpList expseq = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                              try{
							     RESULT = new SeqExp(lparenleft,expseq);
							  }catch(Exception e){
								 ErrorMsg mye = new ErrorMsg("SeqExp_kl");
                                 mye.error(lparenleft,lparenright,"SeqExp_kl");
								 e.printStackTrace();
							  }
						 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SeqExp_kl",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ArrayExp_kl ::= ID LBRACKET Exp_kl RBRACKET OF Exp_kl 
            {
              ArrayExp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              try{
							     RESULT = new ArrayExp(idleft,Symbol.symbol(id),exp1,exp2);
							  }catch(Exception e){
								 ErrorMsg mye = new ErrorMsg("ArrayExp_kl");
                                 mye.error(idleft,idright,"ArrayExp_kl");
								 e.printStackTrace();
							  }
						 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArrayExp_kl",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // IfExpElse_kl ::= IF Exp_kl THEN Exp_kl ELSE Exp_kl 
            {
              IfExp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp exp3 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              try{
							     RESULT = new IfExp(ileft,exp1,exp2,exp3);
							  }catch(Exception e){
								 ErrorMsg mye = new ErrorMsg("IfExpElse_kl");
                                 mye.error(ileft,iright,"IfExpElse_kl");
								 e.printStackTrace();
							  }
						 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IfExpElse_kl",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // IfExp_kl ::= IF Exp_kl THEN Exp_kl 
            {
              IfExp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              try{
							     RESULT = new IfExp(ileft,exp1,exp2);
							  }catch(Exception e){
								 ErrorMsg mye = new ErrorMsg("IfExp_kl");
                                 mye.error(ileft,iright,"IfExp_kl");
								 e.printStackTrace();
							  }
						 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IfExp_kl",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ForVarDec ::= ID ASSIGN Exp_kl 
            {
              VarDec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              try{
							     RESULT = new VarDec(idleft,Symbol.symbol(id),null,exp);
							  }catch(Exception e){
								 ErrorMsg mye = new ErrorMsg("ForExp_kl");
                                 mye.error(idleft,idright,"ForExp_kl");
								 e.printStackTrace();
							  }
						 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ForVarDec",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ForExp_kl ::= FOR ForVarDec TO Exp_kl DO Exp_kl 
            {
              ForExp RESULT =null;
		int foleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int foright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object fo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int forvarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int forvarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		VarDec forvar = (VarDec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              try{
							     RESULT = new ForExp(foleft,forvar,exp1,exp2);
							  }catch(Exception e){
								 ErrorMsg mye = new ErrorMsg("ForExp_kl");
                                 mye.error(foleft,foright,"ForExp_kl");
								 e.printStackTrace();
							  }
						 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ForExp_kl",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // WhileExp_kl ::= WHILE Exp_kl DO Exp_kl 
            {
              WhileExp RESULT =null;
		int whilleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int whilright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object whil = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              try{
							     RESULT = new WhileExp(whilleft,exp1,exp2);
							  }catch(Exception e){
								 ErrorMsg mye = new ErrorMsg("WhileExp_kl");
                                 mye.error(whilleft,whilright,"WhileExp_kl");
								 e.printStackTrace();
							  }
						 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WhileExp_kl",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LetExp_kl ::= LET DecList_kl IN ExpSeq_kl END 
            {
              LetExp RESULT =null;
		int letleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int letright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object let = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int declistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int declistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DecList declist = (DecList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expseqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expseqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpList expseq = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                              try{
							     SeqExp seqexp = new SeqExp(expseqleft,expseq);
							     RESULT = new LetExp(letleft,declist,seqexp);
							  }catch(Exception e){
								 ErrorMsg mye = new ErrorMsg("LetExp_kl");
                                 mye.error(letleft,letright,"LetExp_kl");
								 e.printStackTrace();
							  }
						 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LetExp_kl",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // BreakExp_kl ::= BREAK 
            {
              BreakExp RESULT =null;
		int brealeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int brearight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object brea = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              try{
							     RESULT = new BreakExp(brealeft);
							  }catch(Exception e){
								 ErrorMsg mye = new ErrorMsg("BreakExp_kl");
                                 mye.error(brealeft,brearight,"BreakExp_kl");
								 e.printStackTrace();
							  }
						 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BreakExp_kl",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OpExp_kl ::= Exp_kl OR Exp_kl 
            {
              OpExp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              try{
							     RESULT = new OpExp(exp1left,exp1,OpExp.PLUS,exp2);
							  }catch(Exception e){
								 ErrorMsg mye = new ErrorMsg("OpExp_kl");
                                 mye.error(exp1left,exp1right,"OpExp_kl");
								 e.printStackTrace();
							  }
						 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OpExp_kl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OpExp_kl ::= Exp_kl AND Exp_kl 
            {
              OpExp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              try{
							     RESULT = new OpExp(exp1left,exp1,OpExp.PLUS,exp2);
							  }catch(Exception e){
								 ErrorMsg mye = new ErrorMsg("OpExp_kl");
                                 mye.error(exp1left,exp1right,"OpExp_kl");
								 e.printStackTrace();
							  }
						 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OpExp_kl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OpExp_kl ::= Exp_kl LE Exp_kl 
            {
              OpExp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              try{
							     RESULT = new OpExp(exp1left,exp1,OpExp.LE,exp2);
							  }catch(Exception e){
								 ErrorMsg mye = new ErrorMsg("OpExp_kl");
                                 mye.error(exp1left,exp1right,"OpExp_kl");
								 e.printStackTrace();
							  }
						 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OpExp_kl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OpExp_kl ::= Exp_kl GE Exp_kl 
            {
              OpExp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              try{
							     RESULT = new OpExp(exp1left,exp1,OpExp.GE,exp2);
							  }catch(Exception e){
								 ErrorMsg mye = new ErrorMsg("OpExp_kl");
                                 mye.error(exp1left,exp1right,"OpExp_kl");
								 e.printStackTrace();
							  }
						 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OpExp_kl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OpExp_kl ::= Exp_kl LT Exp_kl 
            {
              OpExp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              try{
							     RESULT = new OpExp(exp1left,exp1,OpExp.LT,exp2);
							  }catch(Exception e){
								 ErrorMsg mye = new ErrorMsg("OpExp_kl");
                                 mye.error(exp1left,exp1right,"OpExp_kl");
								 e.printStackTrace();
							  }
						 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OpExp_kl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // OpExp_kl ::= Exp_kl GT Exp_kl 
            {
              OpExp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              try{
							     RESULT = new OpExp(exp1left,exp1,OpExp.GT,exp2);
							  }catch(Exception e){
								 ErrorMsg mye = new ErrorMsg("OpExp_kl");
                                 mye.error(exp1left,exp1right,"OpExp_kl");
								 e.printStackTrace();
							  }
						 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OpExp_kl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // OpExp_kl ::= Exp_kl NOTEQ Exp_kl 
            {
              OpExp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              try{
							     RESULT = new OpExp(exp1left,exp1,OpExp.NE,exp2);
							  }catch(Exception e){
								 ErrorMsg mye = new ErrorMsg("OpExp_kl");
                                 mye.error(exp1left,exp1right,"OpExp_kl");
								 e.printStackTrace();
							  }
						 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OpExp_kl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // OpExp_kl ::= Exp_kl EQ Exp_kl 
            {
              OpExp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              try{
							     RESULT = new OpExp(exp1left,exp1,OpExp.EQ,exp2);
							  }catch(Exception e){
								 ErrorMsg mye = new ErrorMsg("OpExp_kl");
                                 mye.error(exp1left,exp1right,"OpExp_kl");
								 e.printStackTrace();
							  }
						 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OpExp_kl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // OpExp_kl ::= Exp_kl SLASH Exp_kl 
            {
              OpExp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              try{
							     RESULT = new OpExp(exp1left,exp1,OpExp.DIV,exp2);
							  }catch(Exception e){
								 ErrorMsg mye = new ErrorMsg("OpExp_kl");
                                 mye.error(exp1left,exp1right,"OpExp_kl");
								 e.printStackTrace();
							  }
						 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OpExp_kl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // OpExp_kl ::= Exp_kl MULT Exp_kl 
            {
              OpExp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              try{
							     RESULT = new OpExp(exp1left,exp1,OpExp.MUL,exp2);
							  }catch(Exception e){
								 ErrorMsg mye = new ErrorMsg("OpExp_kl");
                                 mye.error(exp1left,exp1right,"OpExp_kl");
								 e.printStackTrace();
							  }
						 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OpExp_kl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // OpExp_kl ::= Exp_kl MINUS Exp_kl 
            {
              OpExp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              try{
							     RESULT = new OpExp(exp1left,exp1,OpExp.MINUS,exp2);
							  }catch(Exception e){
								 ErrorMsg mye = new ErrorMsg("OpExp_kl");
                                 mye.error(exp1left,exp1right,"OpExp_kl");
								 e.printStackTrace();
							  }
						 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OpExp_kl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // OpExp_kl ::= Exp_kl PLUS Exp_kl 
            {
              OpExp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              try{
							     RESULT = new OpExp(exp1left,exp1,OpExp.PLUS,exp2);
							  }catch(Exception e){
								 ErrorMsg mye = new ErrorMsg("OpExp_kl");
                                 mye.error(exp1left,exp1right,"OpExp_kl");
								 e.printStackTrace();
							  }
						 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OpExp_kl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NilExp_kl ::= NIL 
            {
              NilExp RESULT =null;
		int nulleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nulright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nul = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              try{
							     RESULT = new NilExp(nulleft);
							  }catch(Exception e){
								 ErrorMsg mye = new ErrorMsg("NilExp_kl");
                                 mye.error(nulleft,nulright,"NilExp_kl");
								 e.printStackTrace();
							  }
						 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NilExp_kl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // IntExp_kl ::= INTEGER 
            {
              IntExp RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer in = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              try{
							     RESULT = new IntExp(inleft,in);
							  }catch(Exception e){
								 ErrorMsg mye = new ErrorMsg("IntExp_kl");
                                 mye.error(inleft,inright,"IntExp_kl");
								 e.printStackTrace();
							  }
						 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IntExp_kl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // StringExp_kl ::= STRING_LITERAL 
            {
              StringExp RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              try{
							     RESULT = new StringExp(stringleft,string);
							  }catch(Exception e){
								 ErrorMsg mye = new ErrorMsg("StringExp_kl");
                                 mye.error(stringleft,stringright,"StringExp_kl");
								 e.printStackTrace();
							  }
						 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StringExp_kl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VarExp_kl ::= Lvalue_kl 
            {
              VarExp RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Var var = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              try{
							     RESULT = new VarExp(varleft,var);
							  }catch(Exception e){
								 ErrorMsg mye = new ErrorMsg("VarExp_kl");
                                 mye.error(varleft,varright,"VarExp_kl");
								 e.printStackTrace();
							  }
						 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarExp_kl",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Exp_kl ::= LetExp_kl 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LetExp exp = (LetExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = exp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp_kl",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Exp_kl ::= BreakExp_kl 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BreakExp exp = (BreakExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = exp;System.out.println("\n\n16\n\n\n\n\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp_kl",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Exp_kl ::= ForExp_kl 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ForExp exp = (ForExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = exp;System.out.println("\n\n15\n\n\n\n\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp_kl",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Exp_kl ::= WhileExp_kl 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WhileExp exp = (WhileExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = exp;System.out.println("\n\n14\n\n\n\n\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp_kl",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Exp_kl ::= IfExpElse_kl 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IfExp exp = (IfExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = exp;System.out.println("\n\n13\n\n\n\n\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp_kl",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Exp_kl ::= IfExp_kl 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IfExp exp = (IfExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = exp;System.out.println("\n\n12\n\n\n\n\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp_kl",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Exp_kl ::= ArrayExp_kl 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayExp exp = (ArrayExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = exp;System.out.println("\n\n11\n\n\n\n\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp_kl",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Exp_kl ::= RecordExp_kl 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		RecordExp exp = (RecordExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = exp;System.out.println("\n\n10\n\n\n\n\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp_kl",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Exp_kl ::= SeqExp_kl 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SeqExp exp = (SeqExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = exp;System.out.println("\n\n9\n\n\n\n\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp_kl",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Exp_kl ::= CallExp_kl 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CallExp exp = (CallExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = exp;System.out.println("\n\n8\n\n\n\n\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp_kl",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Exp_kl ::= AssignExp_kl 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AssignExp exp = (AssignExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = exp;System.out.println("\n\n7\n\n\n\n\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp_kl",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Exp_kl ::= OpExp_kl 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		OpExp exp = (OpExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = exp;System.out.println("\n\n6\n\n\n\n\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp_kl",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Exp_kl ::= MINUS Exp_kl 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = exp;System.out.println("\n\n5\n\n\n\n\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp_kl",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Exp_kl ::= VarExp_kl 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarExp exp = (VarExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = exp;System.out.println("\n\n4\n\n\n\n\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp_kl",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Exp_kl ::= NilExp_kl 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NilExp exp = (NilExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = exp;System.out.println("\n\n3\n\n\n\n\n");;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp_kl",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Exp_kl ::= IntExp_kl 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IntExp exp = (IntExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = exp;System.out.println("\n\n2\n\n\n\n\n");;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp_kl",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Exp_kl ::= StringExp_kl 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StringExp exp = (StringExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = exp;System.out.println("\n\n1\n\n\n\n\n");;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp_kl",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program_kl ::= Exp_kl 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Print p = new Print(System.out); p.prExp(exp,10);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program_kl",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program_kl EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

