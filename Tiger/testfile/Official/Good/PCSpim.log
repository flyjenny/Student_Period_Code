Messages
=========================
SPIM Version Version 7.0 of July 7, 2004
Copyright 1990-2004 by James R. Larus (larus@cs.wisc.edu).
All Rights Reserved.
DOS and Windows ports by David A. Carley (dac@cs.wisc.edu).
Copyright 1997 by Morgan Kaufmann Publishers, Inc.
See the file README for a full copyright notice.
SPIM Version Version 7.0 of July 7, 2004
Copyright 1990-2004 by James R. Larus (larus@cs.wisc.edu).
All Rights Reserved.
DOS and Windows ports by David A. Carley (dac@cs.wisc.edu).
Copyright 1997 by Morgan Kaufmann Publishers, Inc.
See the file README for a full copyright notice.
Memory and registers cleared and the simulator reinitialized.

D:\development\java-workspace\Tiger\testfile\Official\Good\mytest.tig.s successfully loaded
Exception occurred at PC=0x00000000
  Bad address in text read: 0x00000000
Attempt to execute non-instruction at 0x80000180
SPIM Version Version 7.0 of July 7, 2004
Copyright 1990-2004 by James R. Larus (larus@cs.wisc.edu).
All Rights Reserved.
DOS and Windows ports by David A. Carley (dac@cs.wisc.edu).
Copyright 1997 by Morgan Kaufmann Publishers, Inc.
See the file README for a full copyright notice.
Memory and registers cleared and the simulator reinitialized.

D:\development\java-workspace\Tiger\testfile\Official\Good\mytest.tig.s successfully loaded
Exception occurred at PC=0x00000000
  Bad address in text read: 0x00000000
Attempt to execute non-instruction at 0x80000180
SPIM Version Version 7.0 of July 7, 2004
Copyright 1990-2004 by James R. Larus (larus@cs.wisc.edu).
All Rights Reserved.
DOS and Windows ports by David A. Carley (dac@cs.wisc.edu).
Copyright 1997 by Morgan Kaufmann Publishers, Inc.
See the file README for a full copyright notice.
Memory and registers cleared and the simulator reinitialized.

D:\development\java-workspace\Tiger\testfile\Official\Good\mytest.tig.s successfully loaded
Exception occurred at PC=0x00000000
  Bad address in text read: 0x00000000
Attempt to execute non-instruction at 0x80000180
SPIM Version Version 7.0 of July 7, 2004
Copyright 1990-2004 by James R. Larus (larus@cs.wisc.edu).
All Rights Reserved.
DOS and Windows ports by David A. Carley (dac@cs.wisc.edu).
Copyright 1997 by Morgan Kaufmann Publishers, Inc.
See the file README for a full copyright notice.
Memory and registers cleared and the simulator reinitialized.

D:\development\java-workspace\Tiger\testfile\Official\Good\mytest.tig.s successfully loaded
Exception occurred at PC=0x00000000
  Bad address in text read: 0x00000000
Attempt to execute non-instruction at 0x80000180
SPIM Version Version 7.0 of July 7, 2004
Copyright 1990-2004 by James R. Larus (larus@cs.wisc.edu).
All Rights Reserved.
DOS and Windows ports by David A. Carley (dac@cs.wisc.edu).
Copyright 1997 by Morgan Kaufmann Publishers, Inc.
See the file README for a full copyright notice.
Memory and registers cleared and the simulator reinitialized.

D:\development\java-workspace\Tiger\testfile\Official\Good\mytest.tig.s successfully loaded
Exception occurred at PC=0x00000000
  Bad address in text read: 0x00000000
Attempt to execute non-instruction at 0x80000180
SPIM Version Version 7.0 of July 7, 2004
Copyright 1990-2004 by James R. Larus (larus@cs.wisc.edu).
All Rights Reserved.
DOS and Windows ports by David A. Carley (dac@cs.wisc.edu).
Copyright 1997 by Morgan Kaufmann Publishers, Inc.
See the file README for a full copyright notice.
Memory and registers cleared and the simulator reinitialized.

D:\development\java-workspace\Tiger\testfile\Official\Good\mytest.tig.s successfully loaded
Exception occurred at PC=0x00000000
  Bad address in text read: 0x00000000
Attempt to execute non-instruction at 0x80000180
SPIM Version Version 7.0 of July 7, 2004
Copyright 1990-2004 by James R. Larus (larus@cs.wisc.edu).
All Rights Reserved.
DOS and Windows ports by David A. Carley (dac@cs.wisc.edu).
Copyright 1997 by Morgan Kaufmann Publishers, Inc.
See the file README for a full copyright notice.
Memory and registers cleared and the simulator reinitialized.

D:\development\java-workspace\Tiger\testfile\Official\Good\mytest.tig.s successfully loaded
Exception occurred at PC=0x00000000
  Bad address in text read: 0x00000000
Attempt to execute non-instruction at 0x80000180
SPIM Version Version 7.0 of July 7, 2004
Copyright 1990-2004 by James R. Larus (larus@cs.wisc.edu).
All Rights Reserved.
DOS and Windows ports by David A. Carley (dac@cs.wisc.edu).
Copyright 1997 by Morgan Kaufmann Publishers, Inc.
See the file README for a full copyright notice.
Memory and registers cleared and the simulator reinitialized.

D:\development\java-workspace\Tiger\testfile\Official\Good\mytest.tig.s successfully loaded
Exception occurred at PC=0x00000000
  Bad address in text read: 0x00000000
Attempt to execute non-instruction at 0x80000180
SPIM Version Version 7.0 of July 7, 2004
Copyright 1990-2004 by James R. Larus (larus@cs.wisc.edu).
All Rights Reserved.
DOS and Windows ports by David A. Carley (dac@cs.wisc.edu).
Copyright 1997 by Morgan Kaufmann Publishers, Inc.
See the file README for a full copyright notice.
Memory and registers cleared and the simulator reinitialized.

D:\development\java-workspace\Tiger\testfile\Official\Good\mytest.tig.s successfully loaded
Exception occurred at PC=0x00000000
  Bad address in text read: 0x00000000
Attempt to execute non-instruction at 0x80000180
SPIM Version Version 7.0 of July 7, 2004
Copyright 1990-2004 by James R. Larus (larus@cs.wisc.edu).
All Rights Reserved.
DOS and Windows ports by David A. Carley (dac@cs.wisc.edu).
Copyright 1997 by Morgan Kaufmann Publishers, Inc.
See the file README for a full copyright notice.
Memory and registers cleared and the simulator reinitialized.

D:\development\java-workspace\Tiger\testfile\Official\Good\mytest.tig.s successfully loaded
Exception occurred at PC=0x00000000
  Bad address in text read: 0x00000000
Attempt to execute non-instruction at 0x80000180
SPIM Version Version 7.0 of July 7, 2004
Copyright 1990-2004 by James R. Larus (larus@cs.wisc.edu).
All Rights Reserved.
DOS and Windows ports by David A. Carley (dac@cs.wisc.edu).
Copyright 1997 by Morgan Kaufmann Publishers, Inc.
See the file README for a full copyright notice.
Memory and registers cleared and the simulator reinitialized.

D:\development\java-workspace\Tiger\testfile\Official\Good\mytest.tig.s successfully loaded
Exception occurred at PC=0x00000000
  Bad address in text read: 0x00000000
Attempt to execute non-instruction at 0x80000180
SPIM Version Version 7.0 of July 7, 2004
Copyright 1990-2004 by James R. Larus (larus@cs.wisc.edu).
All Rights Reserved.
DOS and Windows ports by David A. Carley (dac@cs.wisc.edu).
Copyright 1997 by Morgan Kaufmann Publishers, Inc.
See the file README for a full copyright notice.
Memory and registers cleared and the simulator reinitialized.

D:\development\java-workspace\Tiger\testfile\Official\Good\mytest.tig.s successfully loaded
SPIM Version Version 7.0 of July 7, 2004
Copyright 1990-2004 by James R. Larus (larus@cs.wisc.edu).
All Rights Reserved.
DOS and Windows ports by David A. Carley (dac@cs.wisc.edu).
Copyright 1997 by Morgan Kaufmann Publishers, Inc.
See the file README for a full copyright notice.
Memory and registers cleared and the simulator reinitialized.

D:\development\java-workspace\Tiger\testfile\Official\Good\mytest.tig.s successfully loaded
Exception occurred at PC=0x00000000
  Bad address in text read: 0x00000000
Attempt to execute non-instruction at 0x80000180
SPIM Version Version 7.0 of July 7, 2004
Copyright 1990-2004 by James R. Larus (larus@cs.wisc.edu).
All Rights Reserved.
DOS and Windows ports by David A. Carley (dac@cs.wisc.edu).
Copyright 1997 by Morgan Kaufmann Publishers, Inc.
See the file README for a full copyright notice.
Memory and registers cleared and the simulator reinitialized.

D:\development\java-workspace\Tiger\testfile\Official\Good\mytest.tig.s successfully loaded
Exception occurred at PC=0x00000000
  Bad address in text read: 0x00000000
Attempt to execute non-instruction at 0x80000180
SPIM Version Version 7.0 of July 7, 2004
Copyright 1990-2004 by James R. Larus (larus@cs.wisc.edu).
All Rights Reserved.
DOS and Windows ports by David A. Carley (dac@cs.wisc.edu).
Copyright 1997 by Morgan Kaufmann Publishers, Inc.
See the file README for a full copyright notice.
Memory and registers cleared and the simulator reinitialized.

D:\development\java-workspace\Tiger\testfile\Official\Good\mytest.tig.s successfully loaded
SPIM Version Version 7.0 of July 7, 2004
Copyright 1990-2004 by James R. Larus (larus@cs.wisc.edu).
All Rights Reserved.
DOS and Windows ports by David A. Carley (dac@cs.wisc.edu).
Copyright 1997 by Morgan Kaufmann Publishers, Inc.
See the file README for a full copyright notice.
Memory and registers cleared and the simulator reinitialized.

D:\development\java-workspace\Tiger\testfile\Official\Good\mytest.tig.s successfully loaded
Exception occurred at PC=0x00000000
  Bad address in text read: 0x00000000
Attempt to execute non-instruction at 0x80000180
SPIM Version Version 7.0 of July 7, 2004
Copyright 1990-2004 by James R. Larus (larus@cs.wisc.edu).
All Rights Reserved.
DOS and Windows ports by David A. Carley (dac@cs.wisc.edu).
Copyright 1997 by Morgan Kaufmann Publishers, Inc.
See the file README for a full copyright notice.
Memory and registers cleared and the simulator reinitialized.

D:\development\java-workspace\Tiger\testfile\Official\Good\mytest.tig.s successfully loaded
Exception occurred at PC=0x00000000
  Bad address in text read: 0x00000000
Attempt to execute non-instruction at 0x80000180
SPIM Version Version 7.0 of July 7, 2004
Copyright 1990-2004 by James R. Larus (larus@cs.wisc.edu).
All Rights Reserved.
DOS and Windows ports by David A. Carley (dac@cs.wisc.edu).
Copyright 1997 by Morgan Kaufmann Publishers, Inc.
See the file README for a full copyright notice.
Memory and registers cleared and the simulator reinitialized.

D:\development\java-workspace\Tiger\testfile\Official\Good\mytest.tig.s successfully loaded
Exception occurred at PC=0x00000000
  Bad address in text read: 0x00000000
Attempt to execute non-instruction at 0x80000180
SPIM Version Version 7.0 of July 7, 2004
Copyright 1990-2004 by James R. Larus (larus@cs.wisc.edu).
All Rights Reserved.
DOS and Windows ports by David A. Carley (dac@cs.wisc.edu).
Copyright 1997 by Morgan Kaufmann Publishers, Inc.
See the file README for a full copyright notice.
Memory and registers cleared and the simulator reinitialized.

D:\development\java-workspace\Tiger\testfile\Official\Good\mytest.tig.s successfully loaded
SPIM Version Version 7.0 of July 7, 2004
Copyright 1990-2004 by James R. Larus (larus@cs.wisc.edu).
All Rights Reserved.
DOS and Windows ports by David A. Carley (dac@cs.wisc.edu).
Copyright 1997 by Morgan Kaufmann Publishers, Inc.
See the file README for a full copyright notice.
Memory and registers cleared and the simulator reinitialized.

D:\development\java-workspace\Tiger\testfile\Official\Good\mytest.tig.s successfully loaded
Exception occurred at PC=0x00000000
  Bad address in text read: 0x00000000
Attempt to execute non-instruction at 0x80000180
SPIM Version Version 7.0 of July 7, 2004
Copyright 1990-2004 by James R. Larus (larus@cs.wisc.edu).
All Rights Reserved.
DOS and Windows ports by David A. Carley (dac@cs.wisc.edu).
Copyright 1997 by Morgan Kaufmann Publishers, Inc.
See the file README for a full copyright notice.
Memory and registers cleared and the simulator reinitialized.

D:\development\java-workspace\Tiger\testfile\Official\Good\mytest.tig.s successfully loaded
Exception occurred at PC=0x00000000
  Bad address in text read: 0x00000000
Attempt to execute non-instruction at 0x80000180
SPIM Version Version 7.0 of July 7, 2004
Copyright 1990-2004 by James R. Larus (larus@cs.wisc.edu).
All Rights Reserved.
DOS and Windows ports by David A. Carley (dac@cs.wisc.edu).
Copyright 1997 by Morgan Kaufmann Publishers, Inc.
See the file README for a full copyright notice.
Memory and registers cleared and the simulator reinitialized.

D:\development\java-workspace\Tiger\testfile\Official\Good\mytest.tig.s successfully loaded
Exception occurred at PC=0x00000000
  Bad address in text read: 0x00000000
Attempt to execute non-instruction at 0x80000180
SPIM Version Version 7.0 of July 7, 2004
Copyright 1990-2004 by James R. Larus (larus@cs.wisc.edu).
All Rights Reserved.
DOS and Windows ports by David A. Carley (dac@cs.wisc.edu).
Copyright 1997 by Morgan Kaufmann Publishers, Inc.
See the file README for a full copyright notice.
Memory and registers cleared and the simulator reinitialized.

D:\development\java-workspace\Tiger\testfile\Official\Good\mytest.tig.s successfully loaded
Exception occurred at PC=0x00000000
  Bad address in text read: 0x00000000
Attempt to execute non-instruction at 0x80000180
SPIM Version Version 7.0 of July 7, 2004
Copyright 1990-2004 by James R. Larus (larus@cs.wisc.edu).
All Rights Reserved.
DOS and Windows ports by David A. Carley (dac@cs.wisc.edu).
Copyright 1997 by Morgan Kaufmann Publishers, Inc.
See the file README for a full copyright notice.
Memory and registers cleared and the simulator reinitialized.

D:\development\java-workspace\Tiger\testfile\Official\Good\mytest.tig.s successfully loaded
Exception occurred at PC=0x00000000
  Bad address in text read: 0x00000000
Attempt to execute non-instruction at 0x80000180
SPIM Version Version 7.0 of July 7, 2004
Copyright 1990-2004 by James R. Larus (larus@cs.wisc.edu).
All Rights Reserved.
DOS and Windows ports by David A. Carley (dac@cs.wisc.edu).
Copyright 1997 by Morgan Kaufmann Publishers, Inc.
See the file README for a full copyright notice.
Memory and registers cleared and the simulator reinitialized.

D:\development\java-workspace\Tiger\testfile\Official\Good\mytest.tig.s successfully loaded
Exception occurred at PC=0x00000000
  Bad address in text read: 0x00000000
Attempt to execute non-instruction at 0x80000180
SPIM Version Version 7.0 of July 7, 2004
Copyright 1990-2004 by James R. Larus (larus@cs.wisc.edu).
All Rights Reserved.
DOS and Windows ports by David A. Carley (dac@cs.wisc.edu).
Copyright 1997 by Morgan Kaufmann Publishers, Inc.
See the file README for a full copyright notice.
Memory and registers cleared and the simulator reinitialized.

D:\development\java-workspace\Tiger\testfile\Official\Good\mytest.tig.s successfully loaded
Exception occurred at PC=0x00000000
  Bad address in text read: 0x00000000
Attempt to execute non-instruction at 0x80000180
SPIM Version Version 7.0 of July 7, 2004
Copyright 1990-2004 by James R. Larus (larus@cs.wisc.edu).
All Rights Reserved.
DOS and Windows ports by David A. Carley (dac@cs.wisc.edu).
Copyright 1997 by Morgan Kaufmann Publishers, Inc.
See the file README for a full copyright notice.
Memory and registers cleared and the simulator reinitialized.

D:\development\java-workspace\Tiger\testfile\Official\Good\mytest.tig.s successfully loaded
Exception occurred at PC=0x00000000
  Bad address in text read: 0x00000000
Attempt to execute non-instruction at 0x80000180
SPIM Version Version 7.0 of July 7, 2004
Copyright 1990-2004 by James R. Larus (larus@cs.wisc.edu).
All Rights Reserved.
DOS and Windows ports by David A. Carley (dac@cs.wisc.edu).
Copyright 1997 by Morgan Kaufmann Publishers, Inc.
See the file README for a full copyright notice.
Memory and registers cleared and the simulator reinitialized.

D:\development\java-workspace\Tiger\testfile\Official\Good\mytest.tig.s successfully loaded
Exception occurred at PC=0x00000000
  Bad address in text read: 0x00000000
Attempt to execute non-instruction at 0x80000180
SPIM Version Version 7.0 of July 7, 2004
Copyright 1990-2004 by James R. Larus (larus@cs.wisc.edu).
All Rights Reserved.
DOS and Windows ports by David A. Carley (dac@cs.wisc.edu).
Copyright 1997 by Morgan Kaufmann Publishers, Inc.
See the file README for a full copyright notice.
Memory and registers cleared and the simulator reinitialized.

D:\development\java-workspace\Tiger\testfile\Official\Good\mytest.tig.s successfully loaded
Exception occurred at PC=0x00000000
  Bad address in text read: 0x00000000
Attempt to execute non-instruction at 0x80000180
SPIM Version Version 7.0 of July 7, 2004
Copyright 1990-2004 by James R. Larus (larus@cs.wisc.edu).
All Rights Reserved.
DOS and Windows ports by David A. Carley (dac@cs.wisc.edu).
Copyright 1997 by Morgan Kaufmann Publishers, Inc.
See the file README for a full copyright notice.
Memory and registers cleared and the simulator reinitialized.

D:\development\java-workspace\Tiger\testfile\Official\Good\mytest.tig.s successfully loaded
Exception occurred at PC=0x00000000
  Bad address in text read: 0x00000000
Attempt to execute non-instruction at 0x80000180
SPIM Version Version 7.0 of July 7, 2004
Copyright 1990-2004 by James R. Larus (larus@cs.wisc.edu).
All Rights Reserved.
DOS and Windows ports by David A. Carley (dac@cs.wisc.edu).
Copyright 1997 by Morgan Kaufmann Publishers, Inc.
See the file README for a full copyright notice.
Memory and registers cleared and the simulator reinitialized.

D:\development\java-workspace\Tiger\testfile\Official\Good\mytest.tig.s successfully loaded
Exception occurred at PC=0x00000000
  Bad address in text read: 0x00000000
Attempt to execute non-instruction at 0x80000180
SPIM Version Version 7.0 of July 7, 2004
Copyright 1990-2004 by James R. Larus (larus@cs.wisc.edu).
All Rights Reserved.
DOS and Windows ports by David A. Carley (dac@cs.wisc.edu).
Copyright 1997 by Morgan Kaufmann Publishers, Inc.
See the file README for a full copyright notice.
Memory and registers cleared and the simulator reinitialized.

D:\development\java-workspace\Tiger\testfile\Official\Good\mytest.tig.s successfully loaded
Exception occurred at PC=0x00000000
  Bad address in text read: 0x00000000
Attempt to execute non-instruction at 0x80000180
SPIM Version Version 7.0 of July 7, 2004
Copyright 1990-2004 by James R. Larus (larus@cs.wisc.edu).
All Rights Reserved.
DOS and Windows ports by David A. Carley (dac@cs.wisc.edu).
Copyright 1997 by Morgan Kaufmann Publishers, Inc.
See the file README for a full copyright notice.
Memory and registers cleared and the simulator reinitialized.

D:\development\java-workspace\Tiger\testfile\Official\Good\mytest.tig.s successfully loaded
Exception occurred at PC=0x00000000
  Bad address in text read: 0x00000000
Attempt to execute non-instruction at 0x80000180
SPIM Version Version 7.0 of July 7, 2004
Copyright 1990-2004 by James R. Larus (larus@cs.wisc.edu).
All Rights Reserved.
DOS and Windows ports by David A. Carley (dac@cs.wisc.edu).
Copyright 1997 by Morgan Kaufmann Publishers, Inc.
See the file README for a full copyright notice.
Memory and registers cleared and the simulator reinitialized.

D:\development\java-workspace\Tiger\testfile\Official\Good\mytest.tig.s successfully loaded
Exception occurred at PC=0x00000000
  Bad address in text read: 0x00000000
Attempt to execute non-instruction at 0x80000180
SPIM Version Version 7.0 of July 7, 2004
Copyright 1990-2004 by James R. Larus (larus@cs.wisc.edu).
All Rights Reserved.
DOS and Windows ports by David A. Carley (dac@cs.wisc.edu).
Copyright 1997 by Morgan Kaufmann Publishers, Inc.
See the file README for a full copyright notice.
Memory and registers cleared and the simulator reinitialized.

D:\development\java-workspace\Tiger\testfile\Official\Good\mytest.tig.s successfully loaded
Exception occurred at PC=0x00000000
  Bad address in text read: 0x00000000
Attempt to execute non-instruction at 0x80000180
SPIM Version Version 7.0 of July 7, 2004
Copyright 1990-2004 by James R. Larus (larus@cs.wisc.edu).
All Rights Reserved.
DOS and Windows ports by David A. Carley (dac@cs.wisc.edu).
Copyright 1997 by Morgan Kaufmann Publishers, Inc.
See the file README for a full copyright notice.
Memory and registers cleared and the simulator reinitialized.

D:\development\java-workspace\Tiger\testfile\Official\Good\mytest.tig.s successfully loaded
Exception occurred at PC=0x00000000
  Bad address in text read: 0x00000000
Attempt to execute non-instruction at 0x80000180
SPIM Version Version 7.0 of July 7, 2004
Copyright 1990-2004 by James R. Larus (larus@cs.wisc.edu).
All Rights Reserved.
DOS and Windows ports by David A. Carley (dac@cs.wisc.edu).
Copyright 1997 by Morgan Kaufmann Publishers, Inc.
See the file README for a full copyright notice.
Memory and registers cleared and the simulator reinitialized.

D:\development\java-workspace\Tiger\testfile\Official\Good\mytest.tig.s successfully loaded
Exception occurred at PC=0x004002a4
  Bad address in data/stack read: 0x100400d0
Attempt to execute non-instruction at 0x80000180
SPIM Version Version 7.0 of July 7, 2004
Copyright 1990-2004 by James R. Larus (larus@cs.wisc.edu).
All Rights Reserved.
DOS and Windows ports by David A. Carley (dac@cs.wisc.edu).
Copyright 1997 by Morgan Kaufmann Publishers, Inc.
See the file README for a full copyright notice.
Memory and registers cleared and the simulator reinitialized.

D:\development\java-workspace\Tiger\testfile\Official\Good\mytest.tig.s successfully loaded
Exception occurred at PC=0x004002a4
  Bad address in data/stack read: 0x100400d4
Attempt to execute non-instruction at 0x80000180
Exception occurred at PC=0x004002a4
  Bad address in data/stack read: 0x100400dc
SPIM Version Version 7.0 of July 7, 2004
Copyright 1990-2004 by James R. Larus (larus@cs.wisc.edu).
All Rights Reserved.
DOS and Windows ports by David A. Carley (dac@cs.wisc.edu).
Copyright 1997 by Morgan Kaufmann Publishers, Inc.
See the file README for a full copyright notice.
Memory and registers cleared and the simulator reinitialized.

D:\development\java-workspace\Tiger\testfile\Official\Good\mytest.tig.s successfully loaded
Exception occurred at PC=0x00000000
  Bad address in text read: 0x00000000
Attempt to execute non-instruction at 0x80000180
SPIM Version Version 7.0 of July 7, 2004
Copyright 1990-2004 by James R. Larus (larus@cs.wisc.edu).
All Rights Reserved.
DOS and Windows ports by David A. Carley (dac@cs.wisc.edu).
Copyright 1997 by Morgan Kaufmann Publishers, Inc.
See the file README for a full copyright notice.
Memory and registers cleared and the simulator reinitialized.

D:\development\java-workspace\Tiger\testfile\Official\Good\mytest.tig.s successfully loaded
Exception occurred at PC=0x00000000
  Bad address in text read: 0x00000000
Attempt to execute non-instruction at 0x80000180
SPIM Version Version 7.0 of July 7, 2004
Copyright 1990-2004 by James R. Larus (larus@cs.wisc.edu).
All Rights Reserved.
DOS and Windows ports by David A. Carley (dac@cs.wisc.edu).
Copyright 1997 by Morgan Kaufmann Publishers, Inc.
See the file README for a full copyright notice.
Memory and registers cleared and the simulator reinitialized.

D:\development\java-workspace\Tiger\testfile\Official\Good\mytest.tig.s successfully loaded
Exception occurred at PC=0x00000000
  Bad address in text read: 0x00000000
Attempt to execute non-instruction at 0x80000180
SPIM Version Version 7.0 of July 7, 2004
Copyright 1990-2004 by James R. Larus (larus@cs.wisc.edu).
All Rights Reserved.
DOS and Windows ports by David A. Carley (dac@cs.wisc.edu).
Copyright 1997 by Morgan Kaufmann Publishers, Inc.
See the file README for a full copyright notice.
Memory and registers cleared and the simulator reinitialized.

D:\development\java-workspace\Tiger\testfile\Official\Good\mytest.tig.s successfully loaded
Exception occurred at PC=0x00000000
  Bad address in text read: 0x00000000
Attempt to execute non-instruction at 0x80000180
SPIM Version Version 7.0 of July 7, 2004
Copyright 1990-2004 by James R. Larus (larus@cs.wisc.edu).
All Rights Reserved.
DOS and Windows ports by David A. Carley (dac@cs.wisc.edu).
Copyright 1997 by Morgan Kaufmann Publishers, Inc.
See the file README for a full copyright notice.
Memory and registers cleared and the simulator reinitialized.

D:\development\java-workspace\Tiger\testfile\Official\Good\mytest.tig.s successfully loaded
Exception occurred at PC=0x00000000
  Bad address in text read: 0x00000000
Attempt to execute non-instruction at 0x80000180


Registers
=========================
 PC      = 00000000   EPC     = 00000000   Cause   = 00000018   BadVAddr= 00000000
 Status  = 3000ff12   HI      = 00000000   LO      = 00000000
                                 General Registers
R0  (r0) = 0          R8  (t0) = -2147477304 R16 (s0) = 0          R24 (t8) = 0         
R1  (at) = 268500992  R9  (t1) = 0          R17 (s1) = 0          R25 (t9) = 0         
R2  (v0) = 4          R10 (t2) = 0          R18 (s2) = 0          R26 (k0) = 0         
R3  (v1) = -4         R11 (t3) = 0          R19 (s3) = 0          R27 (k1) = 0         
R4  (a0) = 268500994  R12 (t4) = 0          R20 (s4) = 0          R28 (gp) = 268468224 
R5  (a1) = 0          R13 (t5) = 0          R21 (s5) = 0          R29 (sp) = 2147477304
R6  (a2) = 0          R14 (t6) = 0          R22 (s6) = 0          R30 (s8) = 0         
R7  (a3) = 1          R15 (t7) = 0          R23 (s7) = 0          R31 (ra) = 0         

 FIR    = 00009800    FCSR    = 00000000    FCCR   = 00000000   FEXR    = 00000000
 FENR   = 00000000
                              Double Floating Point Registers
FP0  = 0.000000      FP8  = 0.000000      FP16 = 0.000000      FP24 = 0.000000     
FP2  = 0.000000      FP10 = 0.000000      FP18 = 0.000000      FP26 = 0.000000     
FP4  = 0.000000      FP12 = 0.000000      FP20 = 0.000000      FP28 = 0.000000     
FP6  = 0.000000      FP14 = 0.000000      FP22 = 0.000000      FP30 = 0.000000     
                              Single Floating Point Registers
FP0  = 0.000000      FP8  = 0.000000      FP16 = 0.000000      FP24 = 0.000000     
FP1  = 0.000000      FP9  = 0.000000      FP17 = 0.000000      FP25 = 0.000000     
FP2  = 0.000000      FP10 = 0.000000      FP18 = 0.000000      FP26 = 0.000000     
FP3  = 0.000000      FP11 = 0.000000      FP19 = 0.000000      FP27 = 0.000000     
FP4  = 0.000000      FP12 = 0.000000      FP20 = 0.000000      FP28 = 0.000000     
FP5  = 0.000000      FP13 = 0.000000      FP21 = 0.000000      FP29 = 0.000000     
FP6  = 0.000000      FP14 = 0.000000      FP22 = 0.000000      FP30 = 0.000000     
FP7  = 0.000000      FP15 = 0.000000      FP23 = 0.000000      FP31 = 0.000000     


Console
=========================

stats -- #instructions : 0
         #reads    0        #writes 0
         #branches 0        #other  0
1 3 

stats -- #instructions : 1046
         #reads    274        #writes 178
         #branches 192        #other  402


Text Segment
=========================
[0x00400000]        0x03dd4022  sub $8, $30, $29                ; 6: sub $t0,$fp,$sp
[0x00400004]        0x001df021  addu $30, $0, $29               ; 7: move $fp,$sp
[0x00400008]        0x23bdffd4  addi $29, $29, -44              ; 8: sub $sp,$sp,44
[0x0040000c]        0xafc8ffd4  sw $8, -44($30)                 ; 9: sw $t0,-44($fp)
[0x00400010]        0xafdfffd8  sw $31, -40($30)                ; 10: sw $ra,-40($fp)
[0x00400014]        0xafd7ffdc  sw $23, -36($30)                ; 11: sw $s7,-36($fp)
[0x00400018]        0xafd6ffe0  sw $22, -32($30)                ; 12: sw $s6,-32($fp)
[0x0040001c]        0xafd5ffe4  sw $21, -28($30)                ; 13: sw $s5,-28($fp)
[0x00400020]        0xafd4ffe8  sw $20, -24($30)                ; 14: sw $s4,-24($fp)
[0x00400024]        0xafd3ffec  sw $19, -20($30)                ; 15: sw $s3,-20($fp)
[0x00400028]        0xafd2fff0  sw $18, -16($30)                ; 16: sw $s2,-16($fp)
[0x0040002c]        0xafd1fff4  sw $17, -12($30)                ; 17: sw $s1,-12($fp)
[0x00400030]        0xafd0fff8  sw $16, -8($30)                 ; 18: sw $s0,-8($fp)
[0x00400034]        0x23d7fffc  addi $23, $30, -4               ; 19: add $s7,$fp,-4
[0x00400038]        0x0c100234  jal 0x004008d0 [_getchar]       ; 20: jal _getchar
[0x0040003c]        0x00024021  addu $8, $0, $2                 ; 21: move $t0,$v0
[0x00400040]        0xaee80000  sw $8, 0($23)                   ; 22: sw $t0,0($s7)
[0x00400044]        0x001e2021  addu $4, $0, $30                ; 23: move $a0,$fp
[0x00400048]        0x0c100116  jal 0x00400458 [readlist]       ; 24: jal readlist
[0x0040004c]        0x00028021  addu $16, $0, $2                ; 25: move $s0,$v0
[0x00400050]        0x23d7fffc  addi $23, $30, -4               ; 26: add $s7,$fp,-4
[0x00400054]        0x0c100234  jal 0x004008d0 [_getchar]       ; 27: jal _getchar
[0x00400058]        0x00024021  addu $8, $0, $2                 ; 28: move $t0,$v0
[0x0040005c]        0xaee80000  sw $8, 0($23)                   ; 29: sw $t0,0($s7)
[0x00400060]        0x001e2021  addu $4, $0, $30                ; 30: move $a0,$fp
[0x00400064]        0x0c100116  jal 0x00400458 [readlist]       ; 31: jal readlist
[0x00400068]        0x00024021  addu $8, $0, $2                 ; 32: move $t0,$v0
[0x0040006c]        0x001eb821  addu $23, $0, $30               ; 33: move $s7,$fp
[0x00400070]        0x001e2021  addu $4, $0, $30                ; 34: move $a0,$fp
[0x00400074]        0x00102821  addu $5, $0, $16                ; 35: move $a1,$s0
[0x00400078]        0x00083021  addu $6, $0, $8                 ; 36: move $a2,$t0
[0x0040007c]        0x0c1000d0  jal 0x00400340 [merge]          ; 37: jal merge
[0x00400080]        0x00024021  addu $8, $0, $2                 ; 38: move $t0,$v0
[0x00400084]        0x00172021  addu $4, $0, $23                ; 39: move $a0,$s7
[0x00400088]        0x00082821  addu $5, $0, $8                 ; 40: move $a1,$t0
[0x0040008c]        0x0c100032  jal 0x004000c8 [printlist]      ; 41: jal printlist
[0x00400090]        0x8fd0fff8  lw $16, -8($30)                 ; 42: lw $s0,-8($fp)
[0x00400094]        0x8fd1fff4  lw $17, -12($30)                ; 43: lw $s1,-12($fp)
[0x00400098]        0x8fd2fff0  lw $18, -16($30)                ; 44: lw $s2,-16($fp)
[0x0040009c]        0x8fd3ffec  lw $19, -20($30)                ; 45: lw $s3,-20($fp)
[0x004000a0]        0x8fd4ffe8  lw $20, -24($30)                ; 46: lw $s4,-24($fp)
[0x004000a4]        0x8fd5ffe4  lw $21, -28($30)                ; 47: lw $s5,-28($fp)
[0x004000a8]        0x8fd6ffe0  lw $22, -32($30)                ; 48: lw $s6,-32($fp)
[0x004000ac]        0x8fd7ffdc  lw $23, -36($30)                ; 49: lw $s7,-36($fp)
[0x004000b0]        0x8fdfffd8  lw $31, -40($30)                ; 50: lw $ra,-40($fp)
[0x004000b4]        0x001ee821  addu $29, $0, $30               ; 51: move $sp,$fp
[0x004000b8]        0x8fc8ffd4  lw $8, -44($30)                 ; 52: lw $t0,-44($fp)
[0x004000bc]        0x03c8f020  add $30, $30, $8                ; 53: add $fp,$fp,$t0
[0x004000c0]        0x08100031  j 0x004000c4 [L104]             ; 54: j L104
[0x004000c4]        0x03e00008  jr $31                          ; 57: jr $ra
[0x004000c8]        0x03dd4022  sub $8, $30, $29                ; 61: sub $t0,$fp,$sp
[0x004000cc]        0x001df021  addu $30, $0, $29               ; 62: move $fp,$sp
[0x004000d0]        0x23bdffd4  addi $29, $29, -44              ; 63: sub $sp,$sp,44
[0x004000d4]        0xafc8ffd4  sw $8, -44($30)                 ; 64: sw $t0,-44($fp)
[0x004000d8]        0xafdfffd8  sw $31, -40($30)                ; 65: sw $ra,-40($fp)
[0x004000dc]        0xafd7ffdc  sw $23, -36($30)                ; 66: sw $s7,-36($fp)
[0x004000e0]        0xafd6ffe0  sw $22, -32($30)                ; 67: sw $s6,-32($fp)
[0x004000e4]        0xafd5ffe4  sw $21, -28($30)                ; 68: sw $s5,-28($fp)
[0x004000e8]        0xafd4ffe8  sw $20, -24($30)                ; 69: sw $s4,-24($fp)
[0x004000ec]        0xafd3ffec  sw $19, -20($30)                ; 70: sw $s3,-20($fp)
[0x004000f0]        0xafd2fff0  sw $18, -16($30)                ; 71: sw $s2,-16($fp)
[0x004000f4]        0xafd1fff4  sw $17, -12($30)                ; 72: sw $s1,-12($fp)
[0x004000f8]        0xafd0fff8  sw $16, -8($30)                 ; 73: sw $s0,-8($fp)
[0x004000fc]        0x0005b821  addu $23, $0, $5                ; 74: move $s7,$a1
[0x00400100]        0xafc4fffc  sw $4, -4($30)                  ; 75: sw $a0,-4($fp)
[0x00400104]        0x1017001c  beq $0, $23, 112 [L101-0x00400104]; 76: beq $s7,0,L101
[0x00400108]        0x8fc8fffc  lw $8, -4($30)                  ; 78: lw $t0,-4($fp)
[0x0040010c]        0x00082021  addu $4, $0, $8                 ; 79: move $a0,$t0
[0x00400110]        0x8ee80000  lw $8, 0($23)                   ; 80: lw $t0,0($s7)
[0x00400114]        0x00082821  addu $5, $0, $8                 ; 81: move $a1,$t0
[0x00400118]        0x0c100063  jal 0x0040018c [printint]       ; 82: jal printint
[0x0040011c]        0x3c011001  lui $1, 4097 [L94]              ; 83: la $t0,L94
[0x00400120]        0x34280000  ori $8, $1, 0 [L94]
[0x00400124]        0x00082021  addu $4, $0, $8                 ; 84: move $a0,$t0
[0x00400128]        0x0c10020f  jal 0x0040083c [_print]         ; 85: jal _print
[0x0040012c]        0x8fc8fffc  lw $8, -4($30)                  ; 86: lw $t0,-4($fp)
[0x00400130]        0x00082021  addu $4, $0, $8                 ; 87: move $a0,$t0
[0x00400134]        0x8ee80004  lw $8, 4($23)                   ; 88: lw $t0,4($s7)
[0x00400138]        0x00082821  addu $5, $0, $8                 ; 89: move $a1,$t0
[0x0040013c]        0x0c100032  jal 0x004000c8 [printlist]      ; 90: jal printlist
[0x00400140]        0x8fd0fff8  lw $16, -8($30)                 ; 92: lw $s0,-8($fp)
[0x00400144]        0x8fd1fff4  lw $17, -12($30)                ; 93: lw $s1,-12($fp)
[0x00400148]        0x8fd2fff0  lw $18, -16($30)                ; 94: lw $s2,-16($fp)
[0x0040014c]        0x8fd3ffec  lw $19, -20($30)                ; 95: lw $s3,-20($fp)
[0x00400150]        0x8fd4ffe8  lw $20, -24($30)                ; 96: lw $s4,-24($fp)
[0x00400154]        0x8fd5ffe4  lw $21, -28($30)                ; 97: lw $s5,-28($fp)
[0x00400158]        0x8fd6ffe0  lw $22, -32($30)                ; 98: lw $s6,-32($fp)
[0x0040015c]        0x8fd7ffdc  lw $23, -36($30)                ; 99: lw $s7,-36($fp)
[0x00400160]        0x8fdfffd8  lw $31, -40($30)                ; 100: lw $ra,-40($fp)
[0x00400164]        0x001ee821  addu $29, $0, $30               ; 101: move $sp,$fp
[0x00400168]        0x8fc8ffd4  lw $8, -44($30)                 ; 102: lw $t0,-44($fp)
[0x0040016c]        0x03c8f020  add $30, $30, $8                ; 103: add $fp,$fp,$t0
[0x00400170]        0x08100062  j 0x00400188 [L106]             ; 104: j L106
[0x00400174]        0x3c011001  lui $1, 4097 [L93]              ; 106: la $t0,L93
[0x00400178]        0x34280002  ori $8, $1, 2 [L93]
[0x0040017c]        0x00082021  addu $4, $0, $8                 ; 107: move $a0,$t0
[0x00400180]        0x0c10020f  jal 0x0040083c [_print]         ; 108: jal _print
[0x00400184]        0x08100050  j 0x00400140 [L103]             ; 109: j L103
[0x00400188]        0x03e00008  jr $31                          ; 112: jr $ra
[0x0040018c]        0x03dd4022  sub $8, $30, $29                ; 116: sub $t0,$fp,$sp
[0x00400190]        0x001df021  addu $30, $0, $29               ; 117: move $fp,$sp
[0x00400194]        0x23bdffd4  addi $29, $29, -44              ; 118: sub $sp,$sp,44
[0x00400198]        0xafc8ffd4  sw $8, -44($30)                 ; 119: sw $t0,-44($fp)
[0x0040019c]        0xafdfffd8  sw $31, -40($30)                ; 120: sw $ra,-40($fp)
[0x004001a0]        0xafd7ffdc  sw $23, -36($30)                ; 121: sw $s7,-36($fp)
[0x004001a4]        0xafd6ffe0  sw $22, -32($30)                ; 122: sw $s6,-32($fp)
[0x004001a8]        0xafd5ffe4  sw $21, -28($30)                ; 123: sw $s5,-28($fp)
[0x004001ac]        0xafd4ffe8  sw $20, -24($30)                ; 124: sw $s4,-24($fp)
[0x004001b0]        0xafd3ffec  sw $19, -20($30)                ; 125: sw $s3,-20($fp)
[0x004001b4]        0xafd2fff0  sw $18, -16($30)                ; 126: sw $s2,-16($fp)
[0x004001b8]        0xafd1fff4  sw $17, -12($30)                ; 127: sw $s1,-12($fp)
[0x004001bc]        0xafd0fff8  sw $16, -8($30)                 ; 128: sw $s0,-8($fp)
[0x004001c0]        0x0005b821  addu $23, $0, $5                ; 129: move $s7,$a1
[0x004001c4]        0xafc4fffc  sw $4, -4($30)                  ; 130: sw $a0,-4($fp)
[0x004001c8]        0x2ae10000  slti $1, $23, 0                 ; 131: blt $s7,0,L87
[0x004001cc]        0x14200014  bne $1, $0, 80 [L87-0x004001cc]
[0x004001d0]        0x2ae10001  slti $1, $23, 1                 ; 133: bgt $s7,0,L90
[0x004001d4]        0x1020001d  beq $1, $0, 116 [L90-0x004001d4]
[0x004001d8]        0x3c011001  lui $1, 4097 [L80]              ; 135: la $t0,L80
[0x004001dc]        0x34280004  ori $8, $1, 4 [L80]
[0x004001e0]        0x00082021  addu $4, $0, $8                 ; 136: move $a0,$t0
[0x004001e4]        0x0c10020f  jal 0x0040083c [_print]         ; 137: jal _print
[0x004001e8]        0x8fd0fff8  lw $16, -8($30)                 ; 140: lw $s0,-8($fp)
[0x004001ec]        0x8fd1fff4  lw $17, -12($30)                ; 141: lw $s1,-12($fp)
[0x004001f0]        0x8fd2fff0  lw $18, -16($30)                ; 142: lw $s2,-16($fp)
[0x004001f4]        0x8fd3ffec  lw $19, -20($30)                ; 143: lw $s3,-20($fp)
[0x004001f8]        0x8fd4ffe8  lw $20, -24($30)                ; 144: lw $s4,-24($fp)
[0x004001fc]        0x8fd5ffe4  lw $21, -28($30)                ; 145: lw $s5,-28($fp)
[0x00400200]        0x8fd6ffe0  lw $22, -32($30)                ; 146: lw $s6,-32($fp)
[0x00400204]        0x8fd7ffdc  lw $23, -36($30)                ; 147: lw $s7,-36($fp)
[0x00400208]        0x8fdfffd8  lw $31, -40($30)                ; 148: lw $ra,-40($fp)
[0x0040020c]        0x001ee821  addu $29, $0, $30               ; 149: move $sp,$fp
[0x00400210]        0x8fc8ffd4  lw $8, -44($30)                 ; 150: lw $t0,-44($fp)
[0x00400214]        0x03c8f020  add $30, $30, $8                ; 151: add $fp,$fp,$t0
[0x00400218]        0x08100096  j 0x00400258 [L108]             ; 152: j L108
[0x0040021c]        0x3c011001  lui $1, 4097 [L79]              ; 154: la $t0,L79
[0x00400220]        0x34280006  ori $8, $1, 6 [L79]
[0x00400224]        0x00082021  addu $4, $0, $8                 ; 155: move $a0,$t0
[0x00400228]        0x0c10020f  jal 0x0040083c [_print]         ; 156: jal _print
[0x0040022c]        0x001e4021  addu $8, $0, $30                ; 157: move $t0,$fp
[0x00400230]        0x34090000  ori $9, $0, 0                   ; 158: li $t1,0
[0x00400234]        0x01374822  sub $9, $9, $23                 ; 159: sub $t1,$t1,$s7
[0x00400238]        0x00082021  addu $4, $0, $8                 ; 160: move $a0,$t0
[0x0040023c]        0x00092821  addu $5, $0, $9                 ; 161: move $a1,$t1
[0x00400240]        0x0c100097  jal 0x0040025c [f]              ; 162: jal f
[0x00400244]        0x0810007a  j 0x004001e8 [L89]              ; 163: j L89
[0x00400248]        0x001e2021  addu $4, $0, $30                ; 165: move $a0,$fp
[0x0040024c]        0x00172821  addu $5, $0, $23                ; 166: move $a1,$s7
[0x00400250]        0x0c100097  jal 0x0040025c [f]              ; 167: jal f
[0x00400254]        0x0810007a  j 0x004001e8 [L92]              ; 168: j L92
[0x00400258]        0x03e00008  jr $31                          ; 171: jr $ra
[0x0040025c]        0x03dd4022  sub $8, $30, $29                ; 175: sub $t0,$fp,$sp
[0x00400260]        0x001df021  addu $30, $0, $29               ; 176: move $fp,$sp
[0x00400264]        0x23bdffd4  addi $29, $29, -44              ; 177: sub $sp,$sp,44
[0x00400268]        0xafc8ffd4  sw $8, -44($30)                 ; 178: sw $t0,-44($fp)
[0x0040026c]        0xafdfffd8  sw $31, -40($30)                ; 179: sw $ra,-40($fp)
[0x00400270]        0xafd7ffdc  sw $23, -36($30)                ; 180: sw $s7,-36($fp)
[0x00400274]        0xafd6ffe0  sw $22, -32($30)                ; 181: sw $s6,-32($fp)
[0x00400278]        0xafd5ffe4  sw $21, -28($30)                ; 182: sw $s5,-28($fp)
[0x0040027c]        0xafd4ffe8  sw $20, -24($30)                ; 183: sw $s4,-24($fp)
[0x00400280]        0xafd3ffec  sw $19, -20($30)                ; 184: sw $s3,-20($fp)
[0x00400284]        0xafd2fff0  sw $18, -16($30)                ; 185: sw $s2,-16($fp)
[0x00400288]        0xafd1fff4  sw $17, -12($30)                ; 186: sw $s1,-12($fp)
[0x0040028c]        0xafd0fff8  sw $16, -8($30)                 ; 187: sw $s0,-8($fp)
[0x00400290]        0x0005b821  addu $23, $0, $5                ; 188: move $s7,$a1
[0x00400294]        0xafc4fffc  sw $4, -4($30)                  ; 189: sw $a0,-4($fp)
[0x00400298]        0x2ae10001  slti $1, $23, 1                 ; 190: bgt $s7,0,L76
[0x0040029c]        0x1020000e  beq $1, $0, 56 [L76-0x0040029c]
[0x004002a0]        0x8fd0fff8  lw $16, -8($30)                 ; 192: lw $s0,-8($fp)
[0x004002a4]        0x8fd1fff4  lw $17, -12($30)                ; 193: lw $s1,-12($fp)
[0x004002a8]        0x8fd2fff0  lw $18, -16($30)                ; 194: lw $s2,-16($fp)
[0x004002ac]        0x8fd3ffec  lw $19, -20($30)                ; 195: lw $s3,-20($fp)
[0x004002b0]        0x8fd4ffe8  lw $20, -24($30)                ; 196: lw $s4,-24($fp)
[0x004002b4]        0x8fd5ffe4  lw $21, -28($30)                ; 197: lw $s5,-28($fp)
[0x004002b8]        0x8fd6ffe0  lw $22, -32($30)                ; 198: lw $s6,-32($fp)
[0x004002bc]        0x8fd7ffdc  lw $23, -36($30)                ; 199: lw $s7,-36($fp)
[0x004002c0]        0x8fdfffd8  lw $31, -40($30)                ; 200: lw $ra,-40($fp)
[0x004002c4]        0x001ee821  addu $29, $0, $30               ; 201: move $sp,$fp
[0x004002c8]        0x8fc8ffd4  lw $8, -44($30)                 ; 202: lw $t0,-44($fp)
[0x004002cc]        0x03c8f020  add $30, $30, $8                ; 203: add $fp,$fp,$t0
[0x004002d0]        0x081000cf  j 0x0040033c [L110]             ; 204: j L110
[0x004002d4]        0x8fc9fffc  lw $9, -4($30)                  ; 206: lw $t1,-4($fp)
[0x004002d8]        0x3401000a  ori $1, $0, 10                  ; 207: div $t0,$s7,10
[0x004002dc]        0x02e1001a  div $23, $1
[0x004002e0]        0x00004012  mflo $8
[0x004002e4]        0x00092021  addu $4, $0, $9                 ; 208: move $a0,$t1
[0x004002e8]        0x00082821  addu $5, $0, $8                 ; 209: move $a1,$t0
[0x004002ec]        0x0c100097  jal 0x0040025c [f]              ; 210: jal f
[0x004002f0]        0x00174021  addu $8, $0, $23                ; 211: move $t0,$s7
[0x004002f4]        0x3401000a  ori $1, $0, 10                  ; 212: div $t1,$s7,10
[0x004002f8]        0x02e1001a  div $23, $1
[0x004002fc]        0x00004812  mflo $9
[0x00400300]        0x3401000a  ori $1, $0, 10                  ; 213: mul $t1,$t1,10
[0x00400304]        0x71210002  mul $9, $1
[0x00400308]        0x0109b822  sub $23, $8, $9                 ; 214: sub $s7,$t0,$t1
[0x0040030c]        0x3c011001  lui $1, 4097 [L69]              ; 215: la $t0,L69
[0x00400310]        0x34280008  ori $8, $1, 8 [L69]
[0x00400314]        0x00082021  addu $4, $0, $8                 ; 216: move $a0,$t0
[0x00400318]        0x0c10022e  jal 0x004008b8 [_ord]           ; 217: jal _ord
[0x0040031c]        0x00024021  addu $8, $0, $2                 ; 218: move $t0,$v0
[0x00400320]        0x02e24020  add $8, $23, $2                 ; 219: add $t0,$s7,$v0
[0x00400324]        0x00082021  addu $4, $0, $8                 ; 220: move $a0,$t0
[0x00400328]        0x0c10023d  jal 0x004008f4 [_chr]           ; 221: jal _chr
[0x0040032c]        0x00024021  addu $8, $0, $2                 ; 222: move $t0,$v0
[0x00400330]        0x00082021  addu $4, $0, $8                 ; 223: move $a0,$t0
[0x00400334]        0x0c10020f  jal 0x0040083c [_print]         ; 224: jal _print
[0x00400338]        0x081000a8  j 0x004002a0 [L78]              ; 225: j L78
[0x0040033c]        0x03e00008  jr $31                          ; 228: jr $ra
[0x00400340]        0x03dd4022  sub $8, $30, $29                ; 232: sub $t0,$fp,$sp
[0x00400344]        0x001df021  addu $30, $0, $29               ; 233: move $fp,$sp
[0x00400348]        0x23bdffd4  addi $29, $29, -44              ; 234: sub $sp,$sp,44
[0x0040034c]        0xafc8ffd4  sw $8, -44($30)                 ; 235: sw $t0,-44($fp)
[0x00400350]        0xafdfffd8  sw $31, -40($30)                ; 236: sw $ra,-40($fp)
[0x00400354]        0xafd7ffdc  sw $23, -36($30)                ; 237: sw $s7,-36($fp)
[0x00400358]        0xafd6ffe0  sw $22, -32($30)                ; 238: sw $s6,-32($fp)
[0x0040035c]        0xafd5ffe4  sw $21, -28($30)                ; 239: sw $s5,-28($fp)
[0x00400360]        0xafd4ffe8  sw $20, -24($30)                ; 240: sw $s4,-24($fp)
[0x00400364]        0xafd3ffec  sw $19, -20($30)                ; 241: sw $s3,-20($fp)
[0x00400368]        0xafd2fff0  sw $18, -16($30)                ; 242: sw $s2,-16($fp)
[0x0040036c]        0xafd1fff4  sw $17, -12($30)                ; 243: sw $s1,-12($fp)
[0x00400370]        0xafd0fff8  sw $16, -8($30)                 ; 244: sw $s0,-8($fp)
[0x00400374]        0x0006b821  addu $23, $0, $6                ; 245: move $s7,$a2
[0x00400378]        0x00058021  addu $16, $0, $5                ; 246: move $s0,$a1
[0x0040037c]        0xafc4fffc  sw $4, -4($30)                  ; 247: sw $a0,-4($fp)
[0x00400380]        0x10100024  beq $0, $16, 144 [L60-0x00400380]; 248: beq $s0,0,L60
[0x00400384]        0x10170024  beq $0, $23, 144 [L63-0x00400384]; 250: beq $s7,0,L63
[0x00400388]        0x8e080000  lw $8, 0($16)                   ; 252: lw $t0,0($s0)
[0x0040038c]        0x8ee90000  lw $9, 0($23)                   ; 253: lw $t1,0($s7)
[0x00400390]        0x0109082a  slt $1, $8, $9                  ; 254: blt$t0,$t1,L66
[0x00400394]        0x14200021  bne $1, $0, 132 [L66-0x00400394]
[0x00400398]        0x34040002  ori $4, $0, 2                   ; 256: li $a0,2
[0x0040039c]        0x0c10027c  jal 0x004009f0 [_initArray]     ; 257: jal _initArray
[0x004003a0]        0x00029021  addu $18, $0, $2                ; 258: move $s2,$v0
[0x004003a4]        0x20530004  addi $19, $2, 4                 ; 259: add $s3,$v0,4
[0x004003a8]        0x8fc8fffc  lw $8, -4($30)                  ; 260: lw $t0,-4($fp)
[0x004003ac]        0x00082021  addu $4, $0, $8                 ; 261: move $a0,$t0
[0x004003b0]        0x00102821  addu $5, $0, $16                ; 262: move $a1,$s0
[0x004003b4]        0x8ee80004  lw $8, 4($23)                   ; 263: lw $t0,4($s7)
[0x004003b8]        0x00083021  addu $6, $0, $8                 ; 264: move $a2,$t0
[0x004003bc]        0x0c1000d0  jal 0x00400340 [merge]          ; 265: jal merge
[0x004003c0]        0x00024021  addu $8, $0, $2                 ; 266: move $t0,$v0
[0x004003c4]        0xae680000  sw $8, 0($19)                   ; 267: sw $t0,0($s3)
[0x004003c8]        0x8ee80000  lw $8, 0($23)                   ; 268: lw $t0,0($s7)
[0x004003cc]        0xae480000  sw $8, 0($18)                   ; 269: sw $t0,0($s2)
[0x004003d0]        0x00128021  addu $16, $0, $18               ; 271: move $s0,$s2
[0x004003d4]        0x0010b821  addu $23, $0, $16               ; 273: move $s7,$s0
[0x004003d8]        0x00171021  addu $2, $0, $23                ; 275: move $v0,$s7
[0x004003dc]        0x8fd0fff8  lw $16, -8($30)                 ; 276: lw $s0,-8($fp)
[0x004003e0]        0x8fd1fff4  lw $17, -12($30)                ; 277: lw $s1,-12($fp)
[0x004003e4]        0x8fd2fff0  lw $18, -16($30)                ; 278: lw $s2,-16($fp)
[0x004003e8]        0x8fd3ffec  lw $19, -20($30)                ; 279: lw $s3,-20($fp)
[0x004003ec]        0x8fd4ffe8  lw $20, -24($30)                ; 280: lw $s4,-24($fp)
[0x004003f0]        0x8fd5ffe4  lw $21, -28($30)                ; 281: lw $s5,-28($fp)
[0x004003f4]        0x8fd6ffe0  lw $22, -32($30)                ; 282: lw $s6,-32($fp)
[0x004003f8]        0x8fd7ffdc  lw $23, -36($30)                ; 283: lw $s7,-36($fp)
[0x004003fc]        0x8fdfffd8  lw $31, -40($30)                ; 284: lw $ra,-40($fp)
[0x00400400]        0x001ee821  addu $29, $0, $30               ; 285: move $sp,$fp
[0x00400404]        0x8fc8ffd4  lw $8, -44($30)                 ; 286: lw $t0,-44($fp)
[0x00400408]        0x03c8f020  add $30, $30, $8                ; 287: add $fp,$fp,$t0
[0x0040040c]        0x08100115  j 0x00400454 [L112]             ; 288: j L112
[0x00400410]        0x081000f6  j 0x004003d8 [L62]              ; 290: j L62
[0x00400414]        0x081000f5  j 0x004003d4 [L65]              ; 292: j L65
[0x00400418]        0x34040002  ori $4, $0, 2                   ; 294: li $a0,2
[0x0040041c]        0x0c10027c  jal 0x004009f0 [_initArray]     ; 295: jal _initArray
[0x00400420]        0x00029021  addu $18, $0, $2                ; 296: move $s2,$v0
[0x00400424]        0x20530004  addi $19, $2, 4                 ; 297: add $s3,$v0,4
[0x00400428]        0x8fc8fffc  lw $8, -4($30)                  ; 298: lw $t0,-4($fp)
[0x0040042c]        0x00082021  addu $4, $0, $8                 ; 299: move $a0,$t0
[0x00400430]        0x8e080004  lw $8, 4($16)                   ; 300: lw $t0,4($s0)
[0x00400434]        0x00082821  addu $5, $0, $8                 ; 301: move $a1,$t0
[0x00400438]        0x00173021  addu $6, $0, $23                ; 302: move $a2,$s7
[0x0040043c]        0x0c1000d0  jal 0x00400340 [merge]          ; 303: jal merge
[0x00400440]        0x00024021  addu $8, $0, $2                 ; 304: move $t0,$v0
[0x00400444]        0xae680000  sw $8, 0($19)                   ; 305: sw $t0,0($s3)
[0x00400448]        0x8e080000  lw $8, 0($16)                   ; 306: lw $t0,0($s0)
[0x0040044c]        0xae480000  sw $8, 0($18)                   ; 307: sw $t0,0($s2)
[0x00400450]        0x081000f4  j 0x004003d0 [L68]              ; 308: j L68
[0x00400454]        0x03e00008  jr $31                          ; 311: jr $ra
[0x00400458]        0x03dd4022  sub $8, $30, $29                ; 315: sub $t0,$fp,$sp
[0x0040045c]        0x001df021  addu $30, $0, $29               ; 316: move $fp,$sp
[0x00400460]        0x23bdffd4  addi $29, $29, -44              ; 317: sub $sp,$sp,44
[0x00400464]        0xafc8ffd4  sw $8, -44($30)                 ; 318: sw $t0,-44($fp)
[0x00400468]        0xafdfffd8  sw $31, -40($30)                ; 319: sw $ra,-40($fp)
[0x0040046c]        0xafd7ffdc  sw $23, -36($30)                ; 320: sw $s7,-36($fp)
[0x00400470]        0xafd6ffe0  sw $22, -32($30)                ; 321: sw $s6,-32($fp)
[0x00400474]        0xafd5ffe4  sw $21, -28($30)                ; 322: sw $s5,-28($fp)
[0x00400478]        0xafd4ffe8  sw $20, -24($30)                ; 323: sw $s4,-24($fp)
[0x0040047c]        0xafd3ffec  sw $19, -20($30)                ; 324: sw $s3,-20($fp)
[0x00400480]        0xafd2fff0  sw $18, -16($30)                ; 325: sw $s2,-16($fp)
[0x00400484]        0xafd1fff4  sw $17, -12($30)                ; 326: sw $s1,-12($fp)
[0x00400488]        0xafd0fff8  sw $16, -8($30)                 ; 327: sw $s0,-8($fp)
[0x0040048c]        0xafc4fffc  sw $4, -4($30)                  ; 328: sw $a0,-4($fp)
[0x00400490]        0x34040001  ori $4, $0, 1                   ; 329: li $a0,1
[0x00400494]        0x0c10027c  jal 0x004009f0 [_initArray]     ; 330: jal _initArray
[0x00400498]        0x00028021  addu $16, $0, $2                ; 331: move $s0,$v0
[0x0040049c]        0x34080000  ori $8, $0, 0                   ; 332: li $t0,0
[0x004004a0]        0xae080000  sw $8, 0($16)                   ; 333: sw $t0,0($s0)
[0x004004a4]        0x8fc8fffc  lw $8, -4($30)                  ; 334: lw $t0,-4($fp)
[0x004004a8]        0x00082021  addu $4, $0, $8                 ; 335: move $a0,$t0
[0x004004ac]        0x00102821  addu $5, $0, $16                ; 336: move $a1,$s0
[0x004004b0]        0x0c10014b  jal 0x0040052c [readint]        ; 337: jal readint
[0x004004b4]        0x0002b821  addu $23, $0, $2                ; 338: move $s7,$v0
[0x004004b8]        0x8e080000  lw $8, 0($16)                   ; 339: lw $t0,0($s0)
[0x004004bc]        0x14080010  bne $0, $8, 64 [L39-0x004004bc] ; 340: bne $t0,0,L39
[0x004004c0]        0x34120000  ori $18, $0, 0                  ; 342: li $s2,0
[0x004004c4]        0x00121021  addu $2, $0, $18                ; 344: move $v0,$s2
[0x004004c8]        0x8fd0fff8  lw $16, -8($30)                 ; 345: lw $s0,-8($fp)
[0x004004cc]        0x8fd1fff4  lw $17, -12($30)                ; 346: lw $s1,-12($fp)
[0x004004d0]        0x8fd2fff0  lw $18, -16($30)                ; 347: lw $s2,-16($fp)
[0x004004d4]        0x8fd3ffec  lw $19, -20($30)                ; 348: lw $s3,-20($fp)
[0x004004d8]        0x8fd4ffe8  lw $20, -24($30)                ; 349: lw $s4,-24($fp)
[0x004004dc]        0x8fd5ffe4  lw $21, -28($30)                ; 350: lw $s5,-28($fp)
[0x004004e0]        0x8fd6ffe0  lw $22, -32($30)                ; 351: lw $s6,-32($fp)
[0x004004e4]        0x8fd7ffdc  lw $23, -36($30)                ; 352: lw $s7,-36($fp)
[0x004004e8]        0x8fdfffd8  lw $31, -40($30)                ; 353: lw $ra,-40($fp)
[0x004004ec]        0x001ee821  addu $29, $0, $30               ; 354: move $sp,$fp
[0x004004f0]        0x8fc8ffd4  lw $8, -44($30)                 ; 355: lw $t0,-44($fp)
[0x004004f4]        0x03c8f020  add $30, $30, $8                ; 356: add $fp,$fp,$t0
[0x004004f8]        0x0810014a  j 0x00400528 [L114]             ; 357: j L114
[0x004004fc]        0x34040002  ori $4, $0, 2                   ; 359: li $a0,2
[0x00400500]        0x0c10027c  jal 0x004009f0 [_initArray]     ; 360: jal _initArray
[0x00400504]        0x00029021  addu $18, $0, $2                ; 361: move $s2,$v0
[0x00400508]        0x20500004  addi $16, $2, 4                 ; 362: add $s0,$v0,4
[0x0040050c]        0x8fc8fffc  lw $8, -4($30)                  ; 363: lw $t0,-4($fp)
[0x00400510]        0x00082021  addu $4, $0, $8                 ; 364: move $a0,$t0
[0x00400514]        0x0c100116  jal 0x00400458 [readlist]       ; 365: jal readlist
[0x00400518]        0x00024021  addu $8, $0, $2                 ; 366: move $t0,$v0
[0x0040051c]        0xae080000  sw $8, 0($16)                   ; 367: sw $t0,0($s0)
[0x00400520]        0xae570000  sw $23, 0($18)                  ; 368: sw $s7,0($s2)
[0x00400524]        0x08100131  j 0x004004c4 [L41]              ; 369: j L41
[0x00400528]        0x03e00008  jr $31                          ; 372: jr $ra
[0x0040052c]        0x03dd4022  sub $8, $30, $29                ; 376: sub $t0,$fp,$sp
[0x00400530]        0x001df021  addu $30, $0, $29               ; 377: move $fp,$sp
[0x00400534]        0x23bdffd4  addi $29, $29, -44              ; 378: sub $sp,$sp,44
[0x00400538]        0xafc8ffd4  sw $8, -44($30)                 ; 379: sw $t0,-44($fp)
[0x0040053c]        0xafdfffd8  sw $31, -40($30)                ; 380: sw $ra,-40($fp)
[0x00400540]        0xafd7ffdc  sw $23, -36($30)                ; 381: sw $s7,-36($fp)
[0x00400544]        0xafd6ffe0  sw $22, -32($30)                ; 382: sw $s6,-32($fp)
[0x00400548]        0xafd5ffe4  sw $21, -28($30)                ; 383: sw $s5,-28($fp)
[0x0040054c]        0xafd4ffe8  sw $20, -24($30)                ; 384: sw $s4,-24($fp)
[0x00400550]        0xafd3ffec  sw $19, -20($30)                ; 385: sw $s3,-20($fp)
[0x00400554]        0xafd2fff0  sw $18, -16($30)                ; 386: sw $s2,-16($fp)
[0x00400558]        0xafd1fff4  sw $17, -12($30)                ; 387: sw $s1,-12($fp)
[0x0040055c]        0xafd0fff8  sw $16, -8($30)                 ; 388: sw $s0,-8($fp)
[0x00400560]        0x00058021  addu $16, $0, $5                ; 389: move $s0,$a1
[0x00400564]        0xafc4fffc  sw $4, -4($30)                  ; 390: sw $a0,-4($fp)
[0x00400568]        0x34170000  ori $23, $0, 0                  ; 391: li $s7,0
[0x0040056c]        0x001e2021  addu $4, $0, $30                ; 392: move $a0,$fp
[0x00400570]        0x0c10018f  jal 0x0040063c [skipto]         ; 393: jal skipto
[0x00400574]        0x20b00000  addi $16, $5, 0                 ; 394: add $s0,$a1,0
[0x00400578]        0x001e2021  addu $4, $0, $30                ; 395: move $a0,$fp
[0x0040057c]        0x8fc8fffc  lw $8, -4($30)                  ; 396: lw $t0,-4($fp)
[0x00400580]        0x8d08fffc  lw $8, -4($8)                   ; 397: lw $t0,-4($t0)
[0x00400584]        0x00082821  addu $5, $0, $8                 ; 398: move $a1,$t0
[0x00400588]        0x0c1001cc  jal 0x00400730 [isdigit]        ; 399: jal isdigit
[0x0040058c]        0x00024021  addu $8, $0, $2                 ; 400: move $t0,$v0
[0x00400590]        0xae080000  sw $8, 0($16)                   ; 401: sw $t0,0($s0)
[0x00400594]        0x001e2021  addu $4, $0, $30                ; 403: move $a0,$fp
[0x00400598]        0x8fc8fffc  lw $8, -4($30)                  ; 404: lw $t0,-4($fp)
[0x0040059c]        0x8d08fffc  lw $8, -4($8)                   ; 405: lw $t0,-4($t0)
[0x004005a0]        0x00082821  addu $5, $0, $8                 ; 406: move $a1,$t0
[0x004005a4]        0x0c1001cc  jal 0x00400730 [isdigit]        ; 407: jal isdigit
[0x004005a8]        0x00024021  addu $8, $0, $2                 ; 408: move $t0,$v0
[0x004005ac]        0x1408000f  bne $0, $8, 60 [L32-0x004005ac] ; 409: bne $t0,0,L32
[0x004005b0]        0x00171021  addu $2, $0, $23                ; 411: move $v0,$s7
[0x004005b4]        0x8fd0fff8  lw $16, -8($30)                 ; 412: lw $s0,-8($fp)
[0x004005b8]        0x8fd1fff4  lw $17, -12($30)                ; 413: lw $s1,-12($fp)
[0x004005bc]        0x8fd2fff0  lw $18, -16($30)                ; 414: lw $s2,-16($fp)
[0x004005c0]        0x8fd3ffec  lw $19, -20($30)                ; 415: lw $s3,-20($fp)
[0x004005c4]        0x8fd4ffe8  lw $20, -24($30)                ; 416: lw $s4,-24($fp)
[0x004005c8]        0x8fd5ffe4  lw $21, -28($30)                ; 417: lw $s5,-28($fp)
[0x004005cc]        0x8fd6ffe0  lw $22, -32($30)                ; 418: lw $s6,-32($fp)
[0x004005d0]        0x8fd7ffdc  lw $23, -36($30)                ; 419: lw $s7,-36($fp)
[0x004005d4]        0x8fdfffd8  lw $31, -40($30)                ; 420: lw $ra,-40($fp)
[0x004005d8]        0x001ee821  addu $29, $0, $30               ; 421: move $sp,$fp
[0x004005dc]        0x8fc8ffd4  lw $8, -44($30)                 ; 422: lw $t0,-44($fp)
[0x004005e0]        0x03c8f020  add $30, $30, $8                ; 423: add $fp,$fp,$t0
[0x004005e4]        0x0810018e  j 0x00400638 [L116]             ; 424: j L116
[0x004005e8]        0x3401000a  ori $1, $0, 10                  ; 426: mul $s7,$s7,10
[0x004005ec]        0x72e10002  mul $23, $1
[0x004005f0]        0x8fc8fffc  lw $8, -4($30)                  ; 427: lw $t0,-4($fp)
[0x004005f4]        0x8d08fffc  lw $8, -4($8)                   ; 428: lw $t0,-4($t0)
[0x004005f8]        0x00082021  addu $4, $0, $8                 ; 429: move $a0,$t0
[0x004005fc]        0x0c10022e  jal 0x004008b8 [_ord]           ; 430: jal _ord
[0x00400600]        0x00024021  addu $8, $0, $2                 ; 431: move $t0,$v0
[0x00400604]        0x02e2b820  add $23, $23, $2                ; 432: add $s7,$s7,$v0
[0x00400608]        0x3c011001  lui $1, 4097 [L29]              ; 433: la $t0,L29
[0x0040060c]        0x3428000a  ori $8, $1, 10 [L29]
[0x00400610]        0x00082021  addu $4, $0, $8                 ; 434: move $a0,$t0
[0x00400614]        0x0c10022e  jal 0x004008b8 [_ord]           ; 435: jal _ord
[0x00400618]        0x00024021  addu $8, $0, $2                 ; 436: move $t0,$v0
[0x0040061c]        0x02e8b822  sub $23, $23, $8                ; 437: sub $s7,$s7,$t0
[0x00400620]        0x8fc8fffc  lw $8, -4($30)                  ; 438: lw $t0,-4($fp)
[0x00400624]        0x2110fffc  addi $16, $8, -4                ; 439: add $s0,$t0,-4
[0x00400628]        0x0c100234  jal 0x004008d0 [_getchar]       ; 440: jal _getchar
[0x0040062c]        0x00024021  addu $8, $0, $2                 ; 441: move $t0,$v0
[0x00400630]        0xae080000  sw $8, 0($16)                   ; 442: sw $t0,0($s0)
[0x00400634]        0x08100165  j 0x00400594 [L30]              ; 443: j L30
[0x00400638]        0x03e00008  jr $31                          ; 446: jr $ra
[0x0040063c]        0x03dd4022  sub $8, $30, $29                ; 450: sub $t0,$fp,$sp
[0x00400640]        0x001df021  addu $30, $0, $29               ; 451: move $fp,$sp
[0x00400644]        0x23bdffd4  addi $29, $29, -44              ; 452: sub $sp,$sp,44
[0x00400648]        0xafc8ffd4  sw $8, -44($30)                 ; 453: sw $t0,-44($fp)
[0x0040064c]        0xafdfffd8  sw $31, -40($30)                ; 454: sw $ra,-40($fp)
[0x00400650]        0xafd7ffdc  sw $23, -36($30)                ; 455: sw $s7,-36($fp)
[0x00400654]        0xafd6ffe0  sw $22, -32($30)                ; 456: sw $s6,-32($fp)
[0x00400658]        0xafd5ffe4  sw $21, -28($30)                ; 457: sw $s5,-28($fp)
[0x0040065c]        0xafd4ffe8  sw $20, -24($30)                ; 458: sw $s4,-24($fp)
[0x00400660]        0xafd3ffec  sw $19, -20($30)                ; 459: sw $s3,-20($fp)
[0x00400664]        0xafd2fff0  sw $18, -16($30)                ; 460: sw $s2,-16($fp)
[0x00400668]        0xafd1fff4  sw $17, -12($30)                ; 461: sw $s1,-12($fp)
[0x0040066c]        0xafd0fff8  sw $16, -8($30)                 ; 462: sw $s0,-8($fp)
[0x00400670]        0xafc4fffc  sw $4, -4($30)                  ; 463: sw $a0,-4($fp)
[0x00400674]        0x8fc8fffc  lw $8, -4($30)                  ; 465: lw $t0,-4($fp)
[0x00400678]        0x8d08fffc  lw $8, -4($8)                   ; 466: lw $t0,-4($t0)
[0x0040067c]        0x8d08fffc  lw $8, -4($8)                   ; 467: lw $t0,-4($t0)
[0x00400680]        0x00082021  addu $4, $0, $8                 ; 468: move $a0,$t0
[0x00400684]        0x3c011001  lui $1, 4097 [L16]              ; 469: la $t0,L16
[0x00400688]        0x3428000e  ori $8, $1, 14 [L16]
[0x0040068c]        0x00082821  addu $5, $0, $8                 ; 470: move $a1,$t0
[0x00400690]        0x0c100213  jal 0x0040084c [_strcmp]        ; 471: jal _strcmp
[0x00400694]        0x00024021  addu $8, $0, $2                 ; 472: move $t0,$v0
[0x00400698]        0x1008001c  beq $0, $8, 112 [L23-0x00400698]; 473: beq $t0,0,L23
[0x0040069c]        0x34170001  ori $23, $0, 1                  ; 475: li $s7,1
[0x004006a0]        0x8fc8fffc  lw $8, -4($30)                  ; 476: lw $t0,-4($fp)
[0x004006a4]        0x8d08fffc  lw $8, -4($8)                   ; 477: lw $t0,-4($t0)
[0x004006a8]        0x8d08fffc  lw $8, -4($8)                   ; 478: lw $t0,-4($t0)
[0x004006ac]        0x00082021  addu $4, $0, $8                 ; 479: move $a0,$t0
[0x004006b0]        0x3c011001  lui $1, 4097 [L17]              ; 480: la $t0,L17
[0x004006b4]        0x3428000c  ori $8, $1, 12 [L17]
[0x004006b8]        0x00082821  addu $5, $0, $8                 ; 481: move $a1,$t0
[0x004006bc]        0x0c100213  jal 0x0040084c [_strcmp]        ; 482: jal _strcmp
[0x004006c0]        0x00024021  addu $8, $0, $2                 ; 483: move $t0,$v0
[0x004006c4]        0x21080000  addi $8, $8, 0                  ; 484: sub $t0,$t0,0
[0x004006c8]        0x10080002  beq $0, $8, 8 [L27-0x004006c8]  ; 485: beq $t0,0,L27
[0x004006cc]        0x34170000  ori $23, $0, 0                  ; 487: li $s7,0
[0x004006d0]        0x14170010  bne $0, $23, 64 [L22-0x004006d0]; 490: bne $s7,0,L22
[0x004006d4]        0x8fd0fff8  lw $16, -8($30)                 ; 492: lw $s0,-8($fp)
[0x004006d8]        0x8fd1fff4  lw $17, -12($30)                ; 493: lw $s1,-12($fp)
[0x004006dc]        0x8fd2fff0  lw $18, -16($30)                ; 494: lw $s2,-16($fp)
[0x004006e0]        0x8fd3ffec  lw $19, -20($30)                ; 495: lw $s3,-20($fp)
[0x004006e4]        0x8fd4ffe8  lw $20, -24($30)                ; 496: lw $s4,-24($fp)
[0x004006e8]        0x8fd5ffe4  lw $21, -28($30)                ; 497: lw $s5,-28($fp)
[0x004006ec]        0x8fd6ffe0  lw $22, -32($30)                ; 498: lw $s6,-32($fp)
[0x004006f0]        0x8fd7ffdc  lw $23, -36($30)                ; 499: lw $s7,-36($fp)
[0x004006f4]        0x8fdfffd8  lw $31, -40($30)                ; 500: lw $ra,-40($fp)
[0x004006f8]        0x001ee821  addu $29, $0, $30               ; 501: move $sp,$fp
[0x004006fc]        0x8fc8ffd4  lw $8, -44($30)                 ; 502: lw $t0,-44($fp)
[0x00400700]        0x03c8f020  add $30, $30, $8                ; 503: add $fp,$fp,$t0
[0x00400704]        0x081001cb  j 0x0040072c [L118]             ; 504: j L118
[0x00400708]        0x34170001  ori $23, $0, 1                  ; 506: li $s7,1
[0x0040070c]        0x081001b4  j 0x004006d0 [L25]              ; 507: j L25
[0x00400710]        0x8fc8fffc  lw $8, -4($30)                  ; 509: lw $t0,-4($fp)
[0x00400714]        0x8d08fffc  lw $8, -4($8)                   ; 510: lw $t0,-4($t0)
[0x00400718]        0x2117fffc  addi $23, $8, -4                ; 511: add $s7,$t0,-4
[0x0040071c]        0x0c100234  jal 0x004008d0 [_getchar]       ; 512: jal _getchar
[0x00400720]        0x00024021  addu $8, $0, $2                 ; 513: move $t0,$v0
[0x00400724]        0xaee80000  sw $8, 0($23)                   ; 514: sw $t0,0($s7)
[0x00400728]        0x0810019d  j 0x00400674 [L21]              ; 515: j L21
[0x0040072c]        0x03e00008  jr $31                          ; 518: jr $ra
[0x00400730]        0x03dd4022  sub $8, $30, $29                ; 522: sub $t0,$fp,$sp
[0x00400734]        0x001df021  addu $30, $0, $29               ; 523: move $fp,$sp
[0x00400738]        0x23bdffd4  addi $29, $29, -44              ; 524: sub $sp,$sp,44
[0x0040073c]        0xafc8ffd4  sw $8, -44($30)                 ; 525: sw $t0,-44($fp)
[0x00400740]        0xafdfffd8  sw $31, -40($30)                ; 526: sw $ra,-40($fp)
[0x00400744]        0xafd7ffdc  sw $23, -36($30)                ; 527: sw $s7,-36($fp)
[0x00400748]        0xafd6ffe0  sw $22, -32($30)                ; 528: sw $s6,-32($fp)
[0x0040074c]        0xafd5ffe4  sw $21, -28($30)                ; 529: sw $s5,-28($fp)
[0x00400750]        0xafd4ffe8  sw $20, -24($30)                ; 530: sw $s4,-24($fp)
[0x00400754]        0xafd3ffec  sw $19, -20($30)                ; 531: sw $s3,-20($fp)
[0x00400758]        0xafd2fff0  sw $18, -16($30)                ; 532: sw $s2,-16($fp)
[0x0040075c]        0xafd1fff4  sw $17, -12($30)                ; 533: sw $s1,-12($fp)
[0x00400760]        0xafd0fff8  sw $16, -8($30)                 ; 534: sw $s0,-8($fp)
[0x00400764]        0x00054021  addu $8, $0, $5                 ; 535: move $t0,$a1
[0x00400768]        0xafc4fffc  sw $4, -4($30)                  ; 536: sw $a0,-4($fp)
[0x0040076c]        0x8fc8fffc  lw $8, -4($30)                  ; 537: lw $t0,-4($fp)
[0x00400770]        0x8d08fffc  lw $8, -4($8)                   ; 538: lw $t0,-4($t0)
[0x00400774]        0x8d08fffc  lw $8, -4($8)                   ; 539: lw $t0,-4($t0)
[0x00400778]        0x00082021  addu $4, $0, $8                 ; 540: move $a0,$t0
[0x0040077c]        0x0c10022e  jal 0x004008b8 [_ord]           ; 541: jal _ord
[0x00400780]        0x0002b821  addu $23, $0, $2                ; 542: move $s7,$v0
[0x00400784]        0x3c011001  lui $1, 4097 [L0]               ; 543: la $t0,L0
[0x00400788]        0x34280012  ori $8, $1, 18 [L0]
[0x0040078c]        0x00082021  addu $4, $0, $8                 ; 544: move $a0,$t0
[0x00400790]        0x0c10022e  jal 0x004008b8 [_ord]           ; 545: jal _ord
[0x00400794]        0x00024021  addu $8, $0, $2                 ; 546: move $t0,$v0
[0x00400798]        0x02e8082a  slt $1, $23, $8                 ; 547: bge$s7,$t0,L10
[0x0040079c]        0x10200010  beq $1, $0, 64 [L10-0x0040079c]
[0x004007a0]        0x34170000  ori $23, $0, 0                  ; 549: li $s7,0
[0x004007a4]        0x00171021  addu $2, $0, $23                ; 551: move $v0,$s7
[0x004007a8]        0x8fd0fff8  lw $16, -8($30)                 ; 552: lw $s0,-8($fp)
[0x004007ac]        0x8fd1fff4  lw $17, -12($30)                ; 553: lw $s1,-12($fp)
[0x004007b0]        0x8fd2fff0  lw $18, -16($30)                ; 554: lw $s2,-16($fp)
[0x004007b4]        0x8fd3ffec  lw $19, -20($30)                ; 555: lw $s3,-20($fp)
[0x004007b8]        0x8fd4ffe8  lw $20, -24($30)                ; 556: lw $s4,-24($fp)
[0x004007bc]        0x8fd5ffe4  lw $21, -28($30)                ; 557: lw $s5,-28($fp)
[0x004007c0]        0x8fd6ffe0  lw $22, -32($30)                ; 558: lw $s6,-32($fp)
[0x004007c4]        0x8fd7ffdc  lw $23, -36($30)                ; 559: lw $s7,-36($fp)
[0x004007c8]        0x8fdfffd8  lw $31, -40($30)                ; 560: lw $ra,-40($fp)
[0x004007cc]        0x001ee821  addu $29, $0, $30               ; 561: move $sp,$fp
[0x004007d0]        0x8fc8ffd4  lw $8, -44($30)                 ; 562: lw $t0,-44($fp)
[0x004007d4]        0x03c8f020  add $30, $30, $8                ; 563: add $fp,$fp,$t0
[0x004007d8]        0x08100208  j 0x00400820 [L120]             ; 564: j L120
[0x004007dc]        0x34170001  ori $23, $0, 1                  ; 566: li $s7,1
[0x004007e0]        0x8fc8fffc  lw $8, -4($30)                  ; 567: lw $t0,-4($fp)
[0x004007e4]        0x8d08fffc  lw $8, -4($8)                   ; 568: lw $t0,-4($t0)
[0x004007e8]        0x8d08fffc  lw $8, -4($8)                   ; 569: lw $t0,-4($t0)
[0x004007ec]        0x00082021  addu $4, $0, $8                 ; 570: move $a0,$t0
[0x004007f0]        0x0c10022e  jal 0x004008b8 [_ord]           ; 571: jal _ord
[0x004007f4]        0x00028021  addu $16, $0, $2                ; 572: move $s0,$v0
[0x004007f8]        0x3c011001  lui $1, 4097 [L1]               ; 573: la $t0,L1
[0x004007fc]        0x34280010  ori $8, $1, 16 [L1]
[0x00400800]        0x00082021  addu $4, $0, $8                 ; 574: move $a0,$t0
[0x00400804]        0x0c10022e  jal 0x004008b8 [_ord]           ; 575: jal _ord
[0x00400808]        0x00024021  addu $8, $0, $2                 ; 576: move $t0,$v0
[0x0040080c]        0x02084022  sub $8, $16, $8                 ; 577: sub $t0,$s0,$t0
[0x00400810]        0x29010001  slti $1, $8, 1                  ; 578: ble $t0,0,L14
[0x00400814]        0x14200002  bne $1, $0, 8 [L14-0x00400814]
[0x00400818]        0x34170000  ori $23, $0, 0                  ; 580: li $s7,0
[0x0040081c]        0x081001e9  j 0x004007a4 [L12]              ; 582: j L12
[0x00400820]        0x03e00008  jr $31                          ; 585: jr $ra
[0x00400824]        0x34020009  ori $2, $0, 9                   ; 620: li $v0,9
[0x00400828]        0x0000000c  syscall                         ; 621: syscall
[0x0040082c]        0x03e00008  jr $31                          ; 622: j $ra
[0x00400830]        0x34020001  ori $2, $0, 1                   ; 625: li $v0, 1
[0x00400834]        0x0000000c  syscall                         ; 626: syscall
[0x00400838]        0x03e00008  jr $31                          ; 627: j $ra
[0x0040083c]        0x34020004  ori $2, $0, 4                   ; 630: li $v0, 4
[0x00400840]        0x0000000c  syscall                         ; 631: syscall
[0x00400844]        0x03e00008  jr $31                          ; 632: j $ra
[0x00400848]        0x03e00008  jr $31                          ; 635: j $ra
[0x0040084c]        0x80860000  lb $6, 0($4)                    ; 639: lb $a2 ($a0)
[0x00400850]        0x80a70000  lb $7, 0($5)                    ; 640: lb $a3 ($a1)
[0x00400854]        0x10c0000e  beq $6, $0, 56 [strcmp_end-0x00400854]; 641: beq $a2, $zero, strcmp_end
[0x00400858]        0x10e0000d  beq $7, $0, 52 [strcmp_end-0x00400858]; 642: beq $a3, $zero, strcmp_end
[0x0040085c]        0x00e6082a  slt $1, $7, $6                  ; 643: bgt $a2, $a3  strcmp_great
[0x00400860]        0x14200006  bne $1, $0, 24 [strcmp_great-0x00400860]
[0x00400864]        0x00c7082a  slt $1, $6, $7                  ; 644: blt $a2, $a3  strcmp_less
[0x00400868]        0x14200006  bne $1, $0, 24 [strcmp_less-0x00400868]
[0x0040086c]        0x20840001  addi $4, $4, 1                  ; 645: add $a0, $a0, 1
[0x00400870]        0x20a50001  addi $5, $5, 1                  ; 646: add $a1, $a1, 1
[0x00400874]        0x08100213  j 0x0040084c [strcmp_test]      ; 647: j strcmp_test
[0x00400878]        0x34020001  ori $2, $0, 1                   ; 649: li $v0, 1
[0x0040087c]        0x03e00008  jr $31                          ; 650: j $ra
[0x00400880]        0x3c01ffff  lui $1, -1                      ; 652: li $v0, -1
[0x00400884]        0x3422ffff  ori $2, $1, -1
[0x00400888]        0x03e00008  jr $31                          ; 653: j $ra
[0x0040088c]        0x14c0fffb  bne $6, $0, -20 [strcmp_great-0x0040088c]; 655: bne $a2 $zero strcmp_great
[0x00400890]        0x14e0fffc  bne $7, $0, -16 [strcmp_less-0x00400890]; 656: bne $a3 $zero strcmp_less
[0x00400894]        0x34020000  ori $2, $0, 0                   ; 657: li $v0, 0
[0x00400898]        0x03e00008  jr $31                          ; 658: j $ra
[0x0040089c]        0x00001021  addu $2, $0, $0                 ; 661: move $v0, $zero
[0x004008a0]        0x80850000  lb $5, 0($4)                    ; 663: lb $a1 ($a0)
[0x004008a4]        0x10a00004  beq $5, $0, 16 [size_exit-0x004008a4]; 664: beq $a1, $zero size_exit
[0x004008a8]        0x20420001  addi $2, $2, 1                  ; 665: add $v0, $v0, 1
[0x004008ac]        0x20840001  addi $4, $4, 1                  ; 666: add $a0, $a0, 1
[0x004008b0]        0x08100228  j 0x004008a0 [size_loop]        ; 667: j size_loop
[0x004008b4]        0x03e00008  jr $31                          ; 669: j $ra
[0x004008b8]        0x80850000  lb $5, 0($4)                    ; 672: lb $a1,($a0)
[0x004008bc]        0x3c01ffff  lui $1, -1                      ; 673: li $v0,-1
[0x004008c0]        0x3422ffff  ori $2, $1, -1
[0x004008c4]        0x10a00002  beq $5, $0, 8 [Lrunt5-0x004008c4]; 674: beqz $a1,Lrunt5
[0x004008c8]        0x80820000  lb $2, 0($4)                    ; 675: lb $v0,($a0)
[0x004008cc]        0x03e00008  jr $31                          ; 677: j $ra
[0x004008d0]        0x34020009  ori $2, $0, 9                   ; 680: li $v0, 9 
[0x004008d4]        0x34040002  ori $4, $0, 2                   ; 681: li $a0, 2
[0x004008d8]        0x0000000c  syscall                         ; 682: syscall
[0x004008dc]        0x00022021  addu $4, $0, $2                 ; 683: move $a0, $v0
[0x004008e0]        0x34050002  ori $5, $0, 2                   ; 684: li $a1, 2
[0x004008e4]        0x34020008  ori $2, $0, 8                   ; 685: li $v0, 8
[0x004008e8]        0x0000000c  syscall                         ; 686: syscall
[0x004008ec]        0x00041021  addu $2, $0, $4                 ; 687: move $v0, $a0
[0x004008f0]        0x03e00008  jr $31                          ; 688: j $ra
[0x004008f4]        0x00042821  addu $5, $0, $4                 ; 691: move $a1, $a0
[0x004008f8]        0x34020009  ori $2, $0, 9                   ; 692: li $v0, 9
[0x004008fc]        0x34040002  ori $4, $0, 2                   ; 693: li $a0, 2
[0x00400900]        0x0000000c  syscall                         ; 694: syscall
[0x00400904]        0xa0450000  sb $5, 0($2)                    ; 695: sb $a1 ($v0)
[0x00400908]        0xa0400001  sb $0, 1($2)                    ; 696: sb $zero 1($v0)
[0x0040090c]        0x03e00008  jr $31                          ; 697: j $ra
[0x00400910]        0x3402000a  ori $2, $0, 10                  ; 700: li $v0, 10
[0x00400914]        0x0000000c  syscall                         ; 701: syscall
[0x00400918]        0x00852820  add $5, $4, $5                  ; 704: add $a1, $a0, $a1
[0x0040091c]        0x00053821  addu $7, $0, $5                 ; 705: move $a3, $a1
[0x00400920]        0x34020009  ori $2, $0, 9                   ; 706: li $v0, 9
[0x00400924]        0x20c60001  addi $6, $6, 1                  ; 707: add $a2, $a2, 1
[0x00400928]        0x00062021  addu $4, $0, $6                 ; 708: move $a0, $a2
[0x0040092c]        0x20840001  addi $4, $4, 1                  ; 709: add $a0, $a0, 1 
[0x00400930]        0x0000000c  syscall                         ; 710: syscall
[0x00400934]        0x00c73020  add $6, $6, $7                  ; 712: add $a2,$a2,$a3
[0x00400938]        0x20c6ffff  addi $6, $6, -1                 ; 713: add $a2,$a2,-1
[0x0040093c]        0x00022021  addu $4, $0, $2                 ; 714: move $a0, $v0
[0x00400940]        0x10a60006  beq $5, $6, 24 [substring_exit-0x00400940]; 716: beq $a1 $a2 substring_exit
[0x00400944]        0x80a70000  lb $7, 0($5)                    ; 717: lb $a3 ($a1)
[0x00400948]        0xa0870000  sb $7, 0($4)                    ; 718: sb $a3 ($a0)
[0x0040094c]        0x20a50001  addi $5, $5, 1                  ; 719: add $a1, $a1, 1
[0x00400950]        0x20840001  addi $4, $4, 1                  ; 720: add $a0, $a0, 1 
[0x00400954]        0x08100250  j 0x00400940 [substring_copy]   ; 721: j substring_copy
[0x00400958]        0xa0800000  sb $0, 0($4)                    ; 723: sb $zero, ($a0)
[0x0040095c]        0x03e00008  jr $31                          ; 724: j $ra
[0x00400960]        0x10040003  beq $0, $4, 12                  ; 727: seq $v0,$a0,0
[0x00400964]        0x34020000  ori $2, $0, 0
[0x00400968]        0x10000002  beq $0, $0, 8
[0x0040096c]        0x34020001  ori $2, $0, 1
[0x00400970]        0x03e00008  jr $31                          ; 728: j $ra
[0x00400974]        0x80a60000  lb $6, 0($5)                    ; 732: lb $a2, ($a1)
[0x00400978]        0x10060005  beq $0, $6, 20 [copy_exit-0x00400978]; 733: beq $zero, $a2 copy_exit 
[0x0040097c]        0xa0860000  sb $6, 0($4)                    ; 734: sb $a2, ($a0)   
[0x00400980]        0x20840001  addi $4, $4, 1                  ; 735: add $a0,$a0,1
[0x00400984]        0x20a50001  addi $5, $5, 1                  ; 736: add $a1,$a1,1
[0x00400988]        0x0810025d  j 0x00400974 [copy_loop]        ; 737: j copy_loop
[0x0040098c]        0xa0800000  sb $0, 0($4)                    ; 739: sb $zero, ($a0)
[0x00400990]        0x00041021  addu $2, $0, $4                 ; 740: move $v0, $a0
[0x00400994]        0x03e00008  jr $31                          ; 741: j $ra
[0x00400998]        0xafa4fffc  sw $4, -4($29)                  ; 744: sw $a0, -4($sp)
[0x0040099c]        0xafa5fff8  sw $5, -8($29)                  ; 745: sw $a1, -8($sp)
[0x004009a0]        0xafbffff4  sw $31, -12($29)                ; 746: sw $ra, -12($sp)
[0x004009a4]        0x0c100227  jal 0x0040089c [_size]          ; 747: jal _size
[0x004009a8]        0x34070001  ori $7, $0, 1                   ; 748: li $a3, 1
[0x004009ac]        0x00e23820  add $7, $7, $2                  ; 749: add $a3,$a3,$v0
[0x004009b0]        0x8fa4fff8  lw $4, -8($29)                  ; 750: lw $a0, -8($sp)
[0x004009b4]        0x0c100227  jal 0x0040089c [_size]          ; 751: jal _size
[0x004009b8]        0x00e23820  add $7, $7, $2                  ; 752: add $a3, $a3, $v0
[0x004009bc]        0x00072021  addu $4, $0, $7                 ; 753: move $a0, $a3
[0x004009c0]        0x34020009  ori $2, $0, 9                   ; 754: li $v0, 9
[0x004009c4]        0x0000000c  syscall                         ; 755: syscall 
[0x004009c8]        0x00023821  addu $7, $0, $2                 ; 756: move $a3, $v0
[0x004009cc]        0x00022021  addu $4, $0, $2                 ; 757: move $a0, $v0
[0x004009d0]        0x8fa5fffc  lw $5, -4($29)                  ; 758: lw   $a1, -4($sp)
[0x004009d4]        0x0c10025d  jal 0x00400974 [_copy]          ; 759: jal _copy
[0x004009d8]        0x00022021  addu $4, $0, $2                 ; 760: move $a0, $v0
[0x004009dc]        0x8fa5fff8  lw $5, -8($29)                  ; 761: lw $a1, -8($sp)
[0x004009e0]        0x0c10025d  jal 0x00400974 [_copy]          ; 762: jal _copy
[0x004009e4]        0x00071021  addu $2, $0, $7                 ; 763: move $v0, $a3
[0x004009e8]        0x8fbffff4  lw $31, -12($29)                ; 764: lw $ra, -12($sp)
[0x004009ec]        0x03e00008  jr $31                          ; 765: j $ra
[0x004009f0]        0x27bdfffc  addiu $29, $29, -4              ; 795: subu $sp,$sp,4                  # establish frame...
[0x004009f4]        0xafbf0000  sw $31, 0($29)                  ; 796: sw $ra,($sp)                    # ...save $ra
[0x004009f8]        0x00042080  sll $4, $4, 2                   ; 798: sll $a0,$a0,2                        # compute array size (# bytes)
[0x004009fc]        0x0c100347  jal 0x00400d1c [malloc]         ; 799: jal malloc
[0x00400a00]        0x00023021  addu $6, $0, $2                 ; 800: move $a2,$v0                        # current array entry
[0x00400a04]        0x04010004  bgez $0 16 [Lrunt2-0x00400a04]  ; 801: b Lrunt2
[0x00400a08]        0xacc50000  sw $5, 0($6)                    ; 803: sw $a1,($a2)                        # store initializer in current entry
[0x00400a0c]        0x2084fffc  addi $4, $4, -4                 ; 804: sub $a0,$a0,4                        # count array entries
[0x00400a10]        0x20c60004  addi $6, $6, 4                  ; 805: add $a2,$a2,4                        # next array entry is current
[0x00400a14]        0x1c80fffd  bgtz $4 -12 [Lrunt1-0x00400a14] ; 807: bgtz $a0, Lrunt1                # array completely initialized?
[0x00400a18]        0x8fbf0000  lw $31, 0($29)                  ; 809: lw $ra,($sp)                      
[0x00400a1c]        0x27bd0004  addiu $29, $29, 4               ; 810: addiu $sp,$sp,4                 # release frame
[0x00400a20]        0x03e00008  jr $31                          ; 811: j $ra
[0x00400a24]        0x27bdfffc  addiu $29, $29, -4              ; 821: subu $sp,$sp,4                  # establish frame...
[0x00400a28]        0xafbf0000  sw $31, 0($29)                  ; 822: sw $ra,($sp)                    # ...save $ra
[0x00400a2c]        0x0c100347  jal 0x00400d1c [malloc]         ; 824: jal malloc
[0x00400a30]        0x00023021  addu $6, $0, $2                 ; 826: move $a2,$v0                        # save pointer into allocated block
[0x00400a34]        0x04010004  bgez $0 16 [Lrunt4-0x00400a34]  ; 827: b Lrunt4
[0x00400a38]        0xacc00000  sw $0, 0($6)                    ; 829: sw $0,($a2)                        # store 0 (32-bit) in block
[0x00400a3c]        0x2084fffc  addi $4, $4, -4                 ; 830: sub $a0,$a0,4                        # count words in block
[0x00400a40]        0x20c60004  addi $6, $6, 4                  ; 831: add $a2,$a2,4                        # advance pointer into block
[0x00400a44]        0x1c80fffd  bgtz $4 -12 [Lrunt3-0x00400a44] ; 833: bgtz $a0, Lrunt3                # 0-ed whole block already?
[0x00400a48]        0x8fbf0000  lw $31, 0($29)                  ; 835: lw $ra,($sp)                      
[0x00400a4c]        0x27bd0004  addiu $29, $29, 4               ; 836: addiu $sp,$sp,4                 # release frame
[0x00400a50]        0x03e00008  jr $31                          ; 837: j $ra
[0x00400a54]        0x8c890000  lw $9, 0($4)                    ; 846: lw        $t1,0($a0)                # read the length of string1
[0x00400a58]        0x8caa0000  lw $10, 0($5)                   ; 847: lw        $t2,0($a1)                # read the length of string2
[0x00400a5c]        0x24840003  addiu $4, $4, 3                 ; 848: addiu        $a0,$a0,3                # set the pointer before the first character
[0x00400a60]        0x24a50003  addiu $5, $5, 3                 ; 849: addiu        $a1,$a1,3                # set the pointer before the first character
[0x00400a64]        0x1120000f  beq $9, $0, 60 [_strChkEQ-0x00400a64]; 851: beq        $t1,$zero,_strChkEQ        # length of s1 = 0
[0x00400a68]        0x24840001  addiu $4, $4, 1                 ; 852: addiu        $a0,$a0,1                # set the pointer to the next character
[0x00400a6c]        0x24a50001  addiu $5, $5, 1                 ; 853: addiu        $a1,$a1,1
[0x00400a70]        0x1140000f  beq $10, $0, 60 [_strGT-0x00400a70]; 854: beq        $t2,$zero,_strGT        # length of s2 = 0 and length of s1 != 0
[0x00400a74]        0x808b0000  lb $11, 0($4)                   ; 855: lb        $t3,0($a0)                # load c1
[0x00400a78]        0x80ac0000  lb $12, 0($5)                   ; 856: lb        $t4,0($a1)                # load c2
[0x00400a7c]        0x2529ffff  addiu $9, $9, -1                ; 857: addiu        $t1,$t1,-1                # len1 = len1 - 1        
[0x00400a80]        0x254affff  addiu $10, $10, -1              ; 858: addiu        $t2,$t2,-1                # len2 = len2 - 1
[0x00400a84]        0x116cfff8  beq $11, $12, -32 [_cmpEntry-0x00400a84]; 859: beq        $t3,$t4,_cmpEntry        # if c2 = c1 goto _cmpEntry
[0x00400a88]        0x00000000  nop                             ; 861: nop                                # delay slot,if necessary
[0x00400a8c]        0x018b082a  slt $1, $12, $11                ; 863: bgt        $t3,$t4,_strGT                # if c1 < c2 then goto _strLT else goto str_GT                                
[0x00400a90]        0x14200007  bne $1, $0, 28 [_strGT-0x00400a90]
[0x00400a94]        0x3c01ffff  lui $1, -1                      ; 865: li        $v0,-1                        
[0x00400a98]        0x3422ffff  ori $2, $1, -1
[0x00400a9c]        0x03e00008  jr $31                          ; 866: jr        $ra
[0x00400aa0]        0x1540fffd  bne $10, $0, -12 [_strLT-0x00400aa0]; 868: bne        $t2,$zero,_strLT        # check if length of s1 = 0 and length of s2 != 0        
[0x00400aa4]        0x34020000  ori $2, $0, 0                   ; 869: li        $v0,0                        # len(s1) = 0 and len(s2) = 0 => s1 = s2
[0x00400aa8]        0x03e00008  jr $31                          ; 870: jr        $ra                        
[0x00400aac]        0x34020001  ori $2, $0, 1                   ; 872: li        $v0,1
[0x00400ab0]        0x03e00008  jr $31                          ; 873: jr        $ra
[0x00400ab4]        0x1085000f  beq $4, $5, 60 [Lrunt10-0x00400ab4]; 884: beq $a0,$a1,Lrunt10                # same string rep => equal
[0x00400ab8]        0x8c860000  lw $6, 0($4)                    ; 885: lw  $a2,($a0)                        # access string length 1st string
[0x00400abc]        0x8ca70000  lw $7, 0($5)                    ; 886: lw  $a3,($a1)                        # access string length 2nd string
[0x00400ac0]        0x24840004  addiu $4, $4, 4                 ; 887: addiu $a0,$a0,4                        # first char of 1st string
[0x00400ac4]        0x24a50004  addiu $5, $5, 4                 ; 888: addiu $a1,$a1,4                        # first char of 2nd string
[0x00400ac8]        0x10c70009  beq $6, $7, 36 [Lrunt11-0x00400ac8]; 889: beq $a2,$a3,Lrunt11                
[0x00400acc]        0x34020000  ori $2, $0, 0                   ; 891: li  $v0,0                        # lengths differ => not equal
[0x00400ad0]        0x03e00008  jr $31                          ; 892: j $ra
[0x00400ad4]        0x90880000  lbu $8, 0($4)                   ; 894: lbu  $t0,($a0)                        # current char 1st string
[0x00400ad8]        0x90a90000  lbu $9, 0($5)                   ; 895: lbu  $t1,($a1)                        # current char 2nd string
[0x00400adc]        0x1509fffc  bne $8, $9, -16 [Lrunt13-0x00400adc]; 896: bne  $t0,$t1,Lrunt13                # chars differ => not equal
[0x00400ae0]        0x24840001  addiu $4, $4, 1                 ; 897: addiu $a0,$a0,1                        # advance to next char pair
[0x00400ae4]        0x24a50001  addiu $5, $5, 1                 ; 898: addiu $a1,$a1,1
[0x00400ae8]        0x24c6ffff  addiu $6, $6, -1                ; 899: addiu $a2,$a2,-1                # one char pair compared
[0x00400aec]        0x04c1fffa  bgez $6 -24 [Lrunt12-0x00400aec]; 901: bgez $a2,Lrunt12                # more char pairs to compare?
[0x00400af0]        0x34020001  ori $2, $0, 1                   ; 903: li $v0,1
[0x00400af4]        0x03e00008  jr $31                          ; 904: j $ra
[0x00400af8]        0x8c880000  lw $8, 0($4)                    ; 922: lw $t0,($a0)                        # access string length
[0x00400afc]        0x000849c3  sra $9, $8, 7                   ; 923: sra $t1,$t0,7                        # how many number 128-byte blocks?
[0x00400b00]        0x248a0004  addiu $10, $4, 4                ; 924: addiu $t2,$a0,4                        # current char to copy
[0x00400b04]        0x310b007f  andi $11, $8, 127               ; 925: andi $t3,$t0,0x7f                # # chars in 1st block (<= 128)
[0x00400b08]        0x3c011001  lui $1, 4097                    ; 927: sb $0,printbuf($t3)                # zero-terminate block
[0x00400b0c]        0x002b0821  addu $1, $1, $11
[0x00400b10]        0xa0200014  sb $0, 20($1)
[0x00400b14]        0x340c0000  ori $12, $0, 0                  ; 928: li $t4,0                        # char counter
[0x00400b18]        0x018b082a  slt $1, $12, $11                ; 930: bge $t4,$t3,Lrunt54                # more chars to copy?
[0x00400b1c]        0x10200008  beq $1, $0, 32 [Lrunt54-0x00400b1c]
[0x00400b20]        0x91440000  lbu $4, 0($10)                  ; 931: lbu $a0,($t2)                        # copy char from string to buffer
[0x00400b24]        0x3c011001  lui $1, 4097                    ; 932: sb $a0,printbuf($t4)                
[0x00400b28]        0x002c0821  addu $1, $1, $12
[0x00400b2c]        0xa0240014  sb $4, 20($1)
[0x00400b30]        0x258c0001  addiu $12, $12, 1               ; 933: addiu $t4,$t4,1                        # one char copied
[0x00400b34]        0x254a0001  addiu $10, $10, 1               ; 934: addiu $t2,$t2,1                        # advance to next char
[0x00400b38]        0x0401fff8  bgez $0 -32 [Lrunt55-0x00400b38]; 935: b Lrunt55
[0x00400b3c]        0x3c011001  lui $1, 4097 [printbuf]         ; 937: la $a0,printbuf                        # print buffer contents
[0x00400b40]        0x34240014  ori $4, $1, 20 [printbuf]
[0x00400b44]        0x34020004  ori $2, $0, 4                   ; 938: li $v0,4                        # SPIM print system call
[0x00400b48]        0x0000000c  syscall                         ; 939: syscall
[0x00400b4c]        0x340b0080  ori $11, $0, 128                ; 941: li $t3,128                        # next block has 128 bytes
[0x00400b50]        0x2129ffff  addi $9, $9, -1                 ; 942: addi $t1,$t1,-1                        # one block completed
[0x00400b54]        0x0521ffed  bgez $9 -76 [Lrunt56-0x00400b54]; 943: bgez $t1,Lrunt56                # more blocks to print?
[0x00400b58]        0x03e00008  jr $31                          ; 944: j $ra
[0x00400b5c]        0x03e00008  jr $31                          ; 953: j $ra
[0x00400b60]        0x3c01ffff  lui $1, -1                      ; 993: and $a1,$a0,0xffffff00          # check char code to be
[0x00400b64]        0x3421ff00  ori $1, $1, -256
[0x00400b68]        0x00812824  and $5, $4, $1
[0x00400b6c]        0x14a00006  bne $5, $0, 24 [Lrunt31-0x00400b6c]; 994: bnez $a1,Lrunt31                #   in range 0..255
[0x00400b70]        0x000420c0  sll $4, $4, 3                   ; 995: sll  $a0,$a0,3                        # compute string addr from char code
[0x00400b74]        0x3c011001  lui $1, 4097 [RT_chars]         ; 996: la   $v0,RT_chars($a0)                # retrieve string pointer
[0x00400b78]        0x34210098  ori $1, $1, 152 [RT_chars]
[0x00400b7c]        0x00811020  add $2, $4, $1
[0x00400b80]        0x03e00008  jr $31                          ; 997: j $ra
[0x00400b84]        0x34020004  ori $2, $0, 4                   ; 999: li   $v0,4                        # SPIM print system call
[0x00400b88]        0x3c011001  lui $1, 4097 [RT_chrrange]      ; 1000: la   $a0,RT_chrrange                # print out-of-range error message
[0x00400b8c]        0x3424089c  ori $4, $1, 2204 [RT_chrrange]
[0x00400b90]        0x0000000c  syscall                         ; 1001: syscall
[0x00400b94]        0x3402000a  ori $2, $0, 10                  ; 1002: li   $v0,10                     # SPIM exit system call
[0x00400b98]        0x0000000c  syscall                         ; 1003: syscall
[0x00400b9c]        0x8c820000  lw $2, 0($4)                    ; 1013: lw $v0,($a0)                        # access string length information
[0x00400ba0]        0x03e00008  jr $31                          ; 1014: j $ra
[0x00400ba4]        0x27bdfffc  addiu $29, $29, -4              ; 1031: subu $sp,$sp,4                  # establish frame...
[0x00400ba8]        0xafbf0000  sw $31, 0($29)                  ; 1032: sw $ra,($sp)                    # ...save $ra
[0x00400bac]        0x8c890000  lw $9, 0($4)                    ; 1034: lw $t1,($a0)                        # access string length
[0x00400bb0]        0x04a0001d  bltz $5 116 [Lrunt41-0x00400bb0]; 1035: bltz $a1,Lrunt41                # start < 0? => bounds check failed
[0x00400bb4]        0x00a65020  add $10, $5, $6                 ; 1036: add $t2,$a1,$a2                        # last char of substring
[0x00400bb8]        0x012a582a  slt $11, $9, $10                ; 1037: sgt $t3,$t2,$t1                        # last char beyond string end?
[0x00400bbc]        0x1560001a  bne $11, $0, 104 [Lrunt41-0x00400bbc]; 1038: bnez $t3,Lrunt41                #   => bounds check failed
[0x00400bc0]        0x20840004  addi $4, $4, 4                  ; 1039: addi $a0,$a0,4
[0x00400bc4]        0x00854820  add $9, $4, $5                  ; 1040: add $t1,$a0,$a1                        # first char of substring
[0x00400bc8]        0x34010001  ori $1, $0, 1                   ; 1041: bne $a2,1,Lrunt42                # substring of length 1?
[0x00400bcc]        0x14260005  bne $1, $6, 20 [Lrunt42-0x00400bcc]
[0x00400bd0]        0x91240000  lbu $4, 0($9)                   ; 1042: lbu $a0,($t1)                        #   if so, return const string
[0x00400bd4]        0x8fbf0000  lw $31, 0($29)                  ; 1044: lw $ra,($sp)                        # release frame
[0x00400bd8]        0x27bd0004  addiu $29, $29, 4               ; 1045: addiu $sp,$sp,4
[0x00400bdc]        0x0401ffe1  bgez $0 -124 [chr-0x00400bdc]   ; 1046: b chr                                # let `chr' do the work instead
[0x00400be0]        0x14c00004  bne $6, $0, 16 [Lrunt43-0x00400be0]; 1048: bnez $a2,Lrunt43                # substring of length 0?
[0x00400be4]        0x3c011001  lui $1, 4097 [RT_empty]         ; 1049: la  $v0,RT_empty                #   if so, return empty string
[0x00400be8]        0x34220898  ori $2, $1, 2200 [RT_empty]
[0x00400bec]        0x0401000b  bgez $0 44 [Lrunt45-0x00400bec] ; 1050: b Lrunt45
[0x00400bf0]        0x20c40004  addi $4, $6, 4                  ; 1052: addi $a0,$a2,4                        # space needed for substring
[0x00400bf4]        0x0c100347  jal 0x00400d1c [malloc]         ; 1053: jal malloc
[0x00400bf8]        0xac460000  sw $6, 0($2)                    ; 1054: sw   $a2,($v0)                  # set length of substring
[0x00400bfc]        0x204a0004  addi $10, $2, 4                 ; 1055: addi $t2,$v0,4                  # first char of substring
[0x00400c00]        0x912b0000  lbu $11, 0($9)                  ; 1057: lbu  $t3,($t1)                        # get char from string
[0x00400c04]        0xa14b0000  sb $11, 0($10)                  ; 1058: sb   $t3,($t2)                        # copy to substring
[0x00400c08]        0x25290001  addiu $9, $9, 1                 ; 1059: addiu $t1,1                        # advance in string
[0x00400c0c]        0x254a0001  addiu $10, $10, 1               ; 1060: addiu $t2,1                        # advance in substring
[0x00400c10]        0x24c6ffff  addiu $6, $6, -1                ; 1061: addiu $a2,-1                        # one char copied
[0x00400c14]        0x1cc0fffb  bgtz $6 -20 [Lrunt44-0x00400c14]; 1062: bgtz $a2,Lrunt44                # more chars to copy?
[0x00400c18]        0x8fbf0000  lw $31, 0($29)                  ; 1064: lw $ra,($sp)                        # release frame
[0x00400c1c]        0x27bd0004  addiu $29, $29, 4               ; 1065: addiu $sp,$sp,4
[0x00400c20]        0x03e00008  jr $31                          ; 1066: j $ra
[0x00400c24]        0x34020004  ori $2, $0, 4                   ; 1068: li   $v0,4                        # SPIM print system call
[0x00400c28]        0x3c011001  lui $1, 4097 [Lrunt40]          ; 1069: la   $a0,Lrunt40                # print out-of-bounds message
[0x00400c2c]        0x342408cb  ori $4, $1, 2251 [Lrunt40]
[0x00400c30]        0x0000000c  syscall                         ; 1070: syscall
[0x00400c34]        0x3402000a  ori $2, $0, 10                  ; 1071: li   $v0,10                        # SPIM exit system call
[0x00400c38]        0x0000000c  syscall                         ; 1072: syscall
[0x00400c3c]        0x27bdfffc  addiu $29, $29, -4              ; 1082: subu $sp,$sp,4                  # establish frame...
[0x00400c40]        0xafbf0000  sw $31, 0($29)                  ; 1083: sw $ra,($sp)                    # ...save $ra
[0x00400c44]        0x8c880000  lw $8, 0($4)                    ; 1085: lw $t0,($a0)                        # length 1st string
[0x00400c48]        0x8ca90000  lw $9, 0($5)                    ; 1086: lw $t1,($a1)                        # length 2nd string
[0x00400c4c]        0x11000016  beq $8, $0, 88 [Lrunt50-0x00400c4c]; 1087: beqz $t0,Lrunt50                # 1st string empty?
[0x00400c50]        0x11200017  beq $9, $0, 92 [Lrunt51-0x00400c50]; 1088: beqz $t1,Lrunt51                # 2nd string empty?
[0x00400c54]        0x248a0004  addiu $10, $4, 4                ; 1089: addiu  $t2,$a0,4                # start of 1st string
[0x00400c58]        0x24ab0004  addiu $11, $5, 4                ; 1090: addiu  $t3,$a1,4                # start of 2nd string
[0x00400c5c]        0x01096020  add $12, $8, $9                 ; 1091: add  $t4,$t0,$t1                # number of chars in result string
[0x00400c60]        0x25840004  addiu $4, $12, 4                ; 1092: addiu $a0,$t4,4                        # plus space for string length header
[0x00400c64]        0x0c100347  jal 0x00400d1c [malloc]         ; 1093: jal malloc
[0x00400c68]        0x244d0004  addiu $13, $2, 4                ; 1094: addiu $t5,$v0,4                        # pointer to concatenated chars
[0x00400c6c]        0xac4c0000  sw $12, 0($2)                   ; 1095: sw $t4,($v0)                        # set length of concatenated string
[0x00400c70]        0x91440000  lbu $4, 0($10)                  ; 1097: lbu $a0,($t2)                        # copy chars from 1st string
[0x00400c74]        0xa1a40000  sb $4, 0($13)                   ; 1098: sb  $a0,($t5)                        #   to result string
[0x00400c78]        0x254a0001  addiu $10, $10, 1               ; 1099: addiu $t2,1                        # advance pointers into 1st string
[0x00400c7c]        0x25ad0001  addiu $13, $13, 1               ; 1100: addiu $t5,1                        #   and result string
[0x00400c80]        0x2108ffff  addi $8, $8, -1                 ; 1101: addi $t0,-1                        # count chars in 1st string
[0x00400c84]        0x1d00fffb  bgtz $8 -20 [Lrunt52-0x00400c84]; 1102: bgtz $t0,Lrunt52                # more to copy in 1st string?
[0x00400c88]        0x91640000  lbu $4, 0($11)                  ; 1104: lbu $a0,($t3)                        # copy chars from 2nd string
[0x00400c8c]        0xa1a40000  sb $4, 0($13)                   ; 1105: sb  $a0,($t5)                        #   to result string
[0x00400c90]        0x256b0001  addiu $11, $11, 1               ; 1106: addiu $t3,1                        # advance pointers into 2nd string
[0x00400c94]        0x25ad0001  addiu $13, $13, 1               ; 1107: addiu $t5,1                        #   and result string
[0x00400c98]        0x2129ffff  addi $9, $9, -1                 ; 1108: addi $t1,-1                        # count chars in 2nd string
[0x00400c9c]        0x1d20fffb  bgtz $9 -20 [Lrunt53-0x00400c9c]; 1109: bgtz $t1,Lrunt53                # more to copy in 2nd string?
[0x00400ca0]        0x04010004  bgez $0 16 [Lrunt57-0x00400ca0] ; 1110: b Lrunt57
[0x00400ca4]        0x00051021  addu $2, $0, $5                 ; 1112: move $v0,$a1                        # 1st string empty, return 2nd
[0x00400ca8]        0x04010002  bgez $0 8 [Lrunt57-0x00400ca8]  ; 1113: b Lrunt57
[0x00400cac]        0x00041021  addu $2, $0, $4                 ; 1115: move $v0,$a0                        # 2nd string empty, return 1st
[0x00400cb0]        0x8fbf0000  lw $31, 0($29)                  ; 1117: lw $ra,($sp)                        # release frame
[0x00400cb4]        0x27bd0004  addiu $29, $29, 4               ; 1118: addiu $sp,$sp,4
[0x00400cb8]        0x03e00008  jr $31                          ; 1119: j $ra
[0x00400cbc]        0x3c011001  lui $1, 4097                    ; 1146: lw $a0,getchptr                 # access current char in char buffer
[0x00400cc0]        0x8c240d04  lw $4, 3332($1)
[0x00400cc4]        0x90820000  lbu $2, 0($4)                   ; 1147: lbu $v0,($a0)                        # if current char != '\0'
[0x00400cc8]        0x1440000d  bne $2, $0, 52 [Lrunt6-0x00400cc8]; 1148: bnez $v0,Lrunt6                        #   return string containing it
[0x00400ccc]        0x34020008  ori $2, $0, 8                   ; 1149: li $v0,8                        # SPIM read_string system call
[0x00400cd0]        0x3c011001  lui $1, 4097 [getchbuf]         ; 1150: la $a0,getchbuf                        # need to read new chars into buffer
[0x00400cd4]        0x34240901  ori $4, $1, 2305 [getchbuf]
[0x00400cd8]        0x34050400  ori $5, $0, 1024                ; 1151: li $a1,1024
[0x00400cdc]        0x0000000c  syscall                         ; 1152: syscall
[0x00400ce0]        0x3c011001  lui $1, 4097 [getchbuf]         ; 1153: la $a0,getchbuf                        # access first char in char buffer
[0x00400ce4]        0x34240901  ori $4, $1, 2305 [getchbuf]
[0x00400ce8]        0x90820000  lbu $2, 0($4)                   ; 1154: lbu $v0,($a0)                        # if current char != '\0'
[0x00400cec]        0x14400004  bne $2, $0, 16 [Lrunt6-0x00400cec]; 1155: bnez $v0,Lrunt6                        #   return string containing it
[0x00400cf0]        0x3c011001  lui $1, 4097 [RT_empty]         ; 1156: la $v0,RT_empty                        # no char entered, return
[0x00400cf4]        0x34220898  ori $2, $1, 2200 [RT_empty]
[0x00400cf8]        0x04010006  bgez $0 24 [Lrunt7-0x00400cf8]  ; 1157: b Lrunt7                        #   empty string
[0x00400cfc]        0x000210c0  sll $2, $2, 3                   ; 1159: sll $v0,$v0,3                        # compute address of string
[0x00400d00]        0x3c011001  lui $1, 4097 [RT_chars]         ; 1160: la $v0,RT_chars($v0)                #   containing current char
[0x00400d04]        0x34210098  ori $1, $1, 152 [RT_chars]
[0x00400d08]        0x00411020  add $2, $2, $1
[0x00400d0c]        0x20840001  addi $4, $4, 1                  ; 1161: add $a0,$a0,1                        # advance current char pointer
[0x00400d10]        0x3c011001  lui $1, 4097                    ; 1163: sw $a0,getchptr                        # remember for next getchar call
[0x00400d14]        0xac240d04  sw $4, 3332($1)
[0x00400d18]        0x03e00008  jr $31                          ; 1164: j $ra                                
[0x00400d1c]        0x27bdfffc  addiu $29, $29, -4              ; 1174: subu $sp,$sp,4                  # stack frame (to save $a0)
[0x00400d20]        0xafa40000  sw $4, 0($29)                   ; 1175: sw $a0,($sp)
[0x00400d24]        0x24840004  addiu $4, $4, 4                 ; 1177: addiu $a0,$a0,4                        # prepare alignment
[0x00400d28]        0x34020009  ori $2, $0, 9                   ; 1178: li $v0,9                        # SPIM sbrk system call
[0x00400d2c]        0x0000000c  syscall                         ; 1179: syscall
[0x00400d30]        0x24420004  addiu $2, $2, 4                 ; 1180: addiu $v0,$v0,4                        # ensure 4-byte boundary alignment
[0x00400d34]        0x3c01ffff  lui $1, -1                      ; 1181: li $v1,0xfffffffc
[0x00400d38]        0x3423fffc  ori $3, $1, -4
[0x00400d3c]        0x00431024  and $2, $2, $3                  ; 1182: and $v0,$v0,$v1
[0x00400d40]        0x8fa40000  lw $4, 0($29)                   ; 1184: lw $a0,($sp)
[0x00400d44]        0x27bd0004  addiu $29, $29, 4               ; 1185: addiu $sp,$sp,4
[0x00400d48]        0x03e00008  jr $31                          ; 1186: j $ra

        KERNEL


Data Segment
=========================
        DATA
[0x10000000]...[0x10010000]        0x00000000
[0x10010000]                        0x000a0020  0x002d0030  0x00300030  0x00000001
[0x10010010]                        0x00300039  0x00000000  0x00000000  0x00000000
[0x10010020]...[0x1001089c]        0x00000000
[0x1001089c]                        0x6769545b
[0x100108a0]                        0x52207265  0x69746e75  0x205d656d  0x28726863
[0x100108b0]                        0x63203a29  0x61726168  0x72657463  0x74756f20
[0x100108c0]                        0x20666f20  0x676e6172  0x5b000a65  0x65676954
[0x100108d0]                        0x75522072  0x6d69746e  0x73205d65  0x74736275
[0x100108e0]                        0x676e6972  0x203a2928  0x73627573  0x6e697274
[0x100108f0]                        0x756f2067  0x666f2074  0x756f6220  0x0a73646e
[0x10010900]...[0x10010d04]        0x00000000
[0x10010d04]                        0x10010901  0x00000000  0x00000000
[0x10010d10]...[0x10040000]        0x00000000
[0x10040000]                        0x00000031  0x00000000  0x00000000  0x00000020
[0x10040010]                        0x00000033  0x00000000  0x00000000  0x00000020

        STACK
[0x7fffe738]                        0x00000000  0x00000000
[0x7fffe740]                        0x7fffefc9  0x7fffef94  0x7fffef53  0x7fffef09
[0x7fffe750]                        0x7fffeec4  0x7fffeeb1  0x7fffee80  0x7fffee6d
[0x7fffe760]                        0x7fffee49  0x7fffee35  0x7fffee28  0x7fffedf9
[0x7fffe770]                        0x7fffede5  0x7fffedce  0x7fffedc0  0x7fffeb26
[0x7fffe780]                        0x7fffeaed  0x7fffe9b1  0x7fffe996  0x7fffe950
[0x7fffe790]                        0x7fffe93d  0x7fffe925  0x7fffe907  0x7fffe8f3
[0x7fffe7a0]                        0x7fffe8e4  0x7fffe8ce  0x7fffe8a6  0x7fffe87f
[0x7fffe7b0]                        0x7fffe83c  0x7fffe82b  0x7fffe814  0x7fffe7e0
[0x7fffe7c0]                        0x7fffe7ce  0x00000000  0x00000000  0x69770000
[0x7fffe7d0]                        0x7269646e  0x5c3a433d  0x444e4957  0x0053574f
[0x7fffe7e0]                        0x52455355  0x464f5250  0x3d454c49  0x445c3a43
[0x7fffe7f0]                        0x6d75636f  0x73746e65  0x646e6120  0x74655320
[0x7fffe800]                        0x676e6974  0x64415c73  0x696e696d  0x61727473
[0x7fffe810]                        0x00726f74  0x52455355  0x454d414e  0x6d64413d
[0x7fffe820]                        0x73696e69  0x74617274  0x5500726f  0x44524553
[0x7fffe830]                        0x49414d4f  0x414b3d4e  0x004e454c  0x434d4f54
[0x7fffe840]                        0x485f5441  0x3d454d4f  0x505c3a43  0x72676f72
[0x7fffe850]                        0x46206d61  0x73656c69  0x6170415c  0x20656863
[0x7fffe860]                        0x74666f53  0x65726177  0x756f4620  0x7461646e
[0x7fffe870]                        0x5c6e6f69  0x636d6f54  0x35207461  0x5400352e
[0x7fffe880]                        0x433d504d  0x4f445c3a  0x454d5543  0x415c317e
[0x7fffe890]                        0x4e494d44  0x5c317e49  0x41434f4c  0x317e534c
[0x7fffe8a0]                        0x6d65545c  0x45540070  0x433d504d  0x4f445c3a
[0x7fffe8b0]                        0x454d5543  0x415c317e  0x4e494d44  0x5c317e49
[0x7fffe8c0]                        0x41434f4c  0x317e534c  0x6d65545c  0x79530070
[0x7fffe8d0]                        0x6d657473  0x746f6f52  0x5c3a433d  0x444e4957
[0x7fffe8e0]                        0x0053574f  0x74737953  0x72446d65  0x3d657669
[0x7fffe8f0]                        0x53003a43  0x49535345  0x414e4e4f  0x433d454d
[0x7fffe900]                        0x6f736e6f  0x5000656c  0x72676f72  0x69466d61
[0x7fffe910]                        0x3d73656c  0x505c3a43  0x72676f72  0x46206d61
[0x7fffe920]                        0x73656c69  0x4f525000  0x53534543  0x525f524f
[0x7fffe930]                        0x53495645  0x3d4e4f49  0x31306236  0x4f525000
[0x7fffe940]                        0x53534543  0x4c5f524f  0x4c455645  0x0035313d
[0x7fffe950]                        0x434f5250  0x4f535345  0x44495f52  0x49544e45
[0x7fffe960]                        0x52454946  0x3638783d  0x6d614620  0x20796c69
[0x7fffe970]                        0x4d203531  0x6c65646f  0x37303120  0x65745320
[0x7fffe980]                        0x6e697070  0x2c312067  0x74754120  0x746e6568
[0x7fffe990]                        0x4d416369  0x52500044  0x5345434f  0x5f524f53
[0x7fffe9a0]                        0x48435241  0x43455449  0x45525554  0x3638783d
[0x7fffe9b0]                        0x52455000  0x494c354c  0x3a433d42  0x61726f5c
[0x7fffe9c0]                        0x5c656c63  0x646f7270  0x5c746375  0x322e3031
[0x7fffe9d0]                        0x645c302e  0x5c315f62  0x6c726570  0x382e355c
[0x7fffe9e0]                        0x6c5c332e  0x4d5c6269  0x6e695753  0x782d3233
[0x7fffe9f0]                        0x433b3638  0x726f5c3a  0x656c6361  0x6f72705c
[0x7fffea00]                        0x74637564  0x2e30315c  0x5c302e32  0x315f6264
[0x7fffea10]                        0x7265705c  0x2e355c6c  0x5c332e38  0x3b62696c
[0x7fffea20]                        0x6f5c3a43  0x6c636172  0x72705c65  0x6375646f
[0x7fffea30]                        0x30315c74  0x302e322e  0x5f62645c  0x65705c31
[0x7fffea40]                        0x355c6c72  0x332e382e  0x62696c5c  0x57534d5c
[0x7fffea50]                        0x32336e69  0x3638782d  0x5c3a433b  0x6361726f
[0x7fffea60]                        0x705c656c  0x75646f72  0x315c7463  0x2e322e30
[0x7fffea70]                        0x62645c30  0x705c315f  0x5c6c7265  0x65746973
[0x7fffea80]                        0x382e355c  0x433b332e  0x726f5c3a  0x656c6361
[0x7fffea90]                        0x6f72705c  0x74637564  0x2e30315c  0x5c302e32
[0x7fffeaa0]                        0x315f6264  0x7265705c  0x69735c6c  0x355c6574
[0x7fffeab0]                        0x332e382e  0x62696c5c  0x5c3a433b  0x6361726f
[0x7fffeac0]                        0x705c656c  0x75646f72  0x315c7463  0x2e322e30
[0x7fffead0]                        0x62645c30  0x735c315f  0x616d7379  0x64615c6e
[0x7fffeae0]                        0x5c6e696d  0x69726373  0x3b737470  0x54415000
[0x7fffeaf0]                        0x54584548  0x4f432e3d  0x452e3b4d  0x2e3b4558
[0x7fffeb00]                        0x3b544142  0x444d432e  0x42562e3b  0x562e3b53
[0x7fffeb10]                        0x2e3b4542  0x2e3b534a  0x3b45534a  0x4653572e
[0x7fffeb20]                        0x53572e3b  0x61500048  0x433d6874  0x726f5c3a
[0x7fffeb30]                        0x656c6361  0x6f72705c  0x74637564  0x2e30315c
[0x7fffeb40]                        0x5c302e32  0x315f6264  0x6e69625c  0x5c3a433b
[0x7fffeb50]                        0x474f5250  0x317e4152  0x726f425c  0x646e616c
[0x7fffeb60]                        0x5542435c  0x7e444c49  0x69425c31  0x3a433b6e
[0x7fffeb70]                        0x4f52505c  0x7e415247  0x6f425c31  0x6e616c72
[0x7fffeb80]                        0x42435c64  0x444c4955  0x505c317e  0x656a6f72
[0x7fffeb90]                        0x5c737463  0x3b6c7042  0x505c3a43  0x72676f72
[0x7fffeba0]                        0x46206d61  0x73656c69  0x646f435c  0x61654765
[0x7fffebb0]                        0x41525c72  0x74532044  0x6f696475  0x302e355c
[0x7fffebc0]                        0x6e69625c  0x5c3a433b  0x75636f44  0x746e656d
[0x7fffebd0]                        0x6e612073  0x65532064  0x6e697474  0x415c7367
[0x7fffebe0]                        0x55206c6c  0x73726573  0x636f445c  0x6e656d75
[0x7fffebf0]                        0x525c7374  0x53204441  0x69647574  0x2e355c6f
[0x7fffec00]                        0x70425c30  0x3a433b6c  0x4e49575c  0x53574f44
[0x7fffec10]                        0x7379735c  0x336d6574  0x3a433b32  0x4e49575c
[0x7fffec20]                        0x53574f44  0x5c3a433b  0x444e4957  0x5c53574f
[0x7fffec30]                        0x74737953  0x32336d65  0x6562575c  0x3a433b6d
[0x7fffec40]                        0x6f72505c  0x6d617267  0x6c694620  0x415c7365
[0x7fffec50]                        0x54204954  0x6e686365  0x676f6c6f  0x5c736569
[0x7fffec60]                        0x2e495441  0x5c454341  0x65726f43  0x6174532d
[0x7fffec70]                        0x3b636974  0x505c3a43  0x72676f72  0x46206d61
[0x7fffec80]                        0x73656c69  0x726f545c  0x73696f74  0x4e565365
[0x7fffec90]                        0x6e69625c  0x5c3a433b  0x676f7250  0x206d6172
[0x7fffeca0]                        0x656c6946  0x6f435c73  0x6e6f6d6d  0x6c694620
[0x7fffecb0]                        0x555c7365  0x6461656c  0x73795320  0x736d6574
[0x7fffecc0]                        0x45504d5c  0x3a433b47  0x6f72505c  0x6d617267
[0x7fffecd0]                        0x6c694620  0x435c7365  0x6f6d6d6f  0x6946206e
[0x7fffece0]                        0x5c73656c  0x6e756854  0x20726564  0x7774654e
[0x7fffecf0]                        0x5c6b726f  0x4b6e614b  0x435c6e61  0x6365646f
[0x7fffed00]                        0x3a433b73  0x6f72505c  0x6d617267  0x6c694620
[0x7fffed10]                        0x585c7365  0x6e696c69  0x69625c78  0x746e5c6e
[0x7fffed20]                        0x5551253b  0x55545241  0x4f525f53  0x4944544f
[0x7fffed30]                        0x625c2552  0x433b6e69  0x72505c3a  0x6172676f
[0x7fffed40]                        0x6946206d  0x5c73656c  0x69746c41  0x44206d75
[0x7fffed50]                        0x67697365  0x2072656e  0x79535c36  0x6d657473
[0x7fffed60]                        0x5c3a433b  0x676f7250  0x206d6172  0x656c6946
[0x7fffed70]                        0x74535c73  0x496d726f  0x6f435c49  0x3b636564
[0x7fffed80]                        0x505c3a43  0x72676f72  0x46206d61  0x73656c69
[0x7fffed90]                        0x6f74535c  0x49496d72  0x5c3a433b  0x676f7250
[0x7fffeda0]                        0x206d6172  0x656c6946  0x614a5c73  0x6a5c6176
[0x7fffedb0]                        0x2e316b64  0x5f302e36  0x625c3330  0x005c6e69
[0x7fffedc0]                        0x573d534f  0x6f646e69  0x4e5f7377  0x554e0054
[0x7fffedd0]                        0x5245424d  0x5f464f5f  0x434f5250  0x4f535345
[0x7fffede0]                        0x323d5352  0x474f4c00  0x45534e4f  0x52455652
[0x7fffedf0]                        0x4b5c5c3d  0x4e454c41  0x4d4f4800  0x54415045
[0x7fffee00]                        0x445c3d48  0x6d75636f  0x73746e65  0x646e6120
[0x7fffee10]                        0x74655320  0x676e6974  0x64415c73  0x696e696d
[0x7fffee20]                        0x61727473  0x00726f74  0x454d4f48  0x56495244
[0x7fffee30]                        0x3a433d45  0x5f504600  0x485f4f4e  0x5f54534f
[0x7fffee40]                        0x43454843  0x4f4e3d4b  0x6d6f4300  0x63657053
[0x7fffee50]                        0x5c3a433d  0x444e4957  0x5c53574f  0x74737973
[0x7fffee60]                        0x32336d65  0x646d635c  0x6578652e  0x4d4f4300
[0x7fffee70]                        0x45545550  0x4d414e52  0x414b3d45  0x004e454c
[0x7fffee80]                        0x6d6d6f43  0x72506e6f  0x6172676f  0x6c69466d
[0x7fffee90]                        0x433d7365  0x72505c3a  0x6172676f  0x6946206d
[0x7fffeea0]                        0x5c73656c  0x6d6d6f43  0x46206e6f  0x73656c69
[0x7fffeeb0]                        0x494c4300  0x4e544e45  0x3d454d41  0x736e6f43
[0x7fffeec0]                        0x00656c6f  0x41544143  0x414e494c  0x4d4f485f
[0x7fffeed0]                        0x3a433d45  0x6f72505c  0x6d617267  0x6c694620
[0x7fffeee0]                        0x415c7365  0x68636170  0x6f532065  0x61777466
[0x7fffeef0]                        0x46206572  0x646e756f  0x6f697461  0x6f545c6e
[0x7fffef00]                        0x7461636d  0x352e3520  0x53444200  0x4d4d4f43
[0x7fffef10]                        0x49444e4f  0x3a433d52  0x636f445c  0x6e656d75
[0x7fffef20]                        0x61207374  0x5320646e  0x69747465  0x5c73676e
[0x7fffef30]                        0x206c6c41  0x72657355  0x6f445c73  0x656d7563
[0x7fffef40]                        0x5c73746e  0x20444152  0x64757453  0x355c6f69
[0x7fffef50]                        0x4100302e  0x41445050  0x433d4154  0x6f445c3a
[0x7fffef60]                        0x656d7563  0x2073746e  0x20646e61  0x74746553
[0x7fffef70]                        0x73676e69  0x6d64415c  0x73696e69  0x74617274
[0x7fffef80]                        0x415c726f  0x696c7070  0x69746163  0x44206e6f
[0x7fffef90]                        0x00617461  0x69746c41  0x61506d75  0x433d6874
[0x7fffefa0]                        0x72505c3a  0x6172676f  0x6946206d  0x5c73656c
[0x7fffefb0]                        0x69746c41  0x44206d75  0x67697365  0x2072656e
[0x7fffefc0]                        0x79535c36  0x6d657473  0x4c4c4100  0x52455355
[0x7fffefd0]                        0x4f525053  0x454c4946  0x5c3a433d  0x75636f44
[0x7fffefe0]                        0x746e656d  0x6e612073  0x65532064  0x6e697474
[0x7fffeff0]                        0x415c7367  0x55206c6c  0x73726573  0x00000000

        KERNEL DATA
[0x90000000]...[0x90010000]        0x00000000


