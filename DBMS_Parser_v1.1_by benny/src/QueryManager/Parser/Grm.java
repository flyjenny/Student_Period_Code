//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Tue Aug 23 10:39:45 CST 2011
//----------------------------------------------------

package QueryManager.Parser;

import QueryManager.Lexer.*;
import QueryManager.Parser.Absyn.*;

/**
 * CUP v0.10k generated parser.
 * 
 * @version Tue Aug 23 10:39:45 CST 2011
 */
public class Grm extends java_cup.runtime.lr_parser {

	/** Default constructor. */
	public Grm() {
		super();
	}

	/** Constructor which sets the default scanner. */
	public Grm(java_cup.runtime.Scanner s) {
		super(s);
	}

	/** Production table. */
	protected static final short _production_table[][] = unpackFromStrings(new String[] { "\000\234\000\002\002\004\000\002\003\003\000\002\053"
			+ "\003\000\002\053\004\000\002\052\003\000\002\052\003"
			+ "\000\002\052\003\000\002\052\003\000\002\052\003\000"
			+ "\002\052\003\000\002\052\003\000\002\020\003\000\002"
			+ "\020\003\000\002\020\003\000\002\022\007\000\002\023"
			+ "\006\000\002\021\011\000\002\015\003\000\002\015\005"
			+ "\000\002\014\004\000\002\014\005\000\002\013\003\000"
			+ "\002\013\003\000\002\013\003\000\002\013\005\000\002"
			+ "\013\004\000\002\036\003\000\002\036\005\000\002\057"
			+ "\003\000\002\057\003\000\002\057\003\000\002\057\003"
			+ "\000\002\057\003\000\002\057\003\000\002\024\003\000"
			+ "\002\024\003\000\002\024\003\000\002\024\006\000\002"
			+ "\024\010\000\002\024\006\000\002\024\003\000\002\024"
			+ "\006\000\002\024\003\000\002\050\003\000\002\050\003"
			+ "\000\002\050\005\000\002\051\007\000\002\051\010\000"
			+ "\002\051\007\000\002\051\010\000\002\047\005\000\002"
			+ "\047\006\000\002\046\003\000\002\046\005\000\002\045"
			+ "\003\000\002\045\005\000\002\006\003\000\002\006\003"
			+ "\000\002\006\005\000\002\007\003\000\002\007\003\000"
			+ "\002\007\003\000\002\005\005\000\002\005\005\000\002"
			+ "\005\005\000\002\005\005\000\002\004\006\000\002\004"
			+ "\006\000\002\004\006\000\002\004\006\000\002\004\006"
			+ "\000\002\017\003\000\002\017\005\000\002\030\003\000"
			+ "\002\030\005\000\002\027\005\000\002\027\003\000\002"
			+ "\027\005\000\002\027\003\000\002\064\002\000\002\064"
			+ "\003\000\002\064\003\000\002\064\004\000\002\064\004"
			+ "\000\002\064\005\000\002\064\005\000\002\064\006\000"
			+ "\002\062\003\000\002\062\003\000\002\062\004\000\002"
			+ "\062\005\000\002\063\003\000\002\063\003\000\002\063"
			+ "\003\000\002\061\005\000\002\061\005\000\002\011\005"
			+ "\000\002\011\005\000\002\011\005\000\002\011\005\000"
			+ "\002\011\005\000\002\011\005\000\002\012\003\000\002"
			+ "\012\004\000\002\012\004\000\002\012\003\000\002\012"
			+ "\004\000\002\012\004\000\002\012\003\000\002\041\005"
			+ "\000\002\037\005\000\002\037\006\000\002\031\005\000"
			+ "\002\031\004\000\002\016\003\000\002\016\005\000\002"
			+ "\034\004\000\002\032\003\000\002\032\003\000\002\032"
			+ "\004\000\002\032\005\000\002\033\005\000\002\033\005"
			+ "\000\002\035\005\000\002\035\005\000\002\035\005\000"
			+ "\002\035\005\000\002\035\005\000\002\035\005\000\002"
			+ "\035\005\000\002\035\005\000\002\035\005\000\002\035"
			+ "\005\000\002\035\005\000\002\035\005\000\002\044\004"
			+ "\000\002\043\003\000\002\043\005\000\002\042\003\000"
			+ "\002\042\004\000\002\042\004\000\002\040\010\000\002"
			+ "\040\013\000\002\060\003\000\002\060\005\000\002\025"
			+ "\007\000\002\056\010\000\002\055\003\000\002\055\005"
			+ "\000\002\054\005\000\002\026\004\000\002\026\004\000"
			+ "\002\026\004\000\002\010\007\000\002\010\007\000\002"
			+ "\010\006" });

	/** Access to production table. */
	public short[][] production_table() {
		return _production_table;
	}

	/** Parse-action table. */
	protected static final short[][] _action_table = unpackFromStrings(new String[] { "\000\u0135\000\032\013\004\023\011\024\026\025\025\031"
			+ "\033\036\006\037\023\040\035\047\005\063\007\071\034"
			+ "\107\014\001\002\000\004\004\u012f\001\002\000\004\004"
			+ "\u0120\001\002\000\004\004\037\001\002\000\040\004\065"
			+ "\005\071\006\074\007\056\020\246\026\253\033\244\041"
			+ "\073\052\250\053\247\056\075\065\240\066\062\077\241"
			+ "\107\243\001\002\000\004\002\000\001\002\000\004\004"
			+ "\230\001\002\000\034\002\ufff5\013\ufff5\023\ufff5\024\ufff5"
			+ "\025\ufff5\031\ufff5\036\ufff5\037\ufff5\040\ufff5\047\ufff5\063"
			+ "\ufff5\071\ufff5\107\ufff5\001\002\000\004\002\227\001\002"
			+ "\000\006\063\007\107\014\001\002\000\034\002\ufff4\013"
			+ "\ufff4\023\ufff4\024\ufff4\025\ufff4\031\ufff4\036\ufff4\037\ufff4"
			+ "\040\ufff4\047\ufff4\063\ufff4\071\ufff4\107\ufff4\001\002\000"
			+ "\072\002\uffd6\013\uffd6\014\uffd6\016\uffd6\023\uffd6\024\uffd6"
			+ "\025\uffd6\031\uffd6\036\uffd6\037\uffd6\040\uffd6\044\uffd6\047"
			+ "\uffd6\060\uffd6\061\uffd6\063\uffd6\067\uffd6\071\uffd6\074\uffd6"
			+ "\101\uffd6\102\uffd6\103\uffd6\104\uffd6\105\uffd6\106\uffd6\107"
			+ "\uffd6\110\uffd6\112\uffd6\001\002\000\034\002\ufff6\013\ufff6"
			+ "\023\ufff6\024\ufff6\025\ufff6\031\ufff6\036\ufff6\037\ufff6\040"
			+ "\ufff6\047\ufff6\063\ufff6\071\ufff6\107\ufff6\001\002\000\034"
			+ "\002\ufff9\013\ufff9\023\ufff9\024\ufff9\025\ufff9\031\ufff9\036"
			+ "\ufff9\037\ufff9\040\ufff9\047\ufff9\063\ufff9\071\ufff9\107\ufff9"
			+ "\001\002\000\034\002\uffff\013\004\023\011\024\026\025"
			+ "\025\031\033\036\006\037\023\040\035\047\005\063\007"
			+ "\071\034\107\014\001\002\000\034\002\ufffd\013\ufffd\023"
			+ "\ufffd\024\ufffd\025\ufffd\031\ufffd\036\ufffd\037\ufffd\040\ufffd"
			+ "\047\ufffd\063\ufffd\071\ufffd\107\ufffd\001\002\000\004\004"
			+ "\037\001\002\000\036\002\ufffc\013\ufffc\023\ufffc\024\ufffc"
			+ "\025\ufffc\031\ufffc\036\ufffc\037\ufffc\040\ufffc\047\ufffc\063"
			+ "\ufffc\067\115\071\ufffc\107\ufffc\001\002\000\004\004\221"
			+ "\001\002\000\004\004\155\001\002\000\072\002\uffd5\013"
			+ "\uffd5\014\uffd5\016\uffd5\023\uffd5\024\uffd5\025\uffd5\031\uffd5"
			+ "\036\uffd5\037\uffd5\040\uffd5\044\uffd5\047\uffd5\060\uffd5\061"
			+ "\uffd5\063\uffd5\067\uffd5\071\uffd5\074\uffd5\101\uffd5\102\uffd5"
			+ "\103\uffd5\104\uffd5\105\uffd5\106\uffd5\107\uffd5\110\uffd5\112"
			+ "\uffd5\001\002\000\034\002\ufff7\013\ufff7\023\ufff7\024\ufff7"
			+ "\025\ufff7\031\ufff7\036\ufff7\037\ufff7\040\ufff7\047\ufff7\063"
			+ "\ufff7\071\ufff7\107\ufff7\001\002\000\034\002\ufff8\013\ufff8"
			+ "\023\ufff8\024\ufff8\025\ufff8\031\ufff8\036\ufff8\037\ufff8\040"
			+ "\ufff8\047\ufff8\063\ufff8\071\ufff8\107\ufff8\001\002\000\034"
			+ "\002\ufffb\013\ufffb\023\ufffb\024\ufffb\025\ufffb\031\ufffb\036"
			+ "\ufffb\037\ufffb\040\ufffb\047\ufffb\063\ufffb\071\ufffb\107\ufffb"
			+ "\001\002\000\004\043\151\001\002\000\004\004\043\001"
			+ "\002\000\004\004\037\001\002\000\034\002\ufffa\013\ufffa"
			+ "\023\ufffa\024\ufffa\025\ufffa\031\ufffa\036\ufffa\037\ufffa\040"
			+ "\ufffa\047\ufffa\063\ufffa\071\ufffa\107\ufffa\001\002\000\040"
			+ "\002\uffe7\013\uffe7\023\uffe7\024\uffe7\025\uffe7\031\uffe7\036"
			+ "\uffe7\037\uffe7\040\uffe7\047\uffe7\063\uffe7\071\uffe7\107\uffe7"
			+ "\110\uffe7\112\041\001\002\000\034\002\uff69\013\uff69\023"
			+ "\uff69\024\uff69\025\uff69\031\uff69\036\uff69\037\uff69\040\uff69"
			+ "\047\uff69\063\uff69\071\uff69\107\uff69\001\002\000\004\004"
			+ "\037\001\002\000\036\002\uffe6\013\uffe6\023\uffe6\024\uffe6"
			+ "\025\uffe6\031\uffe6\036\uffe6\037\uffe6\040\uffe6\047\uffe6\063"
			+ "\uffe6\071\uffe6\107\uffe6\110\uffe6\001\002\000\004\064\044"
			+ "\001\002\000\004\004\045\001\002\000\004\103\147\001"
			+ "\002\000\004\074\052\001\002\000\006\074\uff6e\112\050"
			+ "\001\002\000\004\004\045\001\002\000\004\074\uff6d\001"
			+ "\002\000\032\004\065\005\071\006\074\007\056\011\057"
			+ "\015\070\041\073\054\061\056\075\063\007\066\062\107"
			+ "\063\001\002\000\072\002\uffa6\013\uffa6\014\uffa6\016\uffa6"
			+ "\023\uffa6\024\uffa6\025\uffa6\031\uffa6\036\uffa6\037\uffa6\040"
			+ "\uffa6\044\uffa6\047\uffa6\060\uffa6\061\uffa6\063\uffa6\067\uffa6"
			+ "\071\uffa6\074\uffa6\101\uffa6\102\uffa6\103\uffa6\104\uffa6\105"
			+ "\uffa6\106\uffa6\107\uffa6\110\uffa6\112\uffa6\001\002\000\072"
			+ "\002\uffaa\013\uffaa\014\uffaa\016\uffaa\023\uffaa\024\uffaa\025"
			+ "\uffaa\031\uffaa\036\uffaa\037\uffaa\040\uffaa\044\uffaa\047\uffaa"
			+ "\060\uffaa\061\uffaa\063\uffaa\067\uffaa\071\uffaa\074\uffaa\101"
			+ "\uffaa\102\uffaa\103\uffaa\104\uffaa\105\uffaa\106\uffaa\107\uffaa"
			+ "\110\uffaa\112\uffaa\001\002\000\024\046\141\051\140\054"
			+ "\142\101\uff9b\102\uff9b\103\uff9b\104\uff9b\105\uff9b\106\uff9b"
			+ "\001\002\000\104\002\uffe4\013\uffe4\014\uffe4\016\uffe4\023"
			+ "\uffe4\024\uffe4\025\uffe4\031\uffe4\036\uffe4\037\uffe4\040\uffe4"
			+ "\043\uffe4\044\uffe4\047\uffe4\060\uffe4\061\uffe4\063\uffe4\067"
			+ "\uffe4\071\uffe4\074\uffe4\075\uffe4\076\uffe4\077\uffe4\100\uffe4"
			+ "\101\uffe4\102\uffe4\103\uffe4\104\uffe4\105\uffe4\106\uffe4\107"
			+ "\uffe4\110\uffe4\112\uffe4\001\002\000\010\004\065\063\007"
			+ "\107\014\001\002\000\072\002\uffa4\013\uffa4\014\uffa4\016"
			+ "\uffa4\023\uffa4\024\uffa4\025\uffa4\031\uffa4\036\uffa4\037\uffa4"
			+ "\040\uffa4\044\uffa4\047\uffa4\060\uffa4\061\uffa4\063\uffa4\067"
			+ "\uffa4\071\uffa4\074\uffa4\101\uffa4\102\uffa4\103\uffa4\104\uffa4"
			+ "\105\uffa4\106\uffa4\107\uffa4\110\uffa4\112\uffa4\001\002\000"
			+ "\032\004\065\005\071\006\074\007\056\011\057\015\070"
			+ "\041\073\054\061\056\075\063\007\066\062\107\063\001"
			+ "\002\000\104\002\uffe2\013\uffe2\014\uffe2\016\uffe2\023\uffe2"
			+ "\024\uffe2\025\uffe2\031\uffe2\036\uffe2\037\uffe2\040\uffe2\043"
			+ "\uffe2\044\uffe2\047\uffe2\060\uffe2\061\uffe2\063\uffe2\067\uffe2"
			+ "\071\uffe2\074\uffe2\075\uffe2\076\uffe2\077\uffe2\100\uffe2\101"
			+ "\uffe2\102\uffe2\103\uffe2\104\uffe2\105\uffe2\106\uffe2\107\uffe2"
			+ "\110\uffe2\112\uffe2\001\002\000\032\004\065\005\071\006"
			+ "\074\007\056\011\057\015\070\041\073\054\061\056\075"
			+ "\063\007\066\062\107\063\001\002\000\040\002\uff6f\013"
			+ "\uff6f\014\125\023\uff6f\024\uff6f\025\uff6f\031\uff6f\036\uff6f"
			+ "\037\uff6f\040\uff6f\047\uff6f\060\126\063\uff6f\071\uff6f\107"
			+ "\uff6f\001\002\000\122\002\uffba\013\uffba\014\uffba\016\uffba"
			+ "\017\uffba\023\uffba\024\uffba\025\uffba\031\uffba\032\uffba\036"
			+ "\uffba\037\uffba\040\uffba\043\uffba\044\uffba\045\uffba\046\uffba"
			+ "\047\uffba\051\uffba\054\uffba\060\uffba\061\uffba\063\uffba\067"
			+ "\uffba\071\uffba\074\uffba\075\uffba\076\uffba\077\uffba\100\uffba"
			+ "\101\uffba\102\uffba\103\uffba\104\uffba\105\uffba\106\uffba\107"
			+ "\uffba\110\uffba\111\123\112\uffba\001\002\000\072\002\uffa9"
			+ "\013\uffa9\014\uffa9\016\uffa9\023\uffa9\024\uffa9\025\uffa9\031"
			+ "\uffa9\036\uffa9\037\uffa9\040\uffa9\044\uffa9\047\uffa9\060\uffa9"
			+ "\061\uffa9\063\uffa9\067\uffa9\071\uffa9\074\uffa9\101\uffa9\102"
			+ "\uffa9\103\uffa9\104\uffa9\105\uffa9\106\uffa9\107\uffa9\110\uffa9"
			+ "\112\uffa9\001\002\000\072\002\uffa5\013\uffa5\014\uffa5\016"
			+ "\uffa5\023\uffa5\024\uffa5\025\uffa5\031\uffa5\036\uffa5\037\uffa5"
			+ "\040\uffa5\044\uffa5\047\uffa5\060\uffa5\061\uffa5\063\uffa5\067"
			+ "\uffa5\071\uffa5\074\uffa5\101\uffa5\102\uffa5\103\uffa5\104\uffa5"
			+ "\105\uffa5\106\uffa5\107\uffa5\110\uffa5\112\uffa5\001\002\000"
			+ "\010\004\065\063\007\107\014\001\002\000\104\002\uffe3"
			+ "\013\uffe3\014\uffe3\016\uffe3\023\uffe3\024\uffe3\025\uffe3\031"
			+ "\uffe3\036\uffe3\037\uffe3\040\uffe3\043\uffe3\044\uffe3\047\uffe3"
			+ "\060\uffe3\061\uffe3\063\uffe3\067\uffe3\071\uffe3\074\uffe3\075"
			+ "\uffe3\076\uffe3\077\uffe3\100\uffe3\101\uffe3\102\uffe3\103\uffe3"
			+ "\104\uffe3\105\uffe3\106\uffe3\107\uffe3\110\uffe3\112\uffe3\001"
			+ "\002\000\072\002\uff98\013\uff98\014\uff98\016\uff98\023\uff98"
			+ "\024\uff98\025\uff98\031\uff98\036\uff98\037\uff98\040\uff98\044"
			+ "\uff98\047\uff98\060\uff98\061\uff98\063\uff98\067\115\071\uff98"
			+ "\074\uff98\101\uff98\102\uff98\103\uff98\104\uff98\105\uff98\106"
			+ "\uff98\107\uff98\110\uff98\112\uff98\001\002\000\104\002\uffe1"
			+ "\013\uffe1\014\uffe1\016\uffe1\023\uffe1\024\uffe1\025\uffe1\031"
			+ "\uffe1\036\uffe1\037\uffe1\040\uffe1\043\uffe1\044\uffe1\047\uffe1"
			+ "\060\uffe1\061\uffe1\063\uffe1\067\uffe1\071\uffe1\074\uffe1\075"
			+ "\uffe1\076\uffe1\077\uffe1\100\uffe1\101\uffe1\102\uffe1\103\uffe1"
			+ "\104\uffe1\105\uffe1\106\uffe1\107\uffe1\110\uffe1\112\uffe1\001"
			+ "\002\000\104\002\uffe5\013\uffe5\014\uffe5\016\uffe5\023\uffe5"
			+ "\024\uffe5\025\uffe5\031\uffe5\036\uffe5\037\uffe5\040\uffe5\043"
			+ "\uffe5\044\uffe5\047\uffe5\060\uffe5\061\uffe5\063\uffe5\067\uffe5"
			+ "\071\uffe5\074\uffe5\075\uffe5\076\uffe5\077\uffe5\100\uffe5\101"
			+ "\uffe5\102\uffe5\103\uffe5\104\uffe5\105\uffe5\106\uffe5\107\uffe5"
			+ "\110\uffe5\112\uffe5\001\002\000\104\002\uffe0\013\uffe0\014"
			+ "\uffe0\016\uffe0\023\uffe0\024\uffe0\025\uffe0\031\uffe0\036\uffe0"
			+ "\037\uffe0\040\uffe0\043\uffe0\044\uffe0\047\uffe0\060\uffe0\061"
			+ "\uffe0\063\uffe0\067\uffe0\071\uffe0\074\uffe0\075\uffe0\076\uffe0"
			+ "\077\uffe0\100\uffe0\101\uffe0\102\uffe0\103\uffe0\104\uffe0\105"
			+ "\uffe0\106\uffe0\107\uffe0\110\uffe0\112\uffe0\001\002\000\072"
			+ "\002\uff95\013\uff95\014\uff95\016\uff95\023\uff95\024\uff95\025"
			+ "\uff95\031\uff95\036\uff95\037\uff95\040\uff95\044\uff95\047\uff95"
			+ "\060\uff95\061\uff95\063\uff95\067\uff95\071\uff95\074\uff95\101"
			+ "\uff95\102\uff95\103\uff95\104\uff95\105\uff95\106\uff95\107\uff95"
			+ "\110\uff95\112\uff95\001\002\000\016\101\102\102\101\103"
			+ "\100\104\104\105\103\106\105\001\002\000\030\004\065"
			+ "\005\071\006\074\007\056\011\057\015\070\041\073\056"
			+ "\075\063\007\066\062\107\014\001\002\000\030\004\065"
			+ "\005\071\006\074\007\056\011\057\015\070\041\073\056"
			+ "\075\063\007\066\062\107\014\001\002\000\030\004\065"
			+ "\005\071\006\074\007\056\011\057\015\070\041\073\056"
			+ "\075\063\007\066\062\107\014\001\002\000\030\004\065"
			+ "\005\071\006\074\007\056\011\057\015\070\041\073\056"
			+ "\075\063\007\066\062\107\014\001\002\000\030\004\065"
			+ "\005\071\006\074\007\056\011\057\015\070\041\073\056"
			+ "\075\063\007\066\062\107\014\001\002\000\030\004\065"
			+ "\005\071\006\074\007\056\011\057\015\070\041\073\056"
			+ "\075\063\007\066\062\107\014\001\002\000\072\002\uff9b"
			+ "\013\uff9b\014\uff9b\016\uff9b\023\uff9b\024\uff9b\025\uff9b\031"
			+ "\uff9b\036\uff9b\037\uff9b\040\uff9b\044\uff9b\047\uff9b\060\uff9b"
			+ "\061\uff9b\063\uff9b\067\uff9b\071\uff9b\074\uff9b\101\uff9b\102"
			+ "\uff9b\103\uff9b\104\uff9b\105\uff9b\106\uff9b\107\uff9b\110\uff9b"
			+ "\112\uff9b\001\002\000\072\002\uffa0\013\uffa0\014\uffa0\016"
			+ "\uffa0\023\uffa0\024\uffa0\025\uffa0\031\uffa0\036\uffa0\037\uffa0"
			+ "\040\uffa0\044\uffa0\047\uffa0\060\uffa0\061\uffa0\063\uffa0\067"
			+ "\uffa0\071\uffa0\074\uffa0\101\uffa0\102\uffa0\103\uffa0\104\uffa0"
			+ "\105\uffa0\106\uffa0\107\uffa0\110\uffa0\112\uffa0\001\002\000"
			+ "\072\002\uff9e\013\uff9e\014\uff9e\016\uff9e\023\uff9e\024\uff9e"
			+ "\025\uff9e\031\uff9e\036\uff9e\037\uff9e\040\uff9e\044\uff9e\047"
			+ "\uff9e\060\uff9e\061\uff9e\063\uff9e\067\uff9e\071\uff9e\074\uff9e"
			+ "\101\uff9e\102\uff9e\103\uff9e\104\uff9e\105\uff9e\106\uff9e\107"
			+ "\uff9e\110\uff9e\112\uff9e\001\002\000\072\002\uff9c\013\uff9c"
			+ "\014\uff9c\016\uff9c\023\uff9c\024\uff9c\025\uff9c\031\uff9c\036"
			+ "\uff9c\037\uff9c\040\uff9c\044\uff9c\047\uff9c\060\uff9c\061\uff9c"
			+ "\063\uff9c\067\uff9c\071\uff9c\074\uff9c\101\uff9c\102\uff9c\103"
			+ "\uff9c\104\uff9c\105\uff9c\106\uff9c\107\uff9c\110\uff9c\112\uff9c"
			+ "\001\002\000\072\002\uff9f\013\uff9f\014\uff9f\016\uff9f\023"
			+ "\uff9f\024\uff9f\025\uff9f\031\uff9f\036\uff9f\037\uff9f\040\uff9f"
			+ "\044\uff9f\047\uff9f\060\uff9f\061\uff9f\063\uff9f\067\uff9f\071"
			+ "\uff9f\074\uff9f\101\uff9f\102\uff9f\103\uff9f\104\uff9f\105\uff9f"
			+ "\106\uff9f\107\uff9f\110\uff9f\112\uff9f\001\002\000\072\002"
			+ "\uff9d\013\uff9d\014\uff9d\016\uff9d\023\uff9d\024\uff9d\025\uff9d"
			+ "\031\uff9d\036\uff9d\037\uff9d\040\uff9d\044\uff9d\047\uff9d\060"
			+ "\uff9d\061\uff9d\063\uff9d\067\uff9d\071\uff9d\074\uff9d\101\uff9d"
			+ "\102\uff9d\103\uff9d\104\uff9d\105\uff9d\106\uff9d\107\uff9d\110"
			+ "\uff9d\112\uff9d\001\002\000\072\002\uffa1\013\uffa1\014\uffa1"
			+ "\016\uffa1\023\uffa1\024\uffa1\025\uffa1\031\uffa1\036\uffa1\037"
			+ "\uffa1\040\uffa1\044\uffa1\047\uffa1\060\uffa1\061\uffa1\063\uffa1"
			+ "\067\uffa1\071\uffa1\074\uffa1\101\uffa1\102\uffa1\103\uffa1\104"
			+ "\uffa1\105\uffa1\106\uffa1\107\uffa1\110\uffa1\112\uffa1\001\002"
			+ "\000\010\011\116\063\007\107\014\001\002\000\006\063"
			+ "\007\107\014\001\002\000\072\002\uffcf\013\uffcf\014\uffcf"
			+ "\016\uffcf\023\uffcf\024\uffcf\025\uffcf\031\uffcf\036\uffcf\037"
			+ "\uffcf\040\uffcf\044\uffcf\047\uffcf\060\uffcf\061\uffcf\063\uffcf"
			+ "\067\uffcf\071\uffcf\074\uffcf\101\uffcf\102\uffcf\103\uffcf\104"
			+ "\uffcf\105\uffcf\106\uffcf\107\uffcf\110\uffcf\112\uffcf\001\002"
			+ "\000\072\002\uffce\013\uffce\014\uffce\016\uffce\023\uffce\024"
			+ "\uffce\025\uffce\031\uffce\036\uffce\037\uffce\040\uffce\044\uffce"
			+ "\047\uffce\060\uffce\061\uffce\063\uffce\067\115\071\uffce\074"
			+ "\uffce\101\uffce\102\uffce\103\uffce\104\uffce\105\uffce\106\uffce"
			+ "\107\uffce\110\uffce\112\uffce\001\002\000\072\002\uff9a\013"
			+ "\uff9a\014\uff9a\016\uff9a\023\uff9a\024\uff9a\025\uff9a\031\uff9a"
			+ "\036\uff9a\037\uff9a\040\uff9a\044\uff9a\047\uff9a\060\uff9a\061"
			+ "\uff9a\063\uff9a\067\uff9a\071\uff9a\074\uff9a\101\uff9a\102\uff9a"
			+ "\103\uff9a\104\uff9a\105\uff9a\106\uff9a\107\uff9a\110\uff9a\112"
			+ "\uff9a\001\002\000\072\002\uff97\013\uff97\014\uff97\016\uff97"
			+ "\023\uff97\024\uff97\025\uff97\031\uff97\036\uff97\037\uff97\040"
			+ "\uff97\044\uff97\047\uff97\060\uff97\061\uff97\063\uff97\067\115"
			+ "\071\uff97\074\uff97\101\uff97\102\uff97\103\uff97\104\uff97\105"
			+ "\uff97\106\uff97\107\uff97\110\uff97\112\uff97\001\002\000\004"
			+ "\004\124\001\002\000\120\002\uffb9\013\uffb9\014\uffb9\016"
			+ "\uffb9\017\uffb9\023\uffb9\024\uffb9\025\uffb9\031\uffb9\032\uffb9"
			+ "\036\uffb9\037\uffb9\040\uffb9\043\uffb9\044\uffb9\045\uffb9\046"
			+ "\uffb9\047\uffb9\051\uffb9\054\uffb9\060\uffb9\061\uffb9\063\uffb9"
			+ "\067\uffb9\071\uffb9\074\uffb9\075\uffb9\076\uffb9\077\uffb9\100"
			+ "\uffb9\101\uffb9\102\uffb9\103\uffb9\104\uffb9\105\uffb9\106\uffb9"
			+ "\107\uffb9\110\uffb9\112\uffb9\001\002\000\032\004\065\005"
			+ "\071\006\074\007\056\011\057\015\070\041\073\054\061"
			+ "\056\075\063\007\066\062\107\063\001\002\000\032\004"
			+ "\065\005\071\006\074\007\056\011\057\015\070\041\073"
			+ "\054\061\056\075\063\007\066\062\107\063\001\002\000"
			+ "\072\002\uffa3\013\uffa3\014\125\016\uffa3\023\uffa3\024\uffa3"
			+ "\025\uffa3\031\uffa3\036\uffa3\037\uffa3\040\uffa3\044\uffa3\047"
			+ "\uffa3\060\uffa3\061\uffa3\063\uffa3\067\uffa3\071\uffa3\074\uffa3"
			+ "\101\uffa3\102\uffa3\103\uffa3\104\uffa3\105\uffa3\106\uffa3\107"
			+ "\uffa3\110\uffa3\112\uffa3\001\002\000\072\002\uffa2\013\uffa2"
			+ "\014\uffa2\016\uffa2\023\uffa2\024\uffa2\025\uffa2\031\uffa2\036"
			+ "\uffa2\037\uffa2\040\uffa2\044\uffa2\047\uffa2\060\uffa2\061\uffa2"
			+ "\063\uffa2\067\uffa2\071\uffa2\074\uffa2\101\uffa2\102\uffa2\103"
			+ "\uffa2\104\uffa2\105\uffa2\106\uffa2\107\uffa2\110\uffa2\112\uffa2"
			+ "\001\002\000\010\014\125\060\126\110\134\001\002\000"
			+ "\022\067\115\101\uff98\102\uff98\103\uff98\104\uff98\105\uff98"
			+ "\106\uff98\110\133\001\002\000\072\002\uffd4\013\uffd4\014"
			+ "\uffd4\016\uffd4\023\uffd4\024\uffd4\025\uffd4\031\uffd4\036\uffd4"
			+ "\037\uffd4\040\uffd4\044\uffd4\047\uffd4\060\uffd4\061\uffd4\063"
			+ "\uffd4\067\uffd4\071\uffd4\074\uffd4\101\uffd4\102\uffd4\103\uffd4"
			+ "\104\uffd4\105\uffd4\106\uffd4\107\uffd4\110\uffd4\112\uffd4\001"
			+ "\002\000\072\002\uffa7\013\uffa7\014\uffa7\016\uffa7\023\uffa7"
			+ "\024\uffa7\025\uffa7\031\uffa7\036\uffa7\037\uffa7\040\uffa7\044"
			+ "\uffa7\047\uffa7\060\uffa7\061\uffa7\063\uffa7\067\uffa7\071\uffa7"
			+ "\074\uffa7\101\uffa7\102\uffa7\103\uffa7\104\uffa7\105\uffa7\106"
			+ "\uffa7\107\uffa7\110\uffa7\112\uffa7\001\002\000\072\002\uffa8"
			+ "\013\uffa8\014\125\016\uffa8\023\uffa8\024\uffa8\025\uffa8\031"
			+ "\uffa8\036\uffa8\037\uffa8\040\uffa8\044\uffa8\047\uffa8\060\126"
			+ "\061\uffa8\063\uffa8\067\uffa8\071\uffa8\074\uffa8\101\uffa8\102"
			+ "\uffa8\103\uffa8\104\uffa8\105\uffa8\106\uffa8\107\uffa8\110\uffa8"
			+ "\112\uffa8\001\002\000\072\002\uff99\013\uff99\014\uff99\016"
			+ "\uff99\023\uff99\024\uff99\025\uff99\031\uff99\036\uff99\037\uff99"
			+ "\040\uff99\044\uff99\047\uff99\060\uff99\061\uff99\063\uff99\067"
			+ "\uff99\071\uff99\074\uff99\101\uff99\102\uff99\103\uff99\104\uff99"
			+ "\105\uff99\106\uff99\107\uff99\110\uff99\112\uff99\001\002\000"
			+ "\072\002\uff96\013\uff96\014\uff96\016\uff96\023\uff96\024\uff96"
			+ "\025\uff96\031\uff96\036\uff96\037\uff96\040\uff96\044\uff96\047"
			+ "\uff96\060\uff96\061\uff96\063\uff96\067\115\071\uff96\074\uff96"
			+ "\101\uff96\102\uff96\103\uff96\104\uff96\105\uff96\106\uff96\107"
			+ "\uff96\110\uff96\112\uff96\001\002\000\004\005\146\001\002"
			+ "\000\006\063\007\107\014\001\002\000\004\046\143\001"
			+ "\002\000\006\063\007\107\014\001\002\000\072\002\uff92"
			+ "\013\uff92\014\uff92\016\uff92\023\uff92\024\uff92\025\uff92\031"
			+ "\uff92\036\uff92\037\uff92\040\uff92\044\uff92\047\uff92\060\uff92"
			+ "\061\uff92\063\uff92\067\115\071\uff92\074\uff92\101\uff92\102"
			+ "\uff92\103\uff92\104\uff92\105\uff92\106\uff92\107\uff92\110\uff92"
			+ "\112\uff92\001\002\000\072\002\uff93\013\uff93\014\uff93\016"
			+ "\uff93\023\uff93\024\uff93\025\uff93\031\uff93\036\uff93\037\uff93"
			+ "\040\uff93\044\uff93\047\uff93\060\uff93\061\uff93\063\uff93\067"
			+ "\115\071\uff93\074\uff93\101\uff93\102\uff93\103\uff93\104\uff93"
			+ "\105\uff93\106\uff93\107\uff93\110\uff93\112\uff93\001\002\000"
			+ "\072\002\uff94\013\uff94\014\uff94\016\uff94\023\uff94\024\uff94"
			+ "\025\uff94\031\uff94\036\uff94\037\uff94\040\uff94\044\uff94\047"
			+ "\uff94\060\uff94\061\uff94\063\uff94\067\uff94\071\uff94\074\uff94"
			+ "\101\uff94\102\uff94\103\uff94\104\uff94\105\uff94\106\uff94\107"
			+ "\uff94\110\uff94\112\uff94\001\002\000\016\005\071\006\074"
			+ "\007\056\041\073\056\075\066\062\001\002\000\006\074"
			+ "\uff6c\112\uff6c\001\002\000\004\004\152\001\002\000\004"
			+ "\074\153\001\002\000\032\004\065\005\071\006\074\007"
			+ "\056\011\057\015\070\041\073\054\061\056\075\063\007"
			+ "\066\062\107\063\001\002\000\040\002\uff70\013\uff70\014"
			+ "\125\023\uff70\024\uff70\025\uff70\031\uff70\036\uff70\037\uff70"
			+ "\040\uff70\047\uff70\060\126\063\uff70\071\uff70\107\uff70\001"
			+ "\002\000\004\107\156\001\002\000\004\004\157\001\002"
			+ "\000\020\021\166\022\173\027\172\034\165\042\167\050"
			+ "\174\073\170\001\002\000\004\110\164\001\002\000\006"
			+ "\110\ufff0\112\162\001\002\000\004\004\157\001\002\000"
			+ "\004\110\uffef\001\002\000\034\002\ufff3\013\ufff3\023\ufff3"
			+ "\024\ufff3\025\ufff3\031\ufff3\036\ufff3\037\ufff3\040\ufff3\047"
			+ "\ufff3\063\ufff3\071\ufff3\107\ufff3\001\002\000\050\002\uffdd"
			+ "\013\uffdd\023\uffdd\024\uffdd\025\uffdd\030\uffdd\031\uffdd\036"
			+ "\uffdd\037\uffdd\040\uffdd\047\uffdd\055\uffdd\062\uffdd\063\uffdd"
			+ "\070\uffdd\071\uffdd\107\uffdd\110\uffdd\112\uffdd\001\002\000"
			+ "\050\002\uffd7\013\uffd7\023\uffd7\024\uffd7\025\uffd7\030\uffd7"
			+ "\031\uffd7\036\uffd7\037\uffd7\040\uffd7\047\uffd7\055\uffd7\062"
			+ "\uffd7\063\uffd7\070\uffd7\071\uffd7\107\uffd7\110\uffd7\112\uffd7"
			+ "\001\002\000\050\002\uffde\013\uffde\023\uffde\024\uffde\025"
			+ "\uffde\030\uffde\031\uffde\036\uffde\037\uffde\040\uffde\047\uffde"
			+ "\055\uffde\062\uffde\063\uffde\070\uffde\071\uffde\107\uffde\110"
			+ "\uffde\112\uffde\001\002\000\004\107\216\001\002\000\016"
			+ "\030\206\055\207\062\212\070\211\110\uffee\112\uffee\001"
			+ "\002\000\004\107\200\001\002\000\050\002\uffd9\013\uffd9"
			+ "\023\uffd9\024\uffd9\025\uffd9\030\uffd9\031\uffd9\036\uffd9\037"
			+ "\uffd9\040\uffd9\047\uffd9\055\uffd9\062\uffd9\063\uffd9\070\uffd9"
			+ "\071\uffd9\107\175\110\uffd9\112\uffd9\001\002\000\050\002"
			+ "\uffdf\013\uffdf\023\uffdf\024\uffdf\025\uffdf\030\uffdf\031\uffdf"
			+ "\036\uffdf\037\uffdf\040\uffdf\047\uffdf\055\uffdf\062\uffdf\063"
			+ "\uffdf\070\uffdf\071\uffdf\107\uffdf\110\uffdf\112\uffdf\001\002"
			+ "\000\004\006\176\001\002\000\004\110\177\001\002\000"
			+ "\050\002\uffda\013\uffda\023\uffda\024\uffda\025\uffda\030\uffda"
			+ "\031\uffda\036\uffda\037\uffda\040\uffda\047\uffda\055\uffda\062"
			+ "\uffda\063\uffda\070\uffda\071\uffda\107\uffda\110\uffda\112\uffda"
			+ "\001\002\000\004\006\201\001\002\000\006\110\203\112"
			+ "\202\001\002\000\004\006\204\001\002\000\050\002\uffdc"
			+ "\013\uffdc\023\uffdc\024\uffdc\025\uffdc\030\uffdc\031\uffdc\036"
			+ "\uffdc\037\uffdc\040\uffdc\047\uffdc\055\uffdc\062\uffdc\063\uffdc"
			+ "\070\uffdc\071\uffdc\107\uffdc\110\uffdc\112\uffdc\001\002\000"
			+ "\004\110\205\001\002\000\050\002\uffdb\013\uffdb\023\uffdb"
			+ "\024\uffdb\025\uffdb\030\uffdb\031\uffdb\036\uffdb\037\uffdb\040"
			+ "\uffdb\047\uffdb\055\uffdb\062\uffdb\063\uffdb\070\uffdb\071\uffdb"
			+ "\107\uffdb\110\uffdb\112\uffdb\001\002\000\016\005\071\006"
			+ "\074\007\056\041\073\056\075\066\062\001\002\000\010"
			+ "\030\213\110\uffea\112\uffea\001\002\000\006\110\uffed\112"
			+ "\uffed\001\002\000\006\110\uffeb\112\uffeb\001\002\000\006"
			+ "\110\uffec\112\uffec\001\002\000\016\005\071\006\074\007"
			+ "\056\041\073\056\075\066\062\001\002\000\006\110\uffe9"
			+ "\112\uffe9\001\002\000\006\110\uffe8\112\uffe8\001\002\000"
			+ "\004\006\217\001\002\000\004\110\220\001\002\000\050"
			+ "\002\uffd8\013\uffd8\023\uffd8\024\uffd8\025\uffd8\030\uffd8\031"
			+ "\uffd8\036\uffd8\037\uffd8\040\uffd8\047\uffd8\055\uffd8\062\uffd8"
			+ "\063\uffd8\070\uffd8\071\uffd8\107\uffd8\110\uffd8\112\uffd8\001"
			+ "\002\000\004\016\222\001\002\000\006\063\007\107\014"
			+ "\001\002\000\036\002\ufff2\013\ufff2\023\ufff2\024\ufff2\025"
			+ "\ufff2\031\ufff2\036\ufff2\037\ufff2\040\ufff2\047\ufff2\063\ufff2"
			+ "\067\115\071\ufff2\107\ufff2\001\002\000\034\002\uff6a\013"
			+ "\uff6a\023\uff6a\024\uff6a\025\uff6a\031\uff6a\036\uff6a\037\uff6a"
			+ "\040\uff6a\047\uff6a\063\uff6a\071\uff6a\107\uff6a\001\002\000"
			+ "\004\002\ufffe\001\002\000\006\067\115\110\133\001\002"
			+ "\000\004\002\001\001\002\000\004\057\231\001\002\000"
			+ "\004\004\232\001\002\000\004\107\233\001\002\000\004"
			+ "\004\037\001\002\000\004\110\235\001\002\000\034\002"
			+ "\ufff1\013\ufff1\023\ufff1\024\ufff1\025\ufff1\031\ufff1\036\ufff1"
			+ "\037\ufff1\040\ufff1\047\ufff1\063\ufff1\071\ufff1\107\ufff1\001"
			+ "\002\000\022\016\uffc8\043\uffc8\075\uffc8\076\uffc8\077\uffc8"
			+ "\100\uffc8\110\uffc8\112\uffc8\001\002\000\022\016\uffc6\043"
			+ "\uffc6\075\uffc6\076\uffc6\077\uffc6\100\uffc6\110\uffc6\112\uffc6"
			+ "\001\002\000\004\107\u011c\001\002\000\004\043\u0119\001"
			+ "\002\000\022\016\uffc9\043\uffc9\075\uffc9\076\uffc9\077\uffc9"
			+ "\100\uffc9\110\uffc9\112\uffc9\001\002\000\034\004\065\005"
			+ "\071\006\074\007\056\020\246\026\253\041\073\052\250"
			+ "\053\247\056\075\065\240\066\062\107\243\001\002\000"
			+ "\036\004\065\005\071\006\074\007\056\020\246\026\253"
			+ "\041\073\052\250\053\247\056\075\065\240\066\062\077"
			+ "\u010f\107\243\001\002\000\022\016\uffc4\043\uffc4\075\uffc4"
			+ "\076\uffc4\077\uffc4\100\uffc4\110\uffc4\112\uffc4\001\002\000"
			+ "\004\107\u010c\001\002\000\004\107\u0109\001\002\000\004"
			+ "\107\u0106\001\002\000\020\016\375\043\uffcb\075\376\076"
			+ "\377\077\374\100\u0100\112\uffcb\001\002\000\006\043\uffcd"
			+ "\112\372\001\002\000\004\107\367\001\002\000\022\016"
			+ "\uffc5\043\uffc5\075\uffc5\076\uffc5\077\uffc5\100\uffc5\110\uffc5"
			+ "\112\uffc5\001\002\000\004\043\256\001\002\000\010\004"
			+ "\257\063\007\107\014\001\002\000\072\002\uffb5\013\uffb5"
			+ "\014\uffb5\016\365\023\uffb5\024\uffb5\025\uffb5\031\uffb5\036"
			+ "\uffb5\037\uffb5\040\uffb5\044\uffb5\047\uffb5\060\uffb5\061\uffb5"
			+ "\063\uffb5\067\uffb5\071\uffb5\074\uffb5\101\uffb5\102\uffb5\103"
			+ "\uffb5\104\uffb5\105\uffb5\106\uffb5\107\uffb5\110\uffb5\112\uffb5"
			+ "\001\002\000\072\002\uffb2\013\uffb2\014\uffb2\016\uffb2\023"
			+ "\uffb2\024\uffb2\025\uffb2\031\uffb2\036\uffb2\037\uffb2\040\uffb2"
			+ "\044\271\047\uffb2\060\uffb2\061\267\063\uffb2\067\uffb2\071"
			+ "\uffb2\074\270\101\uffb2\102\uffb2\103\uffb2\104\uffb2\105\uffb2"
			+ "\106\uffb2\107\uffb2\110\uffb2\112\uffb2\001\002\000\072\002"
			+ "\uffb8\013\uffb8\014\uffb8\016\uffb8\023\uffb8\024\uffb8\025\uffb8"
			+ "\031\uffb8\036\uffb8\037\uffb8\040\uffb8\044\uffb8\047\uffb8\060"
			+ "\uffb8\061\uffb8\063\uffb8\067\uffb8\071\uffb8\074\uffb8\101\uffb8"
			+ "\102\uffb8\103\uffb8\104\uffb8\105\uffb8\106\uffb8\107\uffb8\110"
			+ "\uffb8\112\265\001\002\000\072\002\uffb3\013\uffb3\014\uffb3"
			+ "\016\263\023\uffb3\024\uffb3\025\uffb3\031\uffb3\036\uffb3\037"
			+ "\uffb3\040\uffb3\044\uffb3\047\uffb3\060\uffb3\061\uffb3\063\uffb3"
			+ "\067\115\071\uffb3\074\uffb3\101\uffb3\102\uffb3\103\uffb3\104"
			+ "\uffb3\105\uffb3\106\uffb3\107\uffb3\110\uffb3\112\uffb3\001\002"
			+ "\000\004\004\264\001\002\000\072\002\uffb4\013\uffb4\014"
			+ "\uffb4\016\uffb4\023\uffb4\024\uffb4\025\uffb4\031\uffb4\036\uffb4"
			+ "\037\uffb4\040\uffb4\044\uffb4\047\uffb4\060\uffb4\061\uffb4\063"
			+ "\uffb4\067\uffb4\071\uffb4\074\uffb4\101\uffb4\102\uffb4\103\uffb4"
			+ "\104\uffb4\105\uffb4\106\uffb4\107\uffb4\110\uffb4\112\uffb4\001"
			+ "\002\000\010\004\257\063\007\107\014\001\002\000\072"
			+ "\002\uffb7\013\uffb7\014\uffb7\016\uffb7\023\uffb7\024\uffb7\025"
			+ "\uffb7\031\uffb7\036\uffb7\037\uffb7\040\uffb7\044\uffb7\047\uffb7"
			+ "\060\uffb7\061\uffb7\063\uffb7\067\uffb7\071\uffb7\074\uffb7\101"
			+ "\uffb7\102\uffb7\103\uffb7\104\uffb7\105\uffb7\106\uffb7\107\uffb7"
			+ "\110\uffb7\112\uffb7\001\002\000\004\004\065\001\002\000"
			+ "\032\004\065\005\071\006\074\007\056\011\057\015\070"
			+ "\041\073\054\061\056\075\063\007\066\062\107\063\001"
			+ "\002\000\004\004\065\001\002\000\072\002\uffb1\013\uffb1"
			+ "\014\uffb1\016\uffb1\023\uffb1\024\uffb1\025\uffb1\031\uffb1\036"
			+ "\uffb1\037\uffb1\040\uffb1\044\uffb1\047\uffb1\060\uffb1\061\267"
			+ "\063\uffb1\067\uffb1\071\uffb1\074\uffb1\101\uffb1\102\uffb1\103"
			+ "\uffb1\104\uffb1\105\uffb1\106\uffb1\107\uffb1\110\uffb1\112\uffb1"
			+ "\001\002\000\072\002\uffd1\013\uffd1\014\uffd1\016\uffd1\023"
			+ "\uffd1\024\uffd1\025\uffd1\031\uffd1\036\uffd1\037\uffd1\040\uffd1"
			+ "\044\uffd1\047\uffd1\060\uffd1\061\uffd1\063\uffd1\067\uffd1\071"
			+ "\uffd1\074\uffd1\101\uffd1\102\uffd1\103\uffd1\104\uffd1\105\uffd1"
			+ "\106\uffd1\107\uffd1\110\uffd1\112\uffd1\001\002\000\072\002"
			+ "\uffb0\013\uffb0\014\uffb0\016\uffb0\023\uffb0\024\uffb0\025\uffb0"
			+ "\031\uffb0\036\uffb0\037\uffb0\040\uffb0\044\uffb0\047\uffb0\060"
			+ "\uffb0\061\uffb0\063\uffb0\067\uffb0\071\uffb0\074\uffb0\101\uffb0"
			+ "\102\uffb0\103\uffb0\104\uffb0\105\uffb0\106\uffb0\107\uffb0\110"
			+ "\uffb0\112\uffb0\001\002\000\072\002\uffaf\013\uffaf\014\uffaf"
			+ "\016\uffaf\023\uffaf\024\uffaf\025\uffaf\031\uffaf\036\uffaf\037"
			+ "\uffaf\040\uffaf\044\uffaf\047\uffaf\060\uffaf\061\uffaf\063\uffaf"
			+ "\067\uffaf\071\uffaf\074\uffaf\101\uffaf\102\uffaf\103\uffaf\104"
			+ "\uffaf\105\uffaf\106\uffaf\107\uffaf\110\uffaf\112\uffaf\001\002"
			+ "\000\074\002\uff90\013\uff90\014\uff90\016\uff90\023\uff90\024"
			+ "\uff90\025\uff90\031\uff90\036\uff90\037\uff90\040\uff90\044\uff90"
			+ "\045\302\047\uff90\060\uff90\061\uff90\063\uff90\067\uff90\071"
			+ "\uff90\074\uff90\101\uff90\102\uff90\103\uff90\104\uff90\105\uff90"
			+ "\106\uff90\107\uff90\110\uff90\112\uff90\001\002\000\074\002"
			+ "\uff8f\013\uff8f\014\uff8f\016\uff8f\023\uff8f\024\uff8f\025\uff8f"
			+ "\031\uff8f\036\uff8f\037\uff8f\040\uff8f\044\uff8f\045\uff8f\047"
			+ "\uff8f\060\uff8f\061\uff8f\063\uff8f\067\uff8f\071\uff8f\074\uff8f"
			+ "\101\uff8f\102\uff8f\103\uff8f\104\uff8f\105\uff8f\106\uff8f\107"
			+ "\uff8f\110\uff8f\112\300\001\002\000\004\004\065\001\002"
			+ "\000\074\002\uff8e\013\uff8e\014\uff8e\016\uff8e\023\uff8e\024"
			+ "\uff8e\025\uff8e\031\uff8e\036\uff8e\037\uff8e\040\uff8e\044\uff8e"
			+ "\045\uff8e\047\uff8e\060\uff8e\061\uff8e\063\uff8e\067\uff8e\071"
			+ "\uff8e\074\uff8e\101\uff8e\102\uff8e\103\uff8e\104\uff8e\105\uff8e"
			+ "\106\uff8e\107\uff8e\110\uff8e\112\uff8e\001\002\000\034\005"
			+ "\071\006\074\007\056\020\246\026\253\041\073\052\250"
			+ "\053\247\054\305\056\075\065\240\066\062\107\306\001"
			+ "\002\000\072\002\uff91\013\uff91\014\uff91\016\uff91\023\uff91"
			+ "\024\uff91\025\uff91\031\uff91\036\uff91\037\uff91\040\uff91\044"
			+ "\uff91\047\uff91\060\uff91\061\uff91\063\uff91\067\uff91\071\uff91"
			+ "\074\uff91\101\uff91\102\uff91\103\uff91\104\uff91\105\uff91\106"
			+ "\uff91\107\uff91\110\uff91\112\uff91\001\002\000\072\002\uff8c"
			+ "\013\uff8c\014\uff8c\016\uff8c\023\uff8c\024\uff8c\025\uff8c\031"
			+ "\uff8c\036\uff8c\037\uff8c\040\uff8c\044\uff8c\047\uff8c\060\uff8c"
			+ "\061\uff8c\063\uff8c\067\uff8c\071\uff8c\074\uff8c\101\uff8c\102"
			+ "\uff8c\103\uff8c\104\uff8c\105\uff8c\106\uff8c\107\uff8c\110\uff8c"
			+ "\112\uff8c\001\002\000\034\005\071\006\074\007\056\020"
			+ "\246\026\253\041\073\052\250\053\247\054\305\056\075"
			+ "\065\240\066\062\107\306\001\002\000\034\005\071\006"
			+ "\074\007\056\020\246\026\253\041\073\052\250\053\247"
			+ "\054\305\056\075\065\240\066\062\107\306\001\002\000"
			+ "\072\002\uff8b\013\uff8b\014\uff8b\016\uff8b\023\uff8b\024\uff8b"
			+ "\025\uff8b\031\uff8b\036\uff8b\037\uff8b\040\uff8b\044\uff8b\047"
			+ "\uff8b\060\uff8b\061\uff8b\063\uff8b\067\uff8b\071\uff8b\074\uff8b"
			+ "\101\uff8b\102\uff8b\103\uff8b\104\uff8b\105\uff8b\106\uff8b\107"
			+ "\uff8b\110\uff8b\112\uff8b\001\002\000\072\002\uff8d\013\uff8d"
			+ "\014\343\016\uff8d\023\uff8d\024\uff8d\025\uff8d\031\uff8d\036"
			+ "\uff8d\037\uff8d\040\uff8d\044\uff8d\047\uff8d\060\344\061\uff8d"
			+ "\063\uff8d\067\uff8d\071\uff8d\074\uff8d\101\uff8d\102\uff8d\103"
			+ "\uff8d\104\uff8d\105\uff8d\106\uff8d\107\uff8d\110\uff8d\112\uff8d"
			+ "\001\002\000\016\101\331\102\327\103\330\104\333\105"
			+ "\332\106\334\001\002\000\016\101\315\102\314\103\313"
			+ "\104\317\105\316\106\320\001\002\000\014\020\246\026"
			+ "\253\052\250\053\247\065\240\001\002\000\014\020\246"
			+ "\026\253\052\250\053\247\065\240\001\002\000\014\020"
			+ "\246\026\253\052\250\053\247\065\240\001\002\000\014"
			+ "\020\246\026\253\052\250\053\247\065\240\001\002\000"
			+ "\014\020\246\026\253\052\250\053\247\065\240\001\002"
			+ "\000\014\020\246\026\253\052\250\053\247\065\240\001"
			+ "\002\000\072\002\uff7f\013\uff7f\014\uff7f\016\uff7f\023\uff7f"
			+ "\024\uff7f\025\uff7f\031\uff7f\036\uff7f\037\uff7f\040\uff7f\044"
			+ "\uff7f\047\uff7f\060\uff7f\061\uff7f\063\uff7f\067\uff7f\071\uff7f"
			+ "\074\uff7f\101\uff7f\102\uff7f\103\uff7f\104\uff7f\105\uff7f\106"
			+ "\uff7f\107\uff7f\110\uff7f\112\uff7f\001\002\000\072\002\uff7d"
			+ "\013\uff7d\014\uff7d\016\uff7d\023\uff7d\024\uff7d\025\uff7d\031"
			+ "\uff7d\036\uff7d\037\uff7d\040\uff7d\044\uff7d\047\uff7d\060\uff7d"
			+ "\061\uff7d\063\uff7d\067\uff7d\071\uff7d\074\uff7d\101\uff7d\102"
			+ "\uff7d\103\uff7d\104\uff7d\105\uff7d\106\uff7d\107\uff7d\110\uff7d"
			+ "\112\uff7d\001\002\000\072\002\uff7b\013\uff7b\014\uff7b\016"
			+ "\uff7b\023\uff7b\024\uff7b\025\uff7b\031\uff7b\036\uff7b\037\uff7b"
			+ "\040\uff7b\044\uff7b\047\uff7b\060\uff7b\061\uff7b\063\uff7b\067"
			+ "\uff7b\071\uff7b\074\uff7b\101\uff7b\102\uff7b\103\uff7b\104\uff7b"
			+ "\105\uff7b\106\uff7b\107\uff7b\110\uff7b\112\uff7b\001\002\000"
			+ "\072\002\uff7e\013\uff7e\014\uff7e\016\uff7e\023\uff7e\024\uff7e"
			+ "\025\uff7e\031\uff7e\036\uff7e\037\uff7e\040\uff7e\044\uff7e\047"
			+ "\uff7e\060\uff7e\061\uff7e\063\uff7e\067\uff7e\071\uff7e\074\uff7e"
			+ "\101\uff7e\102\uff7e\103\uff7e\104\uff7e\105\uff7e\106\uff7e\107"
			+ "\uff7e\110\uff7e\112\uff7e\001\002\000\072\002\uff7c\013\uff7c"
			+ "\014\uff7c\016\uff7c\023\uff7c\024\uff7c\025\uff7c\031\uff7c\036"
			+ "\uff7c\037\uff7c\040\uff7c\044\uff7c\047\uff7c\060\uff7c\061\uff7c"
			+ "\063\uff7c\067\uff7c\071\uff7c\074\uff7c\101\uff7c\102\uff7c\103"
			+ "\uff7c\104\uff7c\105\uff7c\106\uff7c\107\uff7c\110\uff7c\112\uff7c"
			+ "\001\002\000\072\002\uff80\013\uff80\014\uff80\016\uff80\023"
			+ "\uff80\024\uff80\025\uff80\031\uff80\036\uff80\037\uff80\040\uff80"
			+ "\044\uff80\047\uff80\060\uff80\061\uff80\063\uff80\067\uff80\071"
			+ "\uff80\074\uff80\101\uff80\102\uff80\103\uff80\104\uff80\105\uff80"
			+ "\106\uff80\107\uff80\110\uff80\112\uff80\001\002\000\016\005"
			+ "\071\006\074\007\056\041\073\056\075\066\062\001\002"
			+ "\000\016\005\071\006\074\007\056\041\073\056\075\066"
			+ "\062\001\002\000\016\005\071\006\074\007\056\041\073"
			+ "\056\075\066\062\001\002\000\016\005\071\006\074\007"
			+ "\056\041\073\056\075\066\062\001\002\000\016\005\071"
			+ "\006\074\007\056\041\073\056\075\066\062\001\002\000"
			+ "\016\005\071\006\074\007\056\041\073\056\075\066\062"
			+ "\001\002\000\072\002\uff85\013\uff85\014\uff85\016\uff85\023"
			+ "\uff85\024\uff85\025\uff85\031\uff85\036\uff85\037\uff85\040\uff85"
			+ "\044\uff85\047\uff85\060\uff85\061\uff85\063\uff85\067\uff85\071"
			+ "\uff85\074\uff85\101\uff85\102\uff85\103\uff85\104\uff85\105\uff85"
			+ "\106\uff85\107\uff85\110\uff85\112\uff85\001\002\000\072\002"
			+ "\uff83\013\uff83\014\uff83\016\uff83\023\uff83\024\uff83\025\uff83"
			+ "\031\uff83\036\uff83\037\uff83\040\uff83\044\uff83\047\uff83\060"
			+ "\uff83\061\uff83\063\uff83\067\uff83\071\uff83\074\uff83\101\uff83"
			+ "\102\uff83\103\uff83\104\uff83\105\uff83\106\uff83\107\uff83\110"
			+ "\uff83\112\uff83\001\002\000\072\002\uff81\013\uff81\014\uff81"
			+ "\016\uff81\023\uff81\024\uff81\025\uff81\031\uff81\036\uff81\037"
			+ "\uff81\040\uff81\044\uff81\047\uff81\060\uff81\061\uff81\063\uff81"
			+ "\067\uff81\071\uff81\074\uff81\101\uff81\102\uff81\103\uff81\104"
			+ "\uff81\105\uff81\106\uff81\107\uff81\110\uff81\112\uff81\001\002"
			+ "\000\072\002\uff84\013\uff84\014\uff84\016\uff84\023\uff84\024"
			+ "\uff84\025\uff84\031\uff84\036\uff84\037\uff84\040\uff84\044\uff84"
			+ "\047\uff84\060\uff84\061\uff84\063\uff84\067\uff84\071\uff84\074"
			+ "\uff84\101\uff84\102\uff84\103\uff84\104\uff84\105\uff84\106\uff84"
			+ "\107\uff84\110\uff84\112\uff84\001\002\000\072\002\uff86\013"
			+ "\uff86\014\uff86\016\uff86\023\uff86\024\uff86\025\uff86\031\uff86"
			+ "\036\uff86\037\uff86\040\uff86\044\uff86\047\uff86\060\uff86\061"
			+ "\uff86\063\uff86\067\uff86\071\uff86\074\uff86\101\uff86\102\uff86"
			+ "\103\uff86\104\uff86\105\uff86\106\uff86\107\uff86\110\uff86\112"
			+ "\uff86\001\002\000\072\002\uff82\013\uff82\014\uff82\016\uff82"
			+ "\023\uff82\024\uff82\025\uff82\031\uff82\036\uff82\037\uff82\040"
			+ "\uff82\044\uff82\047\uff82\060\uff82\061\uff82\063\uff82\067\uff82"
			+ "\071\uff82\074\uff82\101\uff82\102\uff82\103\uff82\104\uff82\105"
			+ "\uff82\106\uff82\107\uff82\110\uff82\112\uff82\001\002\000\034"
			+ "\005\071\006\074\007\056\020\246\026\253\041\073\052"
			+ "\250\053\247\054\305\056\075\065\240\066\062\107\306"
			+ "\001\002\000\034\005\071\006\074\007\056\020\246\026"
			+ "\253\041\073\052\250\053\247\054\305\056\075\065\240"
			+ "\066\062\107\306\001\002\000\072\002\uff88\013\uff88\014"
			+ "\343\016\uff88\023\uff88\024\uff88\025\uff88\031\uff88\036\uff88"
			+ "\037\uff88\040\uff88\044\uff88\047\uff88\060\uff88\061\uff88\063"
			+ "\uff88\067\uff88\071\uff88\074\uff88\101\uff88\102\uff88\103\uff88"
			+ "\104\uff88\105\uff88\106\uff88\107\uff88\110\uff88\112\uff88\001"
			+ "\002\000\072\002\uff87\013\uff87\014\uff87\016\uff87\023\uff87"
			+ "\024\uff87\025\uff87\031\uff87\036\uff87\037\uff87\040\uff87\044"
			+ "\uff87\047\uff87\060\uff87\061\uff87\063\uff87\067\uff87\071\uff87"
			+ "\074\uff87\101\uff87\102\uff87\103\uff87\104\uff87\105\uff87\106"
			+ "\uff87\107\uff87\110\uff87\112\uff87\001\002\000\010\014\343"
			+ "\060\344\110\350\001\002\000\072\002\uff89\013\uff89\014"
			+ "\uff89\016\uff89\023\uff89\024\uff89\025\uff89\031\uff89\036\uff89"
			+ "\037\uff89\040\uff89\044\uff89\047\uff89\060\uff89\061\uff89\063"
			+ "\uff89\067\uff89\071\uff89\074\uff89\101\uff89\102\uff89\103\uff89"
			+ "\104\uff89\105\uff89\106\uff89\107\uff89\110\uff89\112\uff89\001"
			+ "\002\000\072\002\uff8a\013\uff8a\014\343\016\uff8a\023\uff8a"
			+ "\024\uff8a\025\uff8a\031\uff8a\036\uff8a\037\uff8a\040\uff8a\044"
			+ "\uff8a\047\uff8a\060\344\061\uff8a\063\uff8a\067\uff8a\071\uff8a"
			+ "\074\uff8a\101\uff8a\102\uff8a\103\uff8a\104\uff8a\105\uff8a\106"
			+ "\uff8a\107\uff8a\110\uff8a\112\uff8a\001\002\000\072\002\uffae"
			+ "\013\uffae\014\125\016\uffae\023\uffae\024\uffae\025\uffae\031"
			+ "\uffae\036\uffae\037\uffae\040\uffae\044\271\047\uffae\060\126"
			+ "\061\267\063\uffae\067\uffae\071\uffae\074\uffae\101\uffae\102"
			+ "\uffae\103\uffae\104\uffae\105\uffae\106\uffae\107\uffae\110\uffae"
			+ "\112\uffae\001\002\000\072\002\uffad\013\uffad\014\uffad\016"
			+ "\uffad\023\uffad\024\uffad\025\uffad\031\uffad\036\uffad\037\uffad"
			+ "\040\uffad\044\uffad\047\uffad\060\uffad\061\267\063\uffad\067"
			+ "\uffad\071\uffad\074\uffad\101\uffad\102\uffad\103\uffad\104\uffad"
			+ "\105\uffad\106\uffad\107\uffad\110\uffad\112\uffad\001\002\000"
			+ "\072\002\uffac\013\uffac\014\uffac\016\uffac\023\uffac\024\uffac"
			+ "\025\uffac\031\uffac\036\uffac\037\uffac\040\uffac\044\uffac\047"
			+ "\uffac\060\uffac\061\uffac\063\uffac\067\uffac\071\uffac\074\uffac"
			+ "\101\uffac\102\uffac\103\uffac\104\uffac\105\uffac\106\uffac\107"
			+ "\uffac\110\uffac\112\uffac\001\002\000\072\002\uffab\013\uffab"
			+ "\014\uffab\016\uffab\023\uffab\024\uffab\025\uffab\031\uffab\036"
			+ "\uffab\037\uffab\040\uffab\044\uffab\047\uffab\060\uffab\061\uffab"
			+ "\063\uffab\067\uffab\071\uffab\074\uffab\101\uffab\102\uffab\103"
			+ "\uffab\104\uffab\105\uffab\106\uffab\107\uffab\110\uffab\112\uffab"
			+ "\001\002\000\072\002\uff79\013\uff79\014\uff79\016\uff79\023"
			+ "\uff79\024\uff79\025\uff79\031\uff79\036\uff79\037\uff79\040\uff79"
			+ "\044\uff79\047\uff79\060\uff79\061\uff79\063\uff79\067\uff79\071"
			+ "\uff79\074\uff79\101\uff79\102\uff79\103\uff79\104\uff79\105\uff79"
			+ "\106\uff79\107\uff79\110\uff79\112\363\001\002\000\076\002"
			+ "\uff77\013\uff77\014\uff77\016\uff77\017\362\023\uff77\024\uff77"
			+ "\025\uff77\031\uff77\032\361\036\uff77\037\uff77\040\uff77\044"
			+ "\uff77\047\uff77\060\uff77\061\uff77\063\uff77\067\uff77\071\uff77"
			+ "\074\uff77\101\uff77\102\uff77\103\uff77\104\uff77\105\uff77\106"
			+ "\uff77\107\uff77\110\uff77\112\uff77\001\002\000\072\002\uff7a"
			+ "\013\uff7a\014\uff7a\016\uff7a\023\uff7a\024\uff7a\025\uff7a\031"
			+ "\uff7a\036\uff7a\037\uff7a\040\uff7a\044\uff7a\047\uff7a\060\uff7a"
			+ "\061\uff7a\063\uff7a\067\uff7a\071\uff7a\074\uff7a\101\uff7a\102"
			+ "\uff7a\103\uff7a\104\uff7a\105\uff7a\106\uff7a\107\uff7a\110\uff7a"
			+ "\112\uff7a\001\002\000\072\002\uff75\013\uff75\014\uff75\016"
			+ "\uff75\023\uff75\024\uff75\025\uff75\031\uff75\036\uff75\037\uff75"
			+ "\040\uff75\044\uff75\047\uff75\060\uff75\061\uff75\063\uff75\067"
			+ "\uff75\071\uff75\074\uff75\101\uff75\102\uff75\103\uff75\104\uff75"
			+ "\105\uff75\106\uff75\107\uff75\110\uff75\112\uff75\001\002\000"
			+ "\072\002\uff76\013\uff76\014\uff76\016\uff76\023\uff76\024\uff76"
			+ "\025\uff76\031\uff76\036\uff76\037\uff76\040\uff76\044\uff76\047"
			+ "\uff76\060\uff76\061\uff76\063\uff76\067\uff76\071\uff76\074\uff76"
			+ "\101\uff76\102\uff76\103\uff76\104\uff76\105\uff76\106\uff76\107"
			+ "\uff76\110\uff76\112\uff76\001\002\000\004\004\065\001\002"
			+ "\000\072\002\uff78\013\uff78\014\uff78\016\uff78\023\uff78\024"
			+ "\uff78\025\uff78\031\uff78\036\uff78\037\uff78\040\uff78\044\uff78"
			+ "\047\uff78\060\uff78\061\uff78\063\uff78\067\uff78\071\uff78\074"
			+ "\uff78\101\uff78\102\uff78\103\uff78\104\uff78\105\uff78\106\uff78"
			+ "\107\uff78\110\uff78\112\uff78\001\002\000\004\004\366\001"
			+ "\002\000\072\002\uffb6\013\uffb6\014\uffb6\016\uffb6\023\uffb6"
			+ "\024\uffb6\025\uffb6\031\uffb6\036\uffb6\037\uffb6\040\uffb6\044"
			+ "\uffb6\047\uffb6\060\uffb6\061\uffb6\063\uffb6\067\uffb6\071\uffb6"
			+ "\074\uffb6\101\uffb6\102\uffb6\103\uffb6\104\uffb6\105\uffb6\106"
			+ "\uffb6\107\uffb6\110\uffb6\112\uffb6\001\002\000\004\004\065"
			+ "\001\002\000\004\110\371\001\002\000\104\002\uffbb\013"
			+ "\uffbb\014\uffbb\016\uffbb\023\uffbb\024\uffbb\025\uffbb\031\uffbb"
			+ "\036\uffbb\037\uffbb\040\uffbb\043\uffbb\044\uffbb\047\uffbb\060"
			+ "\uffbb\061\uffbb\063\uffbb\067\uffbb\071\uffbb\074\uffbb\075\uffbb"
			+ "\076\uffbb\077\uffbb\100\uffbb\101\uffbb\102\uffbb\103\uffbb\104"
			+ "\uffbb\105\uffbb\106\uffbb\107\uffbb\110\uffbb\112\uffbb\001\002"
			+ "\000\034\004\065\005\071\006\074\007\056\020\246\026"
			+ "\253\041\073\052\250\053\247\056\075\065\240\066\062"
			+ "\107\243\001\002\000\004\043\uffcc\001\002\000\034\004"
			+ "\065\005\071\006\074\007\056\020\246\026\253\041\073"
			+ "\052\250\053\247\056\075\065\240\066\062\107\243\001"
			+ "\002\000\004\004\u0104\001\002\000\034\004\065\005\071"
			+ "\006\074\007\056\020\246\026\253\041\073\052\250\053"
			+ "\247\056\075\065\240\066\062\107\243\001\002\000\034"
			+ "\004\065\005\071\006\074\007\056\020\246\026\253\041"
			+ "\073\052\250\053\247\056\075\065\240\066\062\107\243"
			+ "\001\002\000\034\004\065\005\071\006\074\007\056\020"
			+ "\246\026\253\041\073\052\250\053\247\056\075\065\240"
			+ "\066\062\107\243\001\002\000\022\016\uffc0\043\uffc0\075"
			+ "\uffc0\076\uffc0\077\uffc0\100\uffc0\110\uffc0\112\uffc0\001\002"
			+ "\000\022\016\uffc2\043\uffc2\075\uffc2\076\uffc2\077\374\100"
			+ "\u0100\110\uffc2\112\uffc2\001\002\000\022\016\uffc3\043\uffc3"
			+ "\075\uffc3\076\uffc3\077\374\100\u0100\110\uffc3\112\uffc3\001"
			+ "\002\000\006\043\uffca\112\uffca\001\002\000\022\016\uffc1"
			+ "\043\uffc1\075\uffc1\076\uffc1\077\uffc1\100\uffc1\110\uffc1\112"
			+ "\uffc1\001\002\000\004\004\065\001\002\000\004\110\u0108"
			+ "\001\002\000\104\002\uffbe\013\uffbe\014\uffbe\016\uffbe\023"
			+ "\uffbe\024\uffbe\025\uffbe\031\uffbe\036\uffbe\037\uffbe\040\uffbe"
			+ "\043\uffbe\044\uffbe\047\uffbe\060\uffbe\061\uffbe\063\uffbe\067"
			+ "\uffbe\071\uffbe\074\uffbe\075\uffbe\076\uffbe\077\uffbe\100\uffbe"
			+ "\101\uffbe\102\uffbe\103\uffbe\104\uffbe\105\uffbe\106\uffbe\107"
			+ "\uffbe\110\uffbe\112\uffbe\001\002\000\004\004\065\001\002"
			+ "\000\004\110\u010b\001\002\000\104\002\uffbd\013\uffbd\014"
			+ "\uffbd\016\uffbd\023\uffbd\024\uffbd\025\uffbd\031\uffbd\036\uffbd"
			+ "\037\uffbd\040\uffbd\043\uffbd\044\uffbd\047\uffbd\060\uffbd\061"
			+ "\uffbd\063\uffbd\067\uffbd\071\uffbd\074\uffbd\075\uffbd\076\uffbd"
			+ "\077\uffbd\100\uffbd\101\uffbd\102\uffbd\103\uffbd\104\uffbd\105"
			+ "\uffbd\106\uffbd\107\uffbd\110\uffbd\112\uffbd\001\002\000\004"
			+ "\004\065\001\002\000\004\110\u010e\001\002\000\104\002"
			+ "\uffbf\013\uffbf\014\uffbf\016\uffbf\023\uffbf\024\uffbf\025\uffbf"
			+ "\031\uffbf\036\uffbf\037\uffbf\040\uffbf\043\uffbf\044\uffbf\047"
			+ "\uffbf\060\uffbf\061\uffbf\063\uffbf\067\uffbf\071\uffbf\074\uffbf"
			+ "\075\uffbf\076\uffbf\077\uffbf\100\uffbf\101\uffbf\102\uffbf\103"
			+ "\uffbf\104\uffbf\105\uffbf\106\uffbf\107\uffbf\110\uffbf\112\uffbf"
			+ "\001\002\000\004\043\u0114\001\002\000\004\043\u0111\001"
			+ "\002\000\010\004\257\063\007\107\014\001\002\000\072"
			+ "\002\uffb2\013\uffb2\014\uffb2\016\uffb2\023\uffb2\024\uffb2\025"
			+ "\uffb2\031\uffb2\036\uffb2\037\uffb2\040\uffb2\044\271\047\uffb2"
			+ "\060\uffb2\061\267\063\uffb2\067\uffb2\071\uffb2\074\270\101"
			+ "\uffb2\102\uffb2\103\uffb2\104\uffb2\105\uffb2\106\uffb2\107\uffb2"
			+ "\110\uffb2\112\uffb2\001\002\000\072\002\uffd0\013\uffd0\014"
			+ "\uffd0\016\uffd0\023\uffd0\024\uffd0\025\uffd0\031\uffd0\036\uffd0"
			+ "\037\uffd0\040\uffd0\044\uffd0\047\uffd0\060\uffd0\061\uffd0\063"
			+ "\uffd0\067\uffd0\071\uffd0\074\uffd0\101\uffd0\102\uffd0\103\uffd0"
			+ "\104\uffd0\105\uffd0\106\uffd0\107\uffd0\110\uffd0\112\uffd0\001"
			+ "\002\000\010\004\257\063\007\107\014\001\002\000\072"
			+ "\002\uffb2\013\uffb2\014\uffb2\016\uffb2\023\uffb2\024\uffb2\025"
			+ "\uffb2\031\uffb2\036\uffb2\037\uffb2\040\uffb2\044\271\047\uffb2"
			+ "\060\uffb2\061\267\063\uffb2\067\uffb2\071\uffb2\074\270\101"
			+ "\uffb2\102\uffb2\103\uffb2\104\uffb2\105\uffb2\106\uffb2\107\uffb2"
			+ "\110\uffb2\112\uffb2\001\002\000\072\002\uffd2\013\uffd2\014"
			+ "\uffd2\016\uffd2\023\uffd2\024\uffd2\025\uffd2\031\uffd2\036\uffd2"
			+ "\037\uffd2\040\uffd2\044\uffd2\047\uffd2\060\uffd2\061\uffd2\063"
			+ "\uffd2\067\uffd2\071\uffd2\074\uffd2\101\uffd2\102\uffd2\103\uffd2"
			+ "\104\uffd2\105\uffd2\106\uffd2\107\uffd2\110\uffd2\112\uffd2\001"
			+ "\002\000\014\075\376\076\377\077\374\100\u0100\110\u0118"
			+ "\001\002\000\022\016\uffc7\043\uffc7\075\uffc7\076\uffc7\077"
			+ "\uffc7\100\uffc7\110\uffc7\112\uffc7\001\002\000\010\004\257"
			+ "\063\007\107\014\001\002\000\072\002\uffb2\013\uffb2\014"
			+ "\uffb2\016\uffb2\023\uffb2\024\uffb2\025\uffb2\031\uffb2\036\uffb2"
			+ "\037\uffb2\040\uffb2\044\271\047\uffb2\060\uffb2\061\267\063"
			+ "\uffb2\067\uffb2\071\uffb2\074\270\101\uffb2\102\uffb2\103\uffb2"
			+ "\104\uffb2\105\uffb2\106\uffb2\107\uffb2\110\uffb2\112\uffb2\001"
			+ "\002\000\072\002\uffd3\013\uffd3\014\uffd3\016\uffd3\023\uffd3"
			+ "\024\uffd3\025\uffd3\031\uffd3\036\uffd3\037\uffd3\040\uffd3\044"
			+ "\uffd3\047\uffd3\060\uffd3\061\uffd3\063\uffd3\067\uffd3\071\uffd3"
			+ "\074\uffd3\101\uffd3\102\uffd3\103\uffd3\104\uffd3\105\uffd3\106"
			+ "\uffd3\107\uffd3\110\uffd3\112\uffd3\001\002\000\004\004\065"
			+ "\001\002\000\004\110\u011e\001\002\000\104\002\uffbc\013"
			+ "\uffbc\014\uffbc\016\uffbc\023\uffbc\024\uffbc\025\uffbc\031\uffbc"
			+ "\036\uffbc\037\uffbc\040\uffbc\043\uffbc\044\uffbc\047\uffbc\060"
			+ "\uffbc\061\uffbc\063\uffbc\067\uffbc\071\uffbc\074\uffbc\075\uffbc"
			+ "\076\uffbc\077\uffbc\100\uffbc\101\uffbc\102\uffbc\103\uffbc\104"
			+ "\uffbc\105\uffbc\106\uffbc\107\uffbc\110\uffbc\112\uffbc\001\002"
			+ "\000\034\002\uff6b\013\uff6b\023\uff6b\024\uff6b\025\uff6b\031"
			+ "\uff6b\036\uff6b\037\uff6b\040\uff6b\047\uff6b\063\uff6b\071\uff6b"
			+ "\107\uff6b\001\002\000\006\072\u0121\107\u0122\001\002\000"
			+ "\004\107\u012c\001\002\000\004\004\037\001\002\000\004"
			+ "\110\u0124\001\002\000\004\072\u0125\001\002\000\004\107"
			+ "\u0126\001\002\000\016\005\071\006\074\007\056\041\073"
			+ "\056\075\066\062\001\002\000\004\110\u012b\001\002\000"
			+ "\006\110\uff72\112\u0129\001\002\000\016\005\071\006\074"
			+ "\007\056\041\073\056\075\066\062\001\002\000\004\110"
			+ "\uff71\001\002\000\034\002\uff73\013\uff73\023\uff73\024\uff73"
			+ "\025\uff73\031\uff73\036\uff73\037\uff73\040\uff73\047\uff73\063"
			+ "\uff73\071\uff73\107\uff73\001\002\000\016\005\071\006\074"
			+ "\007\056\041\073\056\075\066\062\001\002\000\004\110"
			+ "\u012e\001\002\000\034\002\uff74\013\uff74\023\uff74\024\uff74"
			+ "\025\uff74\031\uff74\036\uff74\037\uff74\040\uff74\047\uff74\063"
			+ "\uff74\071\uff74\107\uff74\001\002\000\010\010\u0132\012\u0130"
			+ "\035\u0131\001\002\000\004\004\u0136\001\002\000\004\004"
			+ "\u0135\001\002\000\004\004\u0133\001\002\000\020\021\166"
			+ "\022\173\027\172\034\165\042\167\050\174\073\170\001"
			+ "\002\000\034\002\uff68\013\uff68\023\uff68\024\uff68\025\uff68"
			+ "\031\uff68\036\uff68\037\uff68\040\uff68\047\uff68\063\uff68\071"
			+ "\uff68\107\uff68\001\002\000\034\002\uff66\013\uff66\023\uff66"
			+ "\024\uff66\025\uff66\031\uff66\036\uff66\037\uff66\040\uff66\047"
			+ "\uff66\063\uff66\071\uff66\107\uff66\001\002\000\020\021\166"
			+ "\022\173\027\172\034\165\042\167\050\174\073\170\001"
			+ "\002\000\034\002\uff67\013\uff67\023\uff67\024\uff67\025\uff67"
			+ "\031\uff67\036\uff67\037\uff67\040\uff67\047\uff67\063\uff67\071"
			+ "\uff67\107\uff67\001\002" });

	/** Access to parse-action table. */
	public short[][] action_table() {
		return _action_table;
	}

	/** <code>reduce_goto</code> table. */
	protected static final short[][] _reduce_table = unpackFromStrings(new String[] { "\000\u0135\000\040\003\012\010\027\020\021\021\014\022"
			+ "\016\023\011\025\035\026\030\040\031\047\026\050\023"
			+ "\051\015\052\020\053\007\056\017\001\001\000\002\001"
			+ "\001\000\002\001\001\000\004\036\u011e\001\001\000\022"
			+ "\004\244\005\235\006\250\007\241\017\236\045\251\046"
			+ "\254\057\253\001\001\000\002\001\001\000\002\001\001"
			+ "\000\002\001\001\000\002\001\001\000\010\047\026\050"
			+ "\225\051\015\001\001\000\002\001\001\000\002\001\001"
			+ "\000\002\001\001\000\002\001\001\000\036\010\027\020"
			+ "\021\021\014\022\016\023\011\025\035\026\030\040\031"
			+ "\047\026\050\023\051\015\052\020\053\224\056\017\001"
			+ "\001\000\002\001\001\000\004\036\223\001\001\000\002"
			+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
			+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
			+ "\000\002\001\001\000\002\001\001\000\004\036\037\001"
			+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
			+ "\000\004\036\041\001\001\000\002\001\001\000\002\001"
			+ "\001\000\006\054\046\055\045\001\001\000\002\001\001"
			+ "\000\002\001\001\000\002\001\001\000\006\054\046\055"
			+ "\050\001\001\000\002\001\001\000\032\011\052\012\076"
			+ "\017\054\037\057\041\066\047\026\050\071\051\015\057"
			+ "\075\061\065\062\063\063\053\001\001\000\002\001\001"
			+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
			+ "\012\017\135\047\026\050\136\051\015\001\001\000\002"
			+ "\001\001\000\032\011\052\012\076\017\054\037\057\041"
			+ "\066\047\026\050\071\051\015\057\075\061\065\062\134"
			+ "\063\053\001\001\000\002\001\001\000\032\011\052\012"
			+ "\076\017\054\037\057\041\066\047\026\050\131\051\015"
			+ "\057\075\061\065\062\130\063\053\001\001\000\002\001"
			+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
			+ "\000\012\017\120\047\026\050\121\051\015\001\001\000"
			+ "\002\001\001\000\002\001\001\000\002\001\001\000\002"
			+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
			+ "\001\000\016\012\113\017\105\047\026\050\071\051\015"
			+ "\057\075\001\001\000\016\012\112\017\105\047\026\050"
			+ "\071\051\015\057\075\001\001\000\016\012\111\017\105"
			+ "\047\026\050\071\051\015\057\075\001\001\000\016\012"
			+ "\110\017\105\047\026\050\071\051\015\057\075\001\001"
			+ "\000\016\012\107\017\105\047\026\050\071\051\015\057"
			+ "\075\001\001\000\016\012\106\017\105\047\026\050\071"
			+ "\051\015\057\075\001\001\000\002\001\001\000\002\001"
			+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
			+ "\000\002\001\001\000\002\001\001\000\010\047\026\050"
			+ "\116\051\015\001\001\000\010\047\026\050\117\051\015"
			+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
			+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
			+ "\000\032\011\052\012\076\017\054\037\057\041\066\047"
			+ "\026\050\071\051\015\057\075\061\065\062\127\063\053"
			+ "\001\001\000\032\011\052\012\076\017\054\037\057\041"
			+ "\066\047\026\050\071\051\015\057\075\061\065\062\126"
			+ "\063\053\001\001\000\002\001\001\000\002\001\001\000"
			+ "\002\001\001\000\002\001\001\000\002\001\001\000\002"
			+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
			+ "\001\000\002\001\001\000\010\047\026\050\144\051\015"
			+ "\001\001\000\002\001\001\000\010\047\026\050\143\051"
			+ "\015\001\001\000\002\001\001\000\002\001\001\000\002"
			+ "\001\001\000\004\057\147\001\001\000\002\001\001\000"
			+ "\002\001\001\000\002\001\001\000\032\011\052\012\076"
			+ "\017\054\037\057\041\066\047\026\050\071\051\015\057"
			+ "\075\061\065\062\153\063\053\001\001\000\002\001\001"
			+ "\000\002\001\001\000\006\014\160\015\157\001\001\000"
			+ "\004\024\170\001\001\000\002\001\001\000\002\001\001"
			+ "\000\006\014\160\015\162\001\001\000\002\001\001\000"
			+ "\002\001\001\000\002\001\001\000\002\001\001\000\002"
			+ "\001\001\000\002\001\001\000\004\013\207\001\001\000"
			+ "\002\001\001\000\002\001\001\000\002\001\001\000\002"
			+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
			+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
			+ "\000\002\001\001\000\002\001\001\000\004\057\214\001"
			+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
			+ "\000\002\001\001\000\004\057\213\001\001\000\002\001"
			+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
			+ "\000\002\001\001\000\002\001\001\000\010\047\026\050"
			+ "\222\051\015\001\001\000\002\001\001\000\002\001\001"
			+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
			+ "\002\001\001\000\002\001\001\000\002\001\001\000\004"
			+ "\036\233\001\001\000\002\001\001\000\002\001\001\000"
			+ "\002\001\001\000\002\001\001\000\002\001\001\000\002"
			+ "\001\001\000\002\001\001\000\016\004\244\005\235\006"
			+ "\u0116\007\241\017\236\057\253\001\001\000\022\004\244"
			+ "\005\235\006\250\007\241\017\236\045\251\046\u010f\057"
			+ "\253\001\001\000\002\001\001\000\002\001\001\000\002"
			+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
			+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
			+ "\000\014\027\260\030\257\047\026\050\261\051\015\001"
			+ "\001\000\002\001\001\000\010\031\271\044\273\064\272"
			+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
			+ "\001\000\002\001\001\000\014\027\260\030\265\047\026"
			+ "\050\261\051\015\001\001\000\002\001\001\000\010\017"
			+ "\356\042\355\043\357\001\001\000\032\011\052\012\076"
			+ "\017\054\037\057\041\066\047\026\050\071\051\015\057"
			+ "\075\061\065\062\351\063\053\001\001\000\006\016\275"
			+ "\017\276\001\001\000\004\044\274\001\001\000\002\001"
			+ "\001\000\002\001\001\000\002\001\001\000\004\034\302"
			+ "\001\001\000\002\001\001\000\006\016\300\017\276\001"
			+ "\001\000\002\001\001\000\014\004\310\032\307\033\306"
			+ "\035\303\057\311\001\001\000\002\001\001\000\002\001"
			+ "\001\000\014\004\310\032\350\033\306\035\303\057\311"
			+ "\001\001\000\014\004\310\032\346\033\306\035\303\057"
			+ "\311\001\001\000\002\001\001\000\002\001\001\000\002"
			+ "\001\001\000\002\001\001\000\004\004\325\001\001\000"
			+ "\004\004\324\001\001\000\004\004\323\001\001\000\004"
			+ "\004\322\001\001\000\004\004\321\001\001\000\004\004"
			+ "\320\001\001\000\002\001\001\000\002\001\001\000\002"
			+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
			+ "\001\000\004\057\341\001\001\000\004\057\340\001\001"
			+ "\000\004\057\337\001\001\000\004\057\336\001\001\000"
			+ "\004\057\335\001\001\000\004\057\334\001\001\000\002"
			+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
			+ "\001\000\002\001\001\000\002\001\001\000\014\004\310"
			+ "\032\345\033\306\035\303\057\311\001\001\000\014\004"
			+ "\310\032\344\033\306\035\303\057\311\001\001\000\002"
			+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
			+ "\001\000\002\001\001\000\006\031\352\044\353\001\001"
			+ "\000\004\044\354\001\001\000\002\001\001\000\002\001"
			+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
			+ "\000\002\001\001\000\002\001\001\000\010\017\356\042"
			+ "\355\043\363\001\001\000\002\001\001\000\002\001\001"
			+ "\000\002\001\001\000\004\017\367\001\001\000\002\001"
			+ "\001\000\002\001\001\000\022\004\244\005\235\006\250"
			+ "\007\241\017\236\045\251\046\372\057\253\001\001\000"
			+ "\002\001\001\000\016\004\244\005\235\006\u0104\007\241"
			+ "\017\236\057\253\001\001\000\002\001\001\000\016\004"
			+ "\244\005\235\006\u0102\007\241\017\236\057\253\001\001"
			+ "\000\016\004\244\005\235\006\u0101\007\241\017\236\057"
			+ "\253\001\001\000\016\004\244\005\235\006\u0100\007\241"
			+ "\017\236\057\253\001\001\000\002\001\001\000\002\001"
			+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
			+ "\000\004\017\u0106\001\001\000\002\001\001\000\002\001"
			+ "\001\000\004\017\u0109\001\001\000\002\001\001\000\002"
			+ "\001\001\000\004\017\u010c\001\001\000\002\001\001\000"
			+ "\002\001\001\000\002\001\001\000\002\001\001\000\014"
			+ "\027\260\030\u0111\047\026\050\261\051\015\001\001\000"
			+ "\010\031\271\044\273\064\u0112\001\001\000\002\001\001"
			+ "\000\014\027\260\030\u0114\047\026\050\261\051\015\001"
			+ "\001\000\010\031\271\044\273\064\u0115\001\001\000\002"
			+ "\001\001\000\002\001\001\000\002\001\001\000\014\027"
			+ "\260\030\u0119\047\026\050\261\051\015\001\001\000\010"
			+ "\031\271\044\273\064\u011a\001\001\000\002\001\001\000"
			+ "\004\017\u011c\001\001\000\002\001\001\000\002\001\001"
			+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
			+ "\004\036\u0122\001\001\000\002\001\001\000\002\001\001"
			+ "\000\002\001\001\000\006\057\u0127\060\u0126\001\001\000"
			+ "\002\001\001\000\002\001\001\000\006\057\u0127\060\u0129"
			+ "\001\001\000\002\001\001\000\002\001\001\000\006\057"
			+ "\u0127\060\u012c\001\001\000\002\001\001\000\002\001\001"
			+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
			+ "\002\001\001\000\004\024\u0133\001\001\000\002\001\001"
			+ "\000\002\001\001\000\004\024\u0136\001\001\000\002\001" + "\001" });

	/** Access to <code>reduce_goto</code> table. */
	public short[][] reduce_table() {
		return _reduce_table;
	}

	/** Instance of action encapsulation class. */
	protected CUP$Grm$actions action_obj;

	/** Action encapsulation object initializer. */
	protected void init_actions() {
		action_obj = new CUP$Grm$actions(this);
	}

	/** Invoke a user supplied parse action. */
	public java_cup.runtime.Symbol do_action(int act_num,
			java_cup.runtime.lr_parser parser, java.util.Stack stack, int top)
			throws java.lang.Exception {
		/* call code in generated class */
		return action_obj.CUP$Grm$do_action(act_num, parser, stack, top);
	}

	/** Indicates start state. */
	public int start_state() {
		return 0;
	}

	/** Indicates start production. */
	public int start_production() {
		return 0;
	}

	/** <code>EOF</code> Symbol index. */
	public int EOF_sym() {
		return 0;
	}

	/** <code>error</code> Symbol index. */
	public int error_sym() {
		return 1;
	}

	/** Scan to get the next Symbol. */
	public java_cup.runtime.Symbol scan() throws java.lang.Exception {
		return lexer.nextToken();
	}

	public Absyn parseResult;
	Lexer lexer;
	ErrorMsg.ErrorMsg errorMsg;

	public Grm(Lexer l, ErrorMsg.ErrorMsg err) {
		this();
		errorMsg = err;
		lexer = l;
	}

}

/** Cup generated class to encapsulate user supplied action code. */
class CUP$Grm$actions {
	private final Grm parser;

	/** Constructor */
	CUP$Grm$actions(Grm parser) {
		this.parser = parser;
	}

	/** Method with the actual generated action code. */
	public final java_cup.runtime.Symbol CUP$Grm$do_action(int CUP$Grm$act_num,
			java_cup.runtime.lr_parser CUP$Grm$parser,
			java.util.Stack CUP$Grm$stack, int CUP$Grm$top)
			throws java.lang.Exception {
		/* Symbol object for return from actions */
		java_cup.runtime.Symbol CUP$Grm$result;

		/* select the action based on the action number */
		switch (CUP$Grm$act_num) {
		/* . . . . . . . . . . . . . . . . . . . . */
		case 155: // alter_exp ::= ALTERTABLE ID DROPCOLUMN ID
		{
			AlterExp RESULT = null;
			int aleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 3)).left;
			int aright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 3)).right;
			Object a = (Object) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 3)).value;
			int tnleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).left;
			int tnright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).right;
			String tn = (String) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).value;
			int cnleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int cnright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			String cn = (String) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new AlterExp(aleft, Const.DROP, tn, cn, null);
			CUP$Grm$result = new java_cup.runtime.Symbol(6/* alter_exp */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 3)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 154: // alter_exp ::= ALTERTABLE ID ALTERCOLUMN ID data_type
		{
			AlterExp RESULT = null;
			int aleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 4)).left;
			int aright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 4)).right;
			Object a = (Object) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 4)).value;
			int tnleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 3)).left;
			int tnright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 3)).right;
			String tn = (String) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 3)).value;
			int cnleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).left;
			int cnright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).right;
			String cn = (String) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).value;
			int dleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int dright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			DataType d = (DataType) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new AlterExp(aleft, Const.ALTER, tn, cn, d);
			CUP$Grm$result = new java_cup.runtime.Symbol(6/* alter_exp */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 4)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 153: // alter_exp ::= ALTERTABLE ID ADD ID data_type
		{
			AlterExp RESULT = null;
			int aleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 4)).left;
			int aright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 4)).right;
			Object a = (Object) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 4)).value;
			int tnleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 3)).left;
			int tnright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 3)).right;
			String tn = (String) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 3)).value;
			int cnleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).left;
			int cnright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).right;
			String cn = (String) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).value;
			int dleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int dright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			DataType d = (DataType) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new AlterExp(aleft, Const.ADD, tn, cn, d);
			CUP$Grm$result = new java_cup.runtime.Symbol(6/* alter_exp */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 4)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 152: // drop_exp ::= DROPVIEW id_list
		{
			DropExp RESULT = null;
			int dleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).left;
			int dright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).right;
			Object d = (Object) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).value;
			int lleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int lright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			IdList l = (IdList) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new DropExp(dleft, Const.VIEW, l);
			CUP$Grm$result = new java_cup.runtime.Symbol(20/* drop_exp */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 1)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 151: // drop_exp ::= DROPTABLE id_list
		{
			DropExp RESULT = null;
			int dleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).left;
			int dright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).right;
			Object d = (Object) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).value;
			int lleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int lright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			IdList l = (IdList) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new DropExp(dleft, Const.TABLE, l);
			CUP$Grm$result = new java_cup.runtime.Symbol(20/* drop_exp */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 1)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 150: // drop_exp ::= DROPINDEX id_list
		{
			DropExp RESULT = null;
			int dleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).left;
			int dright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).right;
			Object d = (Object) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).value;
			int lleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int lright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			IdList l = (IdList) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new DropExp(dleft, Const.INDEX, l);
			CUP$Grm$result = new java_cup.runtime.Symbol(20/* drop_exp */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 1)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 149: // update_column ::= ID EQ value_exp
		{
			UpdateColumn RESULT = null;
			int nleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).left;
			int nright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).right;
			String n = (String) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).value;
			int vleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int vright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			ValueExp v = (ValueExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new UpdateColumn(nleft, n, v);
			CUP$Grm$result = new java_cup.runtime.Symbol(
					42/* update_column */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 148: // update_column_list ::= update_column COMMA
					// update_column_list
		{
			UpdateColumnList RESULT = null;
			int hleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).left;
			int hright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).right;
			UpdateColumn h = (UpdateColumn) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).value;
			int tleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int tright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			UpdateColumnList t = (UpdateColumnList) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new UpdateColumnList(hleft, h, t);
			CUP$Grm$result = new java_cup.runtime.Symbol(
					43/* update_column_list */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 147: // update_column_list ::= update_column
		{
			UpdateColumnList RESULT = null;
			int uleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int uright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			UpdateColumn u = (UpdateColumn) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new UpdateColumnList(uleft, u, null);
			CUP$Grm$result = new java_cup.runtime.Symbol(
					43/* update_column_list */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 146: // update_exp ::= UPDATE ID SET update_column_list WHERE
					// where_cond_exp
		{
			UpdateExp RESULT = null;
			int uleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 5)).left;
			int uright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 5)).right;
			Object u = (Object) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 5)).value;
			int nleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 4)).left;
			int nright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 4)).right;
			String n = (String) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 4)).value;
			int lleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).left;
			int lright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).right;
			UpdateColumnList l = (UpdateColumnList) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).value;
			int wleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int wright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			WhereCondExp w = (WhereCondExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new UpdateExp(uleft, n, l, w);
			CUP$Grm$result = new java_cup.runtime.Symbol(44/* update_exp */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 5)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 145: // delete_exp ::= DELETE FROM ID WHERE where_cond_exp
		{
			DeleteExp RESULT = null;
			int dleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 4)).left;
			int dright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 4)).right;
			Object d = (Object) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 4)).value;
			int nleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).left;
			int nright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).right;
			String n = (String) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).value;
			int wleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int wright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			WhereCondExp w = (WhereCondExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new DeleteExp(dleft, n, w);
			CUP$Grm$result = new java_cup.runtime.Symbol(19/* delete_exp */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 4)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 144: // value_exp_list ::= value_exp COMMA value_exp_list
		{
			ValueExpList RESULT = null;
			int hleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).left;
			int hright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).right;
			ValueExp h = (ValueExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).value;
			int tleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int tright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			ValueExpList t = (ValueExpList) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new ValueExpList(hleft, h, t);
			CUP$Grm$result = new java_cup.runtime.Symbol(
					46/* value_exp_list */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 143: // value_exp_list ::= value_exp
		{
			ValueExpList RESULT = null;
			int eleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int eright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			ValueExp e = (ValueExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new ValueExpList(eleft, e, null);
			CUP$Grm$result = new java_cup.runtime.Symbol(
					46/* value_exp_list */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 142: // insert_exp ::= INSERTINTO ID LPAREN id_list RPAREN VALUES
					// LPAREN value_exp_list RPAREN
		{
			InsertExp RESULT = null;
			int ileft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 8)).left;
			int iright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 8)).right;
			Object i = (Object) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 8)).value;
			int nleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 7)).left;
			int nright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 7)).right;
			String n = (String) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 7)).value;
			int illeft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 5)).left;
			int ilright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 5)).right;
			IdList il = (IdList) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 5)).value;
			int vlleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).left;
			int vlright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).right;
			ValueExpList vl = (ValueExpList) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).value;
			RESULT = new InsertExp(ileft, n, il, vl);
			CUP$Grm$result = new java_cup.runtime.Symbol(30/* insert_exp */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 8)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 141: // insert_exp ::= INSERTINTO ID VALUES LPAREN value_exp_list
					// RPAREN
		{
			InsertExp RESULT = null;
			int ileft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 5)).left;
			int iright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 5)).right;
			Object i = (Object) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 5)).value;
			int nleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 4)).left;
			int nright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 4)).right;
			String n = (String) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 4)).value;
			int vlleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).left;
			int vlright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).right;
			ValueExpList vl = (ValueExpList) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).value;
			RESULT = new InsertExp(ileft, n, null, vl);
			CUP$Grm$result = new java_cup.runtime.Symbol(30/* insert_exp */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 5)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 140: // order_column ::= column DESC
		{
			OrderColumn RESULT = null;
			int cleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).left;
			int cright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).right;
			Column c = (Column) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).value;
			RESULT = new OrderColumn(cleft, false, c);
			CUP$Grm$result = new java_cup.runtime.Symbol(32/* order_column */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 1)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 139: // order_column ::= column ASC
		{
			OrderColumn RESULT = null;
			int cleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).left;
			int cright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).right;
			Column c = (Column) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).value;
			RESULT = new OrderColumn(cleft, true, c);
			CUP$Grm$result = new java_cup.runtime.Symbol(32/* order_column */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 1)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 138: // order_column ::= column
		{
			OrderColumn RESULT = null;
			int cleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int cright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			Column c = (Column) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new OrderColumn(cleft, true, c);
			CUP$Grm$result = new java_cup.runtime.Symbol(32/* order_column */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 137: // order_column_list ::= order_column COMMA order_column_list
		{
			OrderColumnList RESULT = null;
			int hleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).left;
			int hright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).right;
			OrderColumn h = (OrderColumn) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).value;
			int tleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int tright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			OrderColumnList t = (OrderColumnList) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new OrderColumnList(hleft, h, t);
			CUP$Grm$result = new java_cup.runtime.Symbol(
					33/* order_column_list */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 136: // order_column_list ::= order_column
		{
			OrderColumnList RESULT = null;
			int cleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int cright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			OrderColumn c = (OrderColumn) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new OrderColumnList(cleft, c, null);
			CUP$Grm$result = new java_cup.runtime.Symbol(
					33/* order_column_list */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 135: // order_exp ::= ORDERBY order_column_list
		{
			OrderExp RESULT = null;
			int oleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).left;
			int oright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).right;
			Object o = (Object) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).value;
			int lleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int lright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			OrderColumnList l = (OrderColumnList) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new OrderExp(oleft, l);
			CUP$Grm$result = new java_cup.runtime.Symbol(34/* order_exp */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 1)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 134: // having_cond_op ::= value_exp LE aggregate_exp
		{
			HavingCondOp RESULT = null;
			int vleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).left;
			int vright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).right;
			ValueExp v = (ValueExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).value;
			int aleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int aright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			AggregateExp a = (AggregateExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new HavingCondOp(vleft, Const.GE, a, v);
			CUP$Grm$result = new java_cup.runtime.Symbol(
					27/* having_cond_op */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 133: // having_cond_op ::= value_exp LT aggregate_exp
		{
			HavingCondOp RESULT = null;
			int vleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).left;
			int vright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).right;
			ValueExp v = (ValueExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).value;
			int aleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int aright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			AggregateExp a = (AggregateExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new HavingCondOp(vleft, Const.GT, a, v);
			CUP$Grm$result = new java_cup.runtime.Symbol(
					27/* having_cond_op */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 132: // having_cond_op ::= value_exp GE aggregate_exp
		{
			HavingCondOp RESULT = null;
			int vleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).left;
			int vright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).right;
			ValueExp v = (ValueExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).value;
			int aleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int aright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			AggregateExp a = (AggregateExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new HavingCondOp(vleft, Const.LE, a, v);
			CUP$Grm$result = new java_cup.runtime.Symbol(
					27/* having_cond_op */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 131: // having_cond_op ::= value_exp GT aggregate_exp
		{
			HavingCondOp RESULT = null;
			int vleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).left;
			int vright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).right;
			ValueExp v = (ValueExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).value;
			int aleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int aright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			AggregateExp a = (AggregateExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new HavingCondOp(vleft, Const.LT, a, v);
			CUP$Grm$result = new java_cup.runtime.Symbol(
					27/* having_cond_op */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 130: // having_cond_op ::= value_exp NEQ aggregate_exp
		{
			HavingCondOp RESULT = null;
			int vleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).left;
			int vright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).right;
			ValueExp v = (ValueExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).value;
			int aleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int aright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			AggregateExp a = (AggregateExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new HavingCondOp(vleft, Const.NEQ, a, v);
			CUP$Grm$result = new java_cup.runtime.Symbol(
					27/* having_cond_op */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 129: // having_cond_op ::= value_exp EQ aggregate_exp
		{
			HavingCondOp RESULT = null;
			int vleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).left;
			int vright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).right;
			ValueExp v = (ValueExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).value;
			int aleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int aright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			AggregateExp a = (AggregateExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new HavingCondOp(vleft, Const.EQ, a, v);
			CUP$Grm$result = new java_cup.runtime.Symbol(
					27/* having_cond_op */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 128: // having_cond_op ::= aggregate_exp LE value_exp
		{
			HavingCondOp RESULT = null;
			int aleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).left;
			int aright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).right;
			AggregateExp a = (AggregateExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).value;
			int vleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int vright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			ValueExp v = (ValueExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new HavingCondOp(aleft, Const.LE, a, v);
			CUP$Grm$result = new java_cup.runtime.Symbol(
					27/* having_cond_op */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 127: // having_cond_op ::= aggregate_exp LT value_exp
		{
			HavingCondOp RESULT = null;
			int aleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).left;
			int aright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).right;
			AggregateExp a = (AggregateExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).value;
			int vleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int vright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			ValueExp v = (ValueExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new HavingCondOp(aleft, Const.LT, a, v);
			CUP$Grm$result = new java_cup.runtime.Symbol(
					27/* having_cond_op */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 126: // having_cond_op ::= aggregate_exp GE value_exp
		{
			HavingCondOp RESULT = null;
			int aleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).left;
			int aright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).right;
			AggregateExp a = (AggregateExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).value;
			int vleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int vright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			ValueExp v = (ValueExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new HavingCondOp(aleft, Const.GE, a, v);
			CUP$Grm$result = new java_cup.runtime.Symbol(
					27/* having_cond_op */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 125: // having_cond_op ::= aggregate_exp GT value_exp
		{
			HavingCondOp RESULT = null;
			int aleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).left;
			int aright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).right;
			AggregateExp a = (AggregateExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).value;
			int vleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int vright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			ValueExp v = (ValueExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new HavingCondOp(aleft, Const.GT, a, v);
			CUP$Grm$result = new java_cup.runtime.Symbol(
					27/* having_cond_op */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 124: // having_cond_op ::= aggregate_exp NEQ value_exp
		{
			HavingCondOp RESULT = null;
			int aleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).left;
			int aright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).right;
			AggregateExp a = (AggregateExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).value;
			int vleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int vright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			ValueExp v = (ValueExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new HavingCondOp(aleft, Const.NEQ, a, v);
			CUP$Grm$result = new java_cup.runtime.Symbol(
					27/* having_cond_op */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 123: // having_cond_op ::= aggregate_exp EQ value_exp
		{
			HavingCondOp RESULT = null;
			int aleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).left;
			int aright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).right;
			AggregateExp a = (AggregateExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).value;
			int vleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int vright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			ValueExp v = (ValueExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new HavingCondOp(aleft, Const.EQ, a, v);
			CUP$Grm$result = new java_cup.runtime.Symbol(
					27/* having_cond_op */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 122: // having_cond_bin_exp ::= having_cond_exp AND having_cond_exp
		{
			HavingCondBinExp RESULT = null;
			int lleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).left;
			int lright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).right;
			HavingCondExp l = (HavingCondExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).value;
			int rleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int rright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			HavingCondExp r = (HavingCondExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new HavingCondBinExp(lleft, true, l, r);
			CUP$Grm$result = new java_cup.runtime.Symbol(
					25/* having_cond_bin_exp */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 121: // having_cond_bin_exp ::= having_cond_exp OR having_cond_exp
		{
			HavingCondBinExp RESULT = null;
			int lleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).left;
			int lright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).right;
			HavingCondExp l = (HavingCondExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).value;
			int rleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int rright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			HavingCondExp r = (HavingCondExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new HavingCondBinExp(lleft, false, l, r);
			CUP$Grm$result = new java_cup.runtime.Symbol(
					25/* having_cond_bin_exp */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 120: // having_cond_exp ::= LPAREN having_cond_exp RPAREN
		{
			HavingCondExp RESULT = null;
			int lleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).left;
			int lright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).right;
			Object l = (Object) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).value;
			int eleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).left;
			int eright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).right;
			HavingCondExp e = (HavingCondExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).value;
			e.pos = lleft;
			RESULT = e;
			CUP$Grm$result = new java_cup.runtime.Symbol(
					24/* having_cond_exp */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 119: // having_cond_exp ::= NOT having_cond_exp
		{
			HavingCondExp RESULT = null;
			int nleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).left;
			int nright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).right;
			Object n = (Object) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).value;
			int eleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int eright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			HavingCondExp e = (HavingCondExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			e.pos = nleft;
			e.isNeg = true;
			RESULT = e;
			CUP$Grm$result = new java_cup.runtime.Symbol(
					24/* having_cond_exp */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 1)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 118: // having_cond_exp ::= having_cond_bin_exp
		{
			HavingCondExp RESULT = null;
			int eleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int eright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			HavingCondBinExp e = (HavingCondBinExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = e;
			CUP$Grm$result = new java_cup.runtime.Symbol(
					24/* having_cond_exp */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 117: // having_cond_exp ::= having_cond_op
		{
			HavingCondExp RESULT = null;
			int eleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int eright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			HavingCondOp e = (HavingCondOp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = e;
			CUP$Grm$result = new java_cup.runtime.Symbol(
					24/* having_cond_exp */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 116: // having_exp ::= HAVING having_cond_exp
		{
			HavingExp RESULT = null;
			int hleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).left;
			int hright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).right;
			Object h = (Object) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).value;
			int eleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int eright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			HavingCondExp e = (HavingCondExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new HavingExp(hleft, e);
			CUP$Grm$result = new java_cup.runtime.Symbol(26/* having_exp */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 1)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 115: // column_list ::= column COMMA column_list
		{
			ColumnList RESULT = null;
			int hleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).left;
			int hright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).right;
			Column h = (Column) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).value;
			int tleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int tright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			ColumnList t = (ColumnList) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new ColumnList(hleft, h, t);
			CUP$Grm$result = new java_cup.runtime.Symbol(12/* column_list */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 114: // column_list ::= column
		{
			ColumnList RESULT = null;
			int cleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int cright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			Column c = (Column) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new ColumnList(cleft, c, null);
			CUP$Grm$result = new java_cup.runtime.Symbol(12/* column_list */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 113: // group_exp ::= GROUPBY column_list
		{
			GroupExp RESULT = null;
			int gleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).left;
			int gright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).right;
			Object g = (Object) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).value;
			int lleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int lright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			ColumnList l = (ColumnList) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new GroupExp(gleft, l, null);
			CUP$Grm$result = new java_cup.runtime.Symbol(23/* group_exp */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 1)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 112: // group_exp ::= GROUPBY column_list having_exp
		{
			GroupExp RESULT = null;
			int gleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).left;
			int gright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).right;
			Object g = (Object) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).value;
			int lleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).left;
			int lright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).right;
			ColumnList l = (ColumnList) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).value;
			int hleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int hright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			HavingExp h = (HavingExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new GroupExp(gleft, l, h);
			CUP$Grm$result = new java_cup.runtime.Symbol(23/* group_exp */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 111: // in_exp ::= column NOT IN select_exp
		{
			InExp RESULT = null;
			int cleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 3)).left;
			int cright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 3)).right;
			Column c = (Column) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 3)).value;
			int sleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int sright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			SelectExp s = (SelectExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new InExp(cleft, false, c, s);
			CUP$Grm$result = new java_cup.runtime.Symbol(29/* in_exp */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 3)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 110: // in_exp ::= column IN select_exp
		{
			InExp RESULT = null;
			int cleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).left;
			int cright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).right;
			Column c = (Column) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).value;
			int sleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int sright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			SelectExp s = (SelectExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new InExp(cleft, true, c, s);
			CUP$Grm$result = new java_cup.runtime.Symbol(29/* in_exp */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 109: // like_exp ::= column LIKE STRINGVALUE
		{
			LikeExp RESULT = null;
			int cleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).left;
			int cright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).right;
			Column c = (Column) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).value;
			int sleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int sright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			String s = (String) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new LikeExp(cleft, c, s);
			CUP$Grm$result = new java_cup.runtime.Symbol(31/* like_exp */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 108: // cmp_op ::= value_exp
		{
			CmpOp RESULT = null;
			int vleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int vright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			ValueExp v = (ValueExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new CmpOp(vleft, Const.SOLO, null, null, v);
			CUP$Grm$result = new java_cup.runtime.Symbol(8/* cmp_op */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 107: // cmp_op ::= ALL select_exp
		{
			CmpOp RESULT = null;
			int aleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).left;
			int aright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).right;
			Object a = (Object) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).value;
			int sleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int sright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			SelectExp s = (SelectExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new CmpOp(aleft, Const.ALL, null, s, null);
			CUP$Grm$result = new java_cup.runtime.Symbol(8/* cmp_op */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 1)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 106: // cmp_op ::= ANY select_exp
		{
			CmpOp RESULT = null;
			int aleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).left;
			int aright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).right;
			Object a = (Object) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).value;
			int sleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int sright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			SelectExp s = (SelectExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new CmpOp(aleft, Const.ANY, null, s, null);
			CUP$Grm$result = new java_cup.runtime.Symbol(8/* cmp_op */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 1)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 105: // cmp_op ::= select_exp
		{
			CmpOp RESULT = null;
			int sleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int sright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			SelectExp s = (SelectExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new CmpOp(sleft, Const.SOLO, null, s, null);
			CUP$Grm$result = new java_cup.runtime.Symbol(8/* cmp_op */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 104: // cmp_op ::= ALL column
		{
			CmpOp RESULT = null;
			int aleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).left;
			int aright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).right;
			Object a = (Object) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).value;
			int cleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int cright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			Column c = (Column) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new CmpOp(aleft, Const.ALL, c, null, null);
			CUP$Grm$result = new java_cup.runtime.Symbol(8/* cmp_op */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 1)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 103: // cmp_op ::= ANY column
		{
			CmpOp RESULT = null;
			int aleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).left;
			int aright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).right;
			Object a = (Object) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).value;
			int cleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int cright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			Column c = (Column) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new CmpOp(aleft, Const.ANY, c, null, null);
			CUP$Grm$result = new java_cup.runtime.Symbol(8/* cmp_op */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 1)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 102: // cmp_op ::= column
		{
			CmpOp RESULT = null;
			int cleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int cright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			Column c = (Column) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new CmpOp(cleft, Const.SOLO, c, null, null);
			CUP$Grm$result = new java_cup.runtime.Symbol(8/* cmp_op */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 101: // cmp_exp ::= cmp_op LE cmp_op
		{
			CmpExp RESULT = null;
			int lleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).left;
			int lright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).right;
			CmpOp l = (CmpOp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).value;
			int rleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int rright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			CmpOp r = (CmpOp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new CmpExp(lleft, Const.LE, l, r);
			CUP$Grm$result = new java_cup.runtime.Symbol(7/* cmp_exp */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 100: // cmp_exp ::= cmp_op LT cmp_op
		{
			CmpExp RESULT = null;
			int lleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).left;
			int lright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).right;
			CmpOp l = (CmpOp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).value;
			int rleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int rright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			CmpOp r = (CmpOp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new CmpExp(lleft, Const.LT, l, r);
			CUP$Grm$result = new java_cup.runtime.Symbol(7/* cmp_exp */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 99: // cmp_exp ::= cmp_op GE cmp_op
		{
			CmpExp RESULT = null;
			int lleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).left;
			int lright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).right;
			CmpOp l = (CmpOp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).value;
			int rleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int rright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			CmpOp r = (CmpOp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new CmpExp(lleft, Const.GE, l, r);
			CUP$Grm$result = new java_cup.runtime.Symbol(7/* cmp_exp */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 98: // cmp_exp ::= cmp_op GT cmp_op
		{
			CmpExp RESULT = null;
			int lleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).left;
			int lright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).right;
			CmpOp l = (CmpOp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).value;
			int rleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int rright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			CmpOp r = (CmpOp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new CmpExp(lleft, Const.GT, l, r);
			CUP$Grm$result = new java_cup.runtime.Symbol(7/* cmp_exp */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 97: // cmp_exp ::= cmp_op NEQ cmp_op
		{
			CmpExp RESULT = null;
			int lleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).left;
			int lright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).right;
			CmpOp l = (CmpOp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).value;
			int rleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int rright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			CmpOp r = (CmpOp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new CmpExp(lleft, Const.NEQ, l, r);
			CUP$Grm$result = new java_cup.runtime.Symbol(7/* cmp_exp */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 96: // cmp_exp ::= cmp_op EQ cmp_op
		{
			CmpExp RESULT = null;
			int lleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).left;
			int lright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).right;
			CmpOp l = (CmpOp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).value;
			int rleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int rright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			CmpOp r = (CmpOp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new CmpExp(lleft, Const.EQ, l, r);
			CUP$Grm$result = new java_cup.runtime.Symbol(7/* cmp_exp */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 95: // where_cond_bin_exp ::= where_cond_exp AND where_cond_exp
		{
			WhereCondBinExp RESULT = null;
			int lleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).left;
			int lright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).right;
			WhereCondExp l = (WhereCondExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).value;
			int rleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int rright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			WhereCondExp r = (WhereCondExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new WhereCondBinExp(lleft, true, l, r);
			CUP$Grm$result = new java_cup.runtime.Symbol(
					47/* where_cond_bin_exp */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 94: // where_cond_bin_exp ::= where_cond_exp OR where_cond_exp
		{
			WhereCondBinExp RESULT = null;
			int lleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).left;
			int lright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).right;
			WhereCondExp l = (WhereCondExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).value;
			int rleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int rright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			WhereCondExp r = (WhereCondExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new WhereCondBinExp(lleft, false, l, r);
			CUP$Grm$result = new java_cup.runtime.Symbol(
					47/* where_cond_bin_exp */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 93: // where_cond_op ::= in_exp
		{
			WhereCondOp RESULT = null;
			int eleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int eright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			InExp e = (InExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = e;
			CUP$Grm$result = new java_cup.runtime.Symbol(
					49/* where_cond_op */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 92: // where_cond_op ::= like_exp
		{
			WhereCondOp RESULT = null;
			int eleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int eright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			LikeExp e = (LikeExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = e;
			CUP$Grm$result = new java_cup.runtime.Symbol(
					49/* where_cond_op */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 91: // where_cond_op ::= cmp_exp
		{
			WhereCondOp RESULT = null;
			int eleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int eright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			CmpExp e = (CmpExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = e;
			CUP$Grm$result = new java_cup.runtime.Symbol(
					49/* where_cond_op */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 90: // where_cond_exp ::= LPAREN where_cond_exp RPAREN
		{
			WhereCondExp RESULT = null;
			int lleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).left;
			int lright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).right;
			Object l = (Object) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).value;
			int eleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).left;
			int eright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).right;
			WhereCondExp e = (WhereCondExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).value;
			e.pos = lleft;
			RESULT = e;
			CUP$Grm$result = new java_cup.runtime.Symbol(
					48/* where_cond_exp */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 89: // where_cond_exp ::= NOT where_cond_exp
		{
			WhereCondExp RESULT = null;
			int nleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).left;
			int nright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).right;
			Object n = (Object) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).value;
			int eleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int eright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			WhereCondExp e = (WhereCondExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			e.pos = nleft;
			e.isNeg = true;
			RESULT = e;
			CUP$Grm$result = new java_cup.runtime.Symbol(
					48/* where_cond_exp */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 1)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 88: // where_cond_exp ::= where_cond_bin_exp
		{
			WhereCondExp RESULT = null;
			int eleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int eright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			WhereCondBinExp e = (WhereCondBinExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = e;
			CUP$Grm$result = new java_cup.runtime.Symbol(
					48/* where_cond_exp */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 87: // where_cond_exp ::= where_cond_op
		{
			WhereCondExp RESULT = null;
			int eleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int eright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			WhereCondOp e = (WhereCondOp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = e;
			CUP$Grm$result = new java_cup.runtime.Symbol(
					48/* where_cond_exp */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 86: // where_exp ::= WHERE where_cond_exp group_exp order_exp
		{
			WhereExp RESULT = null;
			int wleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 3)).left;
			int wright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 3)).right;
			Object w = (Object) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 3)).value;
			int cleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).left;
			int cright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).right;
			WhereCondExp c = (WhereCondExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).value;
			int gleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).left;
			int gright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).right;
			GroupExp g = (GroupExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).value;
			int oleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int oright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			OrderExp o = (OrderExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new WhereExp(wleft, c, g, o);
			CUP$Grm$result = new java_cup.runtime.Symbol(50/* where_exp */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 3)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 85: // where_exp ::= WHERE where_cond_exp order_exp
		{
			WhereExp RESULT = null;
			int wleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).left;
			int wright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).right;
			Object w = (Object) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).value;
			int cleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).left;
			int cright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).right;
			WhereCondExp c = (WhereCondExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).value;
			int oleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int oright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			OrderExp o = (OrderExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new WhereExp(wleft, c, null, o);
			CUP$Grm$result = new java_cup.runtime.Symbol(50/* where_exp */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 84: // where_exp ::= WHERE where_cond_exp group_exp
		{
			WhereExp RESULT = null;
			int wleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).left;
			int wright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).right;
			Object w = (Object) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).value;
			int cleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).left;
			int cright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).right;
			WhereCondExp c = (WhereCondExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).value;
			int gleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int gright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			GroupExp g = (GroupExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new WhereExp(wleft, c, g, null);
			CUP$Grm$result = new java_cup.runtime.Symbol(50/* where_exp */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 83: // where_exp ::= WHERE where_cond_exp
		{
			WhereExp RESULT = null;
			int wleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).left;
			int wright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).right;
			Object w = (Object) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).value;
			int cleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int cright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			WhereCondExp c = (WhereCondExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new WhereExp(wleft, c, null, null);
			CUP$Grm$result = new java_cup.runtime.Symbol(50/* where_exp */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 1)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 82: // where_exp ::= group_exp order_exp
		{
			WhereExp RESULT = null;
			int gleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).left;
			int gright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).right;
			GroupExp g = (GroupExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).value;
			int oleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int oright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			OrderExp o = (OrderExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new WhereExp(gleft, null, g, o);
			CUP$Grm$result = new java_cup.runtime.Symbol(50/* where_exp */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 1)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 81: // where_exp ::= order_exp
		{
			WhereExp RESULT = null;
			int oleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int oright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			OrderExp o = (OrderExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new WhereExp(oleft, null, null, o);
			CUP$Grm$result = new java_cup.runtime.Symbol(50/* where_exp */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 80: // where_exp ::= group_exp
		{
			WhereExp RESULT = null;
			int gleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int gright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			GroupExp g = (GroupExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new WhereExp(gleft, null, g, null);
			CUP$Grm$result = new java_cup.runtime.Symbol(50/* where_exp */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 79: // where_exp ::=
		{
			WhereExp RESULT = null;

			CUP$Grm$result = new java_cup.runtime.Symbol(50/* where_exp */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 78: // from_table ::= select_exp
		{
			FromTable RESULT = null;
			int sleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int sright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			SelectExp s = (SelectExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new FromTable(sleft, null, s, null);
			CUP$Grm$result = new java_cup.runtime.Symbol(21/* from_table */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 77: // from_table ::= select_exp AS ID
		{
			FromTable RESULT = null;
			int sleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).left;
			int sright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).right;
			SelectExp s = (SelectExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).value;
			int nnleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int nnright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			String nn = (String) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new FromTable(sleft, null, s, nn);
			CUP$Grm$result = new java_cup.runtime.Symbol(21/* from_table */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 76: // from_table ::= ID
		{
			FromTable RESULT = null;
			int tnleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int tnright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			String tn = (String) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new FromTable(tnleft, tn, null, null);
			CUP$Grm$result = new java_cup.runtime.Symbol(21/* from_table */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 75: // from_table ::= ID AS ID
		{
			FromTable RESULT = null;
			int tnleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).left;
			int tnright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).right;
			String tn = (String) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).value;
			int nnleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int nnright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			String nn = (String) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new FromTable(tnleft, tn, null, nn);
			CUP$Grm$result = new java_cup.runtime.Symbol(21/* from_table */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 74: // from_table_list ::= from_table COMMA from_table_list
		{
			FromTableList RESULT = null;
			int hleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).left;
			int hright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).right;
			FromTable h = (FromTable) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).value;
			int tleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int tright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			FromTableList t = (FromTableList) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new FromTableList(hleft, h, t);
			CUP$Grm$result = new java_cup.runtime.Symbol(
					22/* from_table_list */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 73: // from_table_list ::= from_table
		{
			FromTableList RESULT = null;
			int fleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int fright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			FromTable f = (FromTable) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new FromTableList(fleft, f, null);
			CUP$Grm$result = new java_cup.runtime.Symbol(
					22/* from_table_list */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 72: // column ::= ID DOT ID
		{
			Column RESULT = null;
			int tnleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).left;
			int tnright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).right;
			String tn = (String) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).value;
			int cnleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int cnright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			String cn = (String) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new Column(tnleft, tn, cn);
			CUP$Grm$result = new java_cup.runtime.Symbol(13/* column */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 71: // column ::= ID
		{
			Column RESULT = null;
			int nleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int nright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			String n = (String) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new Column(nleft, null, n);
			CUP$Grm$result = new java_cup.runtime.Symbol(13/* column */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 70: // aggregate_exp ::= COUNT LPAREN column RPAREN
		{
			AggregateExp RESULT = null;
			int eleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 3)).left;
			int eright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 3)).right;
			Object e = (Object) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 3)).value;
			int cleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).left;
			int cright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).right;
			Column c = (Column) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).value;
			RESULT = new AggregateExp(eleft, Const.COUNT, c);
			CUP$Grm$result = new java_cup.runtime.Symbol(2/* aggregate_exp */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 3)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 69: // aggregate_exp ::= SUM LPAREN column RPAREN
		{
			AggregateExp RESULT = null;
			int eleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 3)).left;
			int eright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 3)).right;
			Object e = (Object) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 3)).value;
			int cleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).left;
			int cright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).right;
			Column c = (Column) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).value;
			RESULT = new AggregateExp(eleft, Const.SUM, c);
			CUP$Grm$result = new java_cup.runtime.Symbol(2/* aggregate_exp */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 3)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 68: // aggregate_exp ::= MIN LPAREN column RPAREN
		{
			AggregateExp RESULT = null;
			int eleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 3)).left;
			int eright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 3)).right;
			Object e = (Object) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 3)).value;
			int cleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).left;
			int cright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).right;
			Column c = (Column) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).value;
			RESULT = new AggregateExp(eleft, Const.MIN, c);
			CUP$Grm$result = new java_cup.runtime.Symbol(2/* aggregate_exp */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 3)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 67: // aggregate_exp ::= MAX LPAREN column RPAREN
		{
			AggregateExp RESULT = null;
			int eleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 3)).left;
			int eright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 3)).right;
			Object e = (Object) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 3)).value;
			int cleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).left;
			int cright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).right;
			Column c = (Column) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).value;
			RESULT = new AggregateExp(eleft, Const.MAX, c);
			CUP$Grm$result = new java_cup.runtime.Symbol(2/* aggregate_exp */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 3)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 66: // aggregate_exp ::= AVG LPAREN column RPAREN
		{
			AggregateExp RESULT = null;
			int eleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 3)).left;
			int eright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 3)).right;
			Object e = (Object) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 3)).value;
			int cleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).left;
			int cright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).right;
			Column c = (Column) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).value;
			RESULT = new AggregateExp(eleft, Const.AVG, c);
			CUP$Grm$result = new java_cup.runtime.Symbol(2/* aggregate_exp */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 3)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 65: // algebra_bin_exp ::= algebra_exp DIVIDE algebra_exp
		{
			AlgebraBinExp RESULT = null;
			int lleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).left;
			int lright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).right;
			AlgebraExp l = (AlgebraExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).value;
			int rleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int rright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			AlgebraExp r = (AlgebraExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new AlgebraBinExp(lleft, Const.DIVIDE, l, r);
			CUP$Grm$result = new java_cup.runtime.Symbol(3/* algebra_bin_exp */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 64: // algebra_bin_exp ::= algebra_exp STAR algebra_exp
		{
			AlgebraBinExp RESULT = null;
			int lleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).left;
			int lright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).right;
			AlgebraExp l = (AlgebraExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).value;
			int rleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int rright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			AlgebraExp r = (AlgebraExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new AlgebraBinExp(lleft, Const.STAR, l, r);
			CUP$Grm$result = new java_cup.runtime.Symbol(3/* algebra_bin_exp */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 63: // algebra_bin_exp ::= algebra_exp MINUS algebra_exp
		{
			AlgebraBinExp RESULT = null;
			int lleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).left;
			int lright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).right;
			AlgebraExp l = (AlgebraExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).value;
			int rleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int rright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			AlgebraExp r = (AlgebraExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new AlgebraBinExp(lleft, Const.MINUS, l, r);
			CUP$Grm$result = new java_cup.runtime.Symbol(3/* algebra_bin_exp */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 62: // algebra_bin_exp ::= algebra_exp PLUS algebra_exp
		{
			AlgebraBinExp RESULT = null;
			int lleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).left;
			int lright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).right;
			AlgebraExp l = (AlgebraExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).value;
			int rleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int rright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			AlgebraExp r = (AlgebraExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new AlgebraBinExp(lleft, Const.PLUS, l, r);
			CUP$Grm$result = new java_cup.runtime.Symbol(3/* algebra_bin_exp */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 61: // algebra_op ::= aggregate_exp
		{
			AlgebraOp RESULT = null;
			int aleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int aright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			AggregateExp a = (AggregateExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new AlgebraOp(aleft, null, null, a);
			CUP$Grm$result = new java_cup.runtime.Symbol(5/* algebra_op */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 60: // algebra_op ::= value_exp
		{
			AlgebraOp RESULT = null;
			int vleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int vright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			ValueExp v = (ValueExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new AlgebraOp(vleft, null, v, null);
			CUP$Grm$result = new java_cup.runtime.Symbol(5/* algebra_op */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 59: // algebra_op ::= column
		{
			AlgebraOp RESULT = null;
			int cleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int cright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			Column c = (Column) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new AlgebraOp(cleft, c, null, null);
			CUP$Grm$result = new java_cup.runtime.Symbol(5/* algebra_op */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 58: // algebra_exp ::= LPAREN algebra_exp RPAREN
		{
			AlgebraExp RESULT = null;
			int lleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).left;
			int lright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).right;
			Object l = (Object) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).value;
			int eleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).left;
			int eright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).right;
			AlgebraExp e = (AlgebraExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).value;
			e.pos = lleft;
			RESULT = e;
			CUP$Grm$result = new java_cup.runtime.Symbol(4/* algebra_exp */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 57: // algebra_exp ::= algebra_bin_exp
		{
			AlgebraExp RESULT = null;
			int eleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int eright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			AlgebraBinExp e = (AlgebraBinExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = e;
			CUP$Grm$result = new java_cup.runtime.Symbol(4/* algebra_exp */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 56: // algebra_exp ::= algebra_op
		{
			AlgebraExp RESULT = null;
			int eleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int eright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			AlgebraOp e = (AlgebraOp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = e;
			CUP$Grm$result = new java_cup.runtime.Symbol(4/* algebra_exp */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 55: // select_column ::= algebra_exp AS ID
		{
			SelectColumn RESULT = null;
			int eleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).left;
			int eright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).right;
			AlgebraExp e = (AlgebraExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).value;
			int nleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int nright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			String n = (String) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new SelectColumn(eleft, n, e);
			CUP$Grm$result = new java_cup.runtime.Symbol(
					35/* select_column */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 54: // select_column ::= algebra_exp
		{
			SelectColumn RESULT = null;
			int eleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int eright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			AlgebraExp e = (AlgebraExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new SelectColumn(eleft, null, e);
			CUP$Grm$result = new java_cup.runtime.Symbol(
					35/* select_column */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 53: // select_column_list ::= select_column COMMA
					// select_column_list
		{
			SelectColumnList RESULT = null;
			int hleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).left;
			int hright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).right;
			SelectColumn h = (SelectColumn) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).value;
			int tleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int tright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			SelectColumnList t = (SelectColumnList) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new SelectColumnList(hleft, h, t);
			CUP$Grm$result = new java_cup.runtime.Symbol(
					36/* select_column_list */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 52: // select_column_list ::= select_column
		{
			SelectColumnList RESULT = null;
			int cleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int cright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			SelectColumn c = (SelectColumn) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new SelectColumnList(cleft, c, null);
			CUP$Grm$result = new java_cup.runtime.Symbol(
					36/* select_column_list */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 51: // select_bin_exp ::= select_exp UNION ALL select_exp
		{
			SelectBinExp RESULT = null;
			int lleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 3)).left;
			int lright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 3)).right;
			SelectExp l = (SelectExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 3)).value;
			int rleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int rright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			SelectExp r = (SelectExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new SelectBinExp(lleft, true, l, r);
			CUP$Grm$result = new java_cup.runtime.Symbol(
					37/* select_bin_exp */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 3)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 50: // select_bin_exp ::= select_exp UNION select_exp
		{
			SelectBinExp RESULT = null;
			int lleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).left;
			int lright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).right;
			SelectExp l = (SelectExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).value;
			int rleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int rright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			SelectExp r = (SelectExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new SelectBinExp(lleft, false, l, r);
			CUP$Grm$result = new java_cup.runtime.Symbol(
					37/* select_bin_exp */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 49: // select_op ::= SELECT DISTINCT select_column_list FROM
					// from_table_list where_exp
		{
			SelectOp RESULT = null;
			int sleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 5)).left;
			int sright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 5)).right;
			Object s = (Object) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 5)).value;
			int cleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 3)).left;
			int cright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 3)).right;
			SelectColumnList c = (SelectColumnList) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 3)).value;
			int tleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).left;
			int tright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).right;
			FromTableList t = (FromTableList) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).value;
			int wleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int wright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			WhereExp w = (WhereExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new SelectOp(sleft, true, false, c, t, w);
			CUP$Grm$result = new java_cup.runtime.Symbol(39/* select_op */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 5)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 48: // select_op ::= SELECT select_column_list FROM from_table_list
					// where_exp
		{
			SelectOp RESULT = null;
			int sleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 4)).left;
			int sright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 4)).right;
			Object s = (Object) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 4)).value;
			int cleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 3)).left;
			int cright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 3)).right;
			SelectColumnList c = (SelectColumnList) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 3)).value;
			int tleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).left;
			int tright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).right;
			FromTableList t = (FromTableList) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).value;
			int wleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int wright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			WhereExp w = (WhereExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new SelectOp(sleft, false, false, c, t, w);
			CUP$Grm$result = new java_cup.runtime.Symbol(39/* select_op */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 4)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 47: // select_op ::= SELECT DISTINCT STAR FROM from_table_list
					// where_exp
		{
			SelectOp RESULT = null;
			int sleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 5)).left;
			int sright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 5)).right;
			Object s = (Object) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 5)).value;
			int tleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).left;
			int tright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).right;
			FromTableList t = (FromTableList) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).value;
			int wleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int wright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			WhereExp w = (WhereExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new SelectOp(sleft, true, true, null, t, w);
			CUP$Grm$result = new java_cup.runtime.Symbol(39/* select_op */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 5)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 46: // select_op ::= SELECT STAR FROM from_table_list where_exp
		{
			SelectOp RESULT = null;
			int sleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 4)).left;
			int sright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 4)).right;
			Object s = (Object) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 4)).value;
			int tleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).left;
			int tright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).right;
			FromTableList t = (FromTableList) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).value;
			int wleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int wright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			WhereExp w = (WhereExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new SelectOp(sleft, false, true, null, t, w);
			CUP$Grm$result = new java_cup.runtime.Symbol(39/* select_op */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 4)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 45: // select_exp ::= LPAREN select_exp RPAREN
		{
			SelectExp RESULT = null;
			int lleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).left;
			int lright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).right;
			Object l = (Object) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).value;
			int sleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).left;
			int sright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).right;
			SelectExp s = (SelectExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).value;
			s.pos = lleft;
			RESULT = s;
			CUP$Grm$result = new java_cup.runtime.Symbol(38/* select_exp */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 44: // select_exp ::= select_bin_exp
		{
			SelectExp RESULT = null;
			int sleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int sright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			SelectBinExp s = (SelectBinExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = s;
			CUP$Grm$result = new java_cup.runtime.Symbol(38/* select_exp */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 43: // select_exp ::= select_op
		{
			SelectExp RESULT = null;
			int sleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int sright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			SelectOp s = (SelectOp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = s;
			CUP$Grm$result = new java_cup.runtime.Symbol(38/* select_exp */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 42: // data_type ::= BOOL
		{
			DataType RESULT = null;
			int tleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int tright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			Object t = (Object) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new DataType(tleft, Const.BOOL, 0, 0, 0);
			CUP$Grm$result = new java_cup.runtime.Symbol(18/* data_type */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 41: // data_type ::= VARCHAR LPAREN INTVALUE RPAREN
		{
			DataType RESULT = null;
			int tleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 3)).left;
			int tright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 3)).right;
			Object t = (Object) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 3)).value;
			int sleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).left;
			int sright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).right;
			Integer s = (Integer) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).value;
			RESULT = new DataType(tleft, Const.VARCHAR, s, 0, 0);
			CUP$Grm$result = new java_cup.runtime.Symbol(18/* data_type */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 3)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 40: // data_type ::= CHAR
		{
			DataType RESULT = null;
			int tleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int tright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			Object t = (Object) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new DataType(tleft, Const.CHAR, 0, 0, 0);
			CUP$Grm$result = new java_cup.runtime.Symbol(18/* data_type */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 39: // data_type ::= CHAR LPAREN INTVALUE RPAREN
		{
			DataType RESULT = null;
			int tleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 3)).left;
			int tright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 3)).right;
			Object t = (Object) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 3)).value;
			int sleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).left;
			int sright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).right;
			Integer s = (Integer) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).value;
			RESULT = new DataType(tleft, Const.CHAR, s, 0, 0);
			CUP$Grm$result = new java_cup.runtime.Symbol(18/* data_type */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 3)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 38: // data_type ::= DECIMAL LPAREN INTVALUE COMMA INTVALUE RPAREN
		{
			DataType RESULT = null;
			int tleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 5)).left;
			int tright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 5)).right;
			Object t = (Object) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 5)).value;
			int pleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 3)).left;
			int pright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 3)).right;
			Integer p = (Integer) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 3)).value;
			int sleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).left;
			int sright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).right;
			Integer s = (Integer) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).value;
			RESULT = new DataType(tleft, Const.DECIMAL, 0, p, s);
			CUP$Grm$result = new java_cup.runtime.Symbol(18/* data_type */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 5)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 37: // data_type ::= DECIMAL LPAREN INTVALUE RPAREN
		{
			DataType RESULT = null;
			int tleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 3)).left;
			int tright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 3)).right;
			Object t = (Object) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 3)).value;
			int pleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).left;
			int pright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).right;
			Integer p = (Integer) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).value;
			RESULT = new DataType(tleft, Const.DECIMAL, 0, p, 0);
			CUP$Grm$result = new java_cup.runtime.Symbol(18/* data_type */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 3)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 36: // data_type ::= DOUBLE
		{
			DataType RESULT = null;
			int tleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int tright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			Object t = (Object) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new DataType(tleft, Const.DOUBLE, 0, 0, 0);
			CUP$Grm$result = new java_cup.runtime.Symbol(18/* data_type */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 35: // data_type ::= FLOAT
		{
			DataType RESULT = null;
			int tleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int tright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			Object t = (Object) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new DataType(tleft, Const.FLOAT, 0, 0, 0);
			CUP$Grm$result = new java_cup.runtime.Symbol(18/* data_type */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 34: // data_type ::= INT
		{
			DataType RESULT = null;
			int tleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int tright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			Object t = (Object) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new DataType(tleft, Const.INT, 0, 0, 0);
			CUP$Grm$result = new java_cup.runtime.Symbol(18/* data_type */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 33: // value_exp ::= NULL
		{
			ValueExp RESULT = null;
			int eleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int eright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			Object e = (Object) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new NullExp(eleft);
			CUP$Grm$result = new java_cup.runtime.Symbol(45/* value_exp */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 32: // value_exp ::= FALSE
		{
			ValueExp RESULT = null;
			int eleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int eright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			Object e = (Object) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new BoolExp(eleft, false);
			CUP$Grm$result = new java_cup.runtime.Symbol(45/* value_exp */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 31: // value_exp ::= TRUE
		{
			ValueExp RESULT = null;
			int eleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int eright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			Object e = (Object) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new BoolExp(eleft, true);
			CUP$Grm$result = new java_cup.runtime.Symbol(45/* value_exp */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 30: // value_exp ::= STRINGVALUE
		{
			ValueExp RESULT = null;
			int eleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int eright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			String e = (String) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new StrExp(eleft, e);
			CUP$Grm$result = new java_cup.runtime.Symbol(45/* value_exp */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 29: // value_exp ::= REALVALUE
		{
			ValueExp RESULT = null;
			int eleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int eright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			Double e = (Double) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new RealExp(eleft, e);
			CUP$Grm$result = new java_cup.runtime.Symbol(45/* value_exp */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 28: // value_exp ::= INTVALUE
		{
			ValueExp RESULT = null;
			int eleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int eright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			Integer e = (Integer) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new IntExp(eleft, e);
			CUP$Grm$result = new java_cup.runtime.Symbol(45/* value_exp */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 27: // id_list ::= ID COMMA id_list
		{
			IdList RESULT = null;
			int nleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).left;
			int nright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).right;
			String n = (String) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).value;
			int lleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int lright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			IdList l = (IdList) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new IdList(nleft, n, l);
			CUP$Grm$result = new java_cup.runtime.Symbol(28/* id_list */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 26: // id_list ::= ID
		{
			IdList RESULT = null;
			int nleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int nright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			String n = (String) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new IdList(nleft, n, null);
			CUP$Grm$result = new java_cup.runtime.Symbol(28/* id_list */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 25: // column_cons ::= DEFAULT value_exp
		{
			ColumnCons RESULT = null;
			int sleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).left;
			int sright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).right;
			Object s = (Object) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).value;
			int vleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int vright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			ValueExp v = (ValueExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new ColumnCons(sleft, Const.NOCONS, v);
			CUP$Grm$result = new java_cup.runtime.Symbol(9/* column_cons */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 1)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 24: // column_cons ::= NOTNULL DEFAULT value_exp
		{
			ColumnCons RESULT = null;
			int sleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).left;
			int sright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).right;
			Object s = (Object) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).value;
			int vleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int vright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			ValueExp v = (ValueExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new ColumnCons(sleft, Const.NOTNULL, v);
			CUP$Grm$result = new java_cup.runtime.Symbol(9/* column_cons */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 23: // column_cons ::= NOTNULL
		{
			ColumnCons RESULT = null;
			int sleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int sright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			Object s = (Object) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new ColumnCons(sleft, Const.NOTNULL, null);
			CUP$Grm$result = new java_cup.runtime.Symbol(9/* column_cons */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 22: // column_cons ::= UNIQUE
		{
			ColumnCons RESULT = null;
			int sleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int sright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			Object s = (Object) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new ColumnCons(sleft, Const.UNIQUE, null);
			CUP$Grm$result = new java_cup.runtime.Symbol(9/* column_cons */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 21: // column_cons ::= PRIMARYKEY
		{
			ColumnCons RESULT = null;
			int sleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int sright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			Object s = (Object) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new ColumnCons(sleft, Const.PRIMARYKEY, null);
			CUP$Grm$result = new java_cup.runtime.Symbol(9/* column_cons */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 20: // column_def ::= ID data_type column_cons
		{
			ColumnDef RESULT = null;
			int nleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).left;
			int nright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).right;
			String n = (String) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).value;
			int tleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).left;
			int tright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).right;
			DataType t = (DataType) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).value;
			int cleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int cright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			ColumnCons c = (ColumnCons) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new ColumnDef(nleft, n, t, c);
			CUP$Grm$result = new java_cup.runtime.Symbol(10/* column_def */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 19: // column_def ::= ID data_type
		{
			ColumnDef RESULT = null;
			int nleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).left;
			int nright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).right;
			String n = (String) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).value;
			int tleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int tright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			DataType t = (DataType) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new ColumnDef(nleft, n, t, null);
			CUP$Grm$result = new java_cup.runtime.Symbol(10/* column_def */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 1)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 18: // column_def_list ::= column_def COMMA column_def_list
		{
			ColumnDefList RESULT = null;
			int hleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).left;
			int hright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).right;
			ColumnDef h = (ColumnDef) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).value;
			int tleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int tright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			ColumnDefList t = (ColumnDefList) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new ColumnDefList(hleft, h, t);
			CUP$Grm$result = new java_cup.runtime.Symbol(
					11/* column_def_list */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 17: // column_def_list ::= column_def
		{
			ColumnDefList RESULT = null;
			int cleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int cright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			ColumnDef c = (ColumnDef) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new ColumnDefList(cleft, c, null);
			CUP$Grm$result = new java_cup.runtime.Symbol(
					11/* column_def_list */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 16: // create_index_exp ::= CREATEINDEX ID ON ID LPAREN id_list
					// RPAREN
		{
			CreateIndexExp RESULT = null;
			int cleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 6)).left;
			int cright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 6)).right;
			Object c = (Object) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 6)).value;
			int inleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 5)).left;
			int inright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 5)).right;
			String in = (String) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 5)).value;
			int tnleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 3)).left;
			int tnright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 3)).right;
			String tn = (String) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 3)).value;
			int lleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).left;
			int lright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).right;
			IdList l = (IdList) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).value;
			RESULT = new CreateIndexExp(cleft, in, tn, l);
			CUP$Grm$result = new java_cup.runtime.Symbol(
					15/* create_index_exp */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 6)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 15: // create_view_exp ::= CREATEVIEW ID AS select_exp
		{
			CreateViewExp RESULT = null;
			int cleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 3)).left;
			int cright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 3)).right;
			Object c = (Object) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 3)).value;
			int nleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).left;
			int nright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).right;
			String n = (String) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 2)).value;
			int sleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int sright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			SelectExp s = (SelectExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new CreateViewExp(cleft, n, s);
			CUP$Grm$result = new java_cup.runtime.Symbol(
					17/* create_view_exp */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 3)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 14: // create_table_exp ::= CREATETABLE ID LPAREN column_def_list
					// RPAREN
		{
			CreateTableExp RESULT = null;
			int cleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 4)).left;
			int cright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 4)).right;
			Object c = (Object) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 4)).value;
			int nleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 3)).left;
			int nright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 3)).right;
			String n = (String) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 3)).value;
			int lleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).left;
			int lright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).right;
			ColumnDefList l = (ColumnDefList) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).value;
			RESULT = new CreateTableExp(cleft, n, l);
			CUP$Grm$result = new java_cup.runtime.Symbol(
					16/* create_table_exp */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 4)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 13: // create_exp ::= create_index_exp
		{
			CreateExp RESULT = null;
			int eleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int eright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			CreateIndexExp e = (CreateIndexExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = e;
			CUP$Grm$result = new java_cup.runtime.Symbol(14/* create_exp */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 12: // create_exp ::= create_view_exp
		{
			CreateExp RESULT = null;
			int eleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int eright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			CreateViewExp e = (CreateViewExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = e;
			CUP$Grm$result = new java_cup.runtime.Symbol(14/* create_exp */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 11: // create_exp ::= create_table_exp
		{
			CreateExp RESULT = null;
			int eleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int eright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			CreateTableExp e = (CreateTableExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = e;
			CUP$Grm$result = new java_cup.runtime.Symbol(14/* create_exp */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 10: // sql_exp ::= alter_exp
		{
			SqlExp RESULT = null;
			int eleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int eright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			AlterExp e = (AlterExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = e;
			CUP$Grm$result = new java_cup.runtime.Symbol(40/* sql_exp */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 9: // sql_exp ::= drop_exp
		{
			SqlExp RESULT = null;
			int eleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int eright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			DropExp e = (DropExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = e;
			CUP$Grm$result = new java_cup.runtime.Symbol(40/* sql_exp */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 8: // sql_exp ::= update_exp
		{
			SqlExp RESULT = null;
			int eleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int eright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			UpdateExp e = (UpdateExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = e;
			CUP$Grm$result = new java_cup.runtime.Symbol(40/* sql_exp */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 7: // sql_exp ::= delete_exp
		{
			SqlExp RESULT = null;
			int eleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int eright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			DeleteExp e = (DeleteExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = e;
			CUP$Grm$result = new java_cup.runtime.Symbol(40/* sql_exp */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 6: // sql_exp ::= insert_exp
		{
			SqlExp RESULT = null;
			int eleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int eright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			InsertExp e = (InsertExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = e;
			CUP$Grm$result = new java_cup.runtime.Symbol(40/* sql_exp */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 5: // sql_exp ::= select_exp
		{
			SqlExp RESULT = null;
			int eleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int eright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			SelectExp e = (SelectExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = e;
			CUP$Grm$result = new java_cup.runtime.Symbol(40/* sql_exp */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 4: // sql_exp ::= create_exp
		{
			SqlExp RESULT = null;
			int eleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int eright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			CreateExp e = (CreateExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = e;
			CUP$Grm$result = new java_cup.runtime.Symbol(40/* sql_exp */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 3: // sql_exp_list ::= sql_exp sql_exp_list
		{
			SqlExpList RESULT = null;
			int hleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).left;
			int hright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).right;
			SqlExp h = (SqlExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).value;
			int tleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int tright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			SqlExpList t = (SqlExpList) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new SqlExpList(hleft, h, t);
			CUP$Grm$result = new java_cup.runtime.Symbol(41/* sql_exp_list */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 1)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 2: // sql_exp_list ::= sql_exp
		{
			SqlExpList RESULT = null;
			int sleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int sright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			SqlExp s = (SqlExp) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = new SqlExpList(sleft, s, null);
			CUP$Grm$result = new java_cup.runtime.Symbol(41/* sql_exp_list */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 1: // program ::= sql_exp_list
		{
			Object RESULT = null;
			int sleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).left;
			int sright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).right;
			SqlExpList s = (SqlExpList) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 0)).value;
			RESULT = s;
			CUP$Grm$result = new java_cup.runtime.Symbol(1/* program */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			return CUP$Grm$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 0: // $START ::= program EOF
		{
			Object RESULT = null;
			int start_valleft = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).left;
			int start_valright = ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).right;
			Object start_val = (Object) ((java_cup.runtime.Symbol) CUP$Grm$stack
					.elementAt(CUP$Grm$top - 1)).value;
			RESULT = start_val;
			CUP$Grm$result = new java_cup.runtime.Symbol(0/* $START */,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 1)).left,
					((java_cup.runtime.Symbol) CUP$Grm$stack
							.elementAt(CUP$Grm$top - 0)).right, RESULT);
		}
			/* ACCEPT */
			CUP$Grm$parser.done_parsing();
			return CUP$Grm$result;

			/* . . . . . . */
		default:
			throw new Exception(
					"Invalid action number found in internal parse table");

		}
	}
}
