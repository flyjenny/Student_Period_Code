/* The following code was generated by JFlex 1.4.3 on 09-9-9 下午4:00 */

package parse;

import java_cup.runtime.*;

/**
 * This class is a scanner generated by <a href="http://www.jflex.de/">JFlex</a>
 * 1.4.3 on 09-9-9 下午4:00 from the specification file <tt>flex/lexer.flex</tt>
 */
public class Scanner {

	/** This character denotes the end of file */
	public static final int YYEOF = -1;

	/** initial size of the lookahead buffer */
	private static final int ZZ_BUFFERSIZE = 16384;

	/** lexical states */
	public static final int STRING = 2;
	public static final int YYINITIAL = 0;

	/**
	 * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
	 * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l at the
	 * beginning of a line l is of the form l = 2*k, k a non negative integer
	 */
	private static final int ZZ_LEXSTATE[] = { 0, 0, 1, 1 };

	/**
	 * Translates characters to character classes
	 */
	private static final String ZZ_CMAP_PACKED = "\11\0\1\1\1\2\1\0\2\1\22\0\1\17\1\16\1\0\4\16"
			+ "\1\64\1\30\1\31\1\26\1\25\1\21\1\7\1\6\1\27\1\10"
			+ "\1\11\1\12\1\13\2\15\4\4\1\14\1\20\1\23\1\22\1\24"
			+ "\2\16\32\16\1\16\1\0\2\16\1\5\1\16\1\37\1\61\1\47"
			+ "\1\40\1\45\1\54\1\60\1\57\1\43\1\3\1\44\1\42\1\55"
			+ "\1\34\1\35\1\50\1\63\1\41\1\46\1\36\1\53\1\62\1\56"
			+ "\1\51\1\52\1\3\1\32\1\16\1\33\1\16\uff81\0";

	/**
	 * Translates characters to character classes
	 */
	private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

	/**
	 * Translates DFA states to action switch labels.
	 */
	private static final int[] ZZ_ACTION = zzUnpackAction();

	private static final String ZZ_ACTION_PACKED_0 = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"
			+ "\2\5\1\10\1\11\1\12\1\13\1\14\1\15\1\16"
			+ "\1\17\1\20\1\21\1\22\1\23\24\4\1\24\1\1"
			+ "\1\25\1\5\1\0\1\5\1\26\1\27\1\30\2\4"
			+ "\1\31\1\32\6\4\1\33\10\4\1\34\26\4\1\5"
			+ "\1\35\1\0\1\36\5\4\1\37\1\40\1\41\1\4"
			+ "\1\42\1\43\1\44\11\4\1\45\5\4\1\46\1\4"
			+ "\1\47\13\4\1\50\1\51\7\4\1\5\1\0\1\52"
			+ "\3\4\1\53\2\4\1\54\1\55\2\4\1\56\3\4"
			+ "\1\57\11\4\1\60\5\4\1\61\7\4\1\62\1\5"
			+ "\2\0\1\4\1\63\1\4\1\64\6\4\1\65\3\4"
			+ "\1\66\1\4\1\67\2\4\1\70\4\4\1\71\1\72"
			+ "\5\4\4\0\3\4\1\73\4\4\1\74\1\75\1\76"
			+ "\1\77\1\100\1\4\1\101\1\102\1\4\1\103\1\0"
			+ "\2\4\1\104\3\0\3\4\1\105\2\4\1\0\2\4"
			+ "\1\0\1\106\1\107\1\0\1\110\1\111\1\4\1\112"
			+ "\1\113\1\114\1\4\3\0\1\115\3\0\2\4\3\0"
			+ "\1\116\1\4\1\117\3\0\1\120\1\121\1\122\1\123";

	private static int[] zzUnpackAction() {
		int[] result = new int[294];
		int offset = 0;
		offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAction(String packed, int offset, int[] result) {
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do
				result[j++] = value;
			while (--count > 0);
		}
		return j;
	}

	/**
	 * Translates a state to a row index in the transition table
	 */
	private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

	private static final String ZZ_ROWMAP_PACKED_0 = "\0\0\0\65\0\152\0\152\0\237\0\324\0\152\0\152"
			+ "\0\u0109\0\u013e\0\152\0\152\0\152\0\u0173\0\u01a8\0\152"
			+ "\0\152\0\152\0\152\0\152\0\152\0\152\0\u01dd\0\u0212"
			+ "\0\u0247\0\u027c\0\u02b1\0\u02e6\0\u031b\0\u0350\0\u0385\0\u03ba"
			+ "\0\u03ef\0\u0424\0\u0459\0\u048e\0\u04c3\0\u04f8\0\u052d\0\u0562"
			+ "\0\u0597\0\u05cc\0\152\0\u0601\0\152\0\u0636\0\u066b\0\u06a0"
			+ "\0\152\0\152\0\152\0\u06d5\0\u070a\0\237\0\u073f\0\u0774"
			+ "\0\u07a9\0\u07de\0\u0813\0\u0848\0\u087d\0\u08b2\0\u08e7\0\u091c"
			+ "\0\u0951\0\u0986\0\u09bb\0\u09f0\0\u0a25\0\u0a5a\0\u0a8f\0\u0ac4"
			+ "\0\u0af9\0\u0b2e\0\u0b63\0\u0b98\0\u0bcd\0\u0c02\0\u0c37\0\u0c6c"
			+ "\0\u0ca1\0\u0cd6\0\u0d0b\0\u0d40\0\u0d75\0\u0daa\0\u0ddf\0\u0e14"
			+ "\0\u0e49\0\u0e7e\0\u0eb3\0\u0ee8\0\u0f1d\0\u0f52\0\u066b\0\u0f87"
			+ "\0\237\0\u0fbc\0\u0ff1\0\u1026\0\u105b\0\u1090\0\237\0\237"
			+ "\0\237\0\u10c5\0\237\0\237\0\237\0\u10fa\0\u112f\0\u1164"
			+ "\0\u1199\0\u11ce\0\u1203\0\u1238\0\u126d\0\u12a2\0\237\0\u12d7"
			+ "\0\u130c\0\u1341\0\u1376\0\u13ab\0\237\0\u13e0\0\237\0\u1415"
			+ "\0\u144a\0\u147f\0\u14b4\0\u14e9\0\u151e\0\u1553\0\u1588\0\u15bd"
			+ "\0\u15f2\0\u1627\0\237\0\237\0\u165c\0\u1691\0\u16c6\0\u16fb"
			+ "\0\u1730\0\u1765\0\u179a\0\u17cf\0\u1804\0\237\0\u1839\0\u186e"
			+ "\0\u18a3\0\237\0\u18d8\0\u190d\0\237\0\237\0\u1942\0\u1977"
			+ "\0\237\0\u19ac\0\u19e1\0\u1a16\0\237\0\u1a4b\0\u1a80\0\u1ab5"
			+ "\0\u1aea\0\u1b1f\0\u1b54\0\u1b89\0\u1bbe\0\u1bf3\0\237\0\u1c28"
			+ "\0\u1c5d\0\u1c92\0\u1cc7\0\u1cfc\0\237\0\u1d31\0\u1d66\0\u1d9b"
			+ "\0\u1dd0\0\u1e05\0\u1e3a\0\u1e6f\0\237\0\u1ea4\0\u1ed9\0\u1f0e"
			+ "\0\u1f43\0\237\0\u1f78\0\237\0\u1fad\0\u1fe2\0\u2017\0\u204c"
			+ "\0\u2081\0\u20b6\0\237\0\u20eb\0\u2120\0\u2155\0\237\0\u218a"
			+ "\0\237\0\u21bf\0\u21f4\0\237\0\u2229\0\u225e\0\u2293\0\u22c8"
			+ "\0\237\0\237\0\u22fd\0\u2332\0\u2367\0\u239c\0\u23d1\0\u2406"
			+ "\0\u243b\0\u2470\0\u24a5\0\u24da\0\u250f\0\u2544\0\237\0\u2579"
			+ "\0\u25ae\0\u25e3\0\u2618\0\237\0\237\0\237\0\237\0\237"
			+ "\0\u264d\0\237\0\237\0\u2682\0\237\0\u26b7\0\u26ec\0\u2721"
			+ "\0\237\0\u2756\0\u278b\0\u27c0\0\u27f5\0\u282a\0\u285f\0\237"
			+ "\0\u2894\0\u28c9\0\u28fe\0\u2933\0\u2968\0\u299d\0\237\0\237"
			+ "\0\u29d2\0\152\0\152\0\u2a07\0\237\0\237\0\237\0\u2a3c"
			+ "\0\u2a71\0\u2aa6\0\u2adb\0\152\0\u2b10\0\u2b45\0\u2b7a\0\u2baf"
			+ "\0\u2be4\0\u2c19\0\u2c4e\0\u2c83\0\152\0\u2cb8\0\237\0\u2ced"
			+ "\0\u2d22\0\u2d57\0\237\0\152\0\152\0\152";

	private static int[] zzUnpackRowMap() {
		int[] result = new int[294];
		int offset = 0;
		offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackRowMap(String packed, int offset, int[] result) {
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int high = packed.charAt(i++) << 16;
			result[j++] = high | packed.charAt(i++);
		}
		return j;
	}

	/**
	 * The transition table of the DFA
	 */
	private static final int[] ZZ_TRANS = zzUnpackTrans();

	private static final String ZZ_TRANS_PACKED_0 = "\1\0\1\3\1\4\1\5\1\6\1\0\1\7\1\10"
			+ "\2\11\1\12\1\6\1\0\1\6\1\0\1\3\1\13"
			+ "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"
			+ "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"
			+ "\1\34\1\35\1\36\1\5\1\37\1\40\1\41\1\42"
			+ "\2\5\1\43\1\44\1\45\1\46\1\47\1\50\1\51"
			+ "\1\52\1\5\1\53\3\0\61\54\1\55\70\0\3\5"
			+ "\2\0\4\5\1\0\1\5\16\0\30\5\5\0\1\56"
			+ "\1\0\1\57\1\0\4\56\1\0\1\56\53\0\1\60"
			+ "\1\0\1\57\1\0\4\60\1\0\1\60\53\0\1\56"
			+ "\1\0\1\57\1\0\4\60\1\0\1\56\71\0\1\61"
			+ "\1\0\1\62\62\0\1\63\45\0\3\5\2\0\4\5"
			+ "\1\0\1\5\16\0\1\5\1\64\15\5\1\65\10\5"
			+ "\4\0\3\5\2\0\4\5\1\0\1\5\16\0\1\66"
			+ "\4\5\1\67\22\5\4\0\3\5\2\0\4\5\1\0"
			+ "\1\5\16\0\3\5\1\70\1\5\1\71\1\5\1\72"
			+ "\20\5\4\0\3\5\2\0\4\5\1\0\1\5\16\0"
			+ "\1\73\3\5\1\74\1\5\1\75\3\5\1\76\13\5"
			+ "\1\77\1\5\4\0\3\5\2\0\4\5\1\0\1\5"
			+ "\16\0\3\5\1\100\1\5\1\101\1\5\1\102\1\5"
			+ "\1\103\16\5\4\0\3\5\2\0\4\5\1\0\1\5"
			+ "\16\0\1\5\1\104\7\5\1\105\16\5\4\0\3\5"
			+ "\2\0\4\5\1\0\1\5\16\0\7\5\1\106\20\5"
			+ "\4\0\3\5\2\0\4\5\1\0\1\5\16\0\1\107"
			+ "\27\5\4\0\3\5\2\0\4\5\1\0\1\5\16\0"
			+ "\12\5\1\110\2\5\1\111\12\5\4\0\3\5\2\0"
			+ "\4\5\1\0\1\5\16\0\2\5\1\112\6\5\1\113"
			+ "\5\5\1\114\10\5\4\0\3\5\2\0\4\5\1\0"
			+ "\1\5\16\0\1\5\1\115\3\5\1\116\15\5\1\117"
			+ "\4\5\4\0\3\5\2\0\4\5\1\0\1\5\16\0"
			+ "\5\5\1\120\22\5\4\0\3\5\2\0\4\5\1\0"
			+ "\1\5\16\0\1\121\13\5\1\122\13\5\4\0\3\5"
			+ "\2\0\4\5\1\0\1\5\16\0\1\5\1\123\3\5"
			+ "\1\124\1\125\21\5\4\0\3\5\2\0\4\5\1\0"
			+ "\1\5\16\0\3\5\1\126\3\5\1\127\20\5\4\0"
			+ "\3\5\2\0\4\5\1\0\1\5\16\0\23\5\1\130"
			+ "\4\5\4\0\3\5\2\0\4\5\1\0\1\5\16\0"
			+ "\3\5\1\131\24\5\4\0\3\5\2\0\4\5\1\0"
			+ "\1\5\16\0\5\5\1\132\22\5\4\0\3\5\2\0"
			+ "\4\5\1\0\1\5\16\0\1\5\1\133\26\5\4\0"
			+ "\3\5\2\0\4\5\1\0\1\5\16\0\3\5\1\134"
			+ "\3\5\1\135\20\5\4\0\61\54\5\0\1\136\1\0"
			+ "\1\57\1\0\4\136\1\0\1\136\53\0\1\137\3\0"
			+ "\4\137\1\0\1\137\53\0\1\136\1\0\1\57\1\0"
			+ "\4\136\1\140\1\136\52\0\3\5\2\0\4\5\1\0"
			+ "\1\5\16\0\2\5\1\141\25\5\4\0\3\5\2\0"
			+ "\4\5\1\0\1\5\16\0\6\5\1\142\21\5\4\0"
			+ "\3\5\2\0\4\5\1\0\1\5\16\0\4\5\1\143"
			+ "\23\5\4\0\3\5\2\0\4\5\1\0\1\5\16\0"
			+ "\25\5\1\144\2\5\4\0\3\5\2\0\4\5\1\0"
			+ "\1\5\16\0\3\5\1\145\24\5\4\0\3\5\2\0"
			+ "\4\5\1\0\1\5\16\0\21\5\1\146\6\5\4\0"
			+ "\3\5\2\0\4\5\1\0\1\5\16\0\4\5\1\147"
			+ "\11\5\1\150\11\5\4\0\3\5\2\0\4\5\1\0"
			+ "\1\5\16\0\4\5\1\151\23\5\4\0\3\5\2\0"
			+ "\4\5\1\0\1\5\16\0\2\5\1\152\3\5\1\153"
			+ "\21\5\4\0\3\5\2\0\4\5\1\0\1\5\16\0"
			+ "\13\5\1\154\14\5\4\0\3\5\2\0\4\5\1\0"
			+ "\1\5\16\0\24\5\1\155\3\5\4\0\3\5\2\0"
			+ "\4\5\1\0\1\5\16\0\2\5\1\156\25\5\4\0"
			+ "\3\5\2\0\4\5\1\0\1\5\16\0\1\5\1\157"
			+ "\26\5\4\0\3\5\2\0\4\5\1\0\1\5\16\0"
			+ "\12\5\1\160\15\5\4\0\3\5\2\0\4\5\1\0"
			+ "\1\5\16\0\6\5\1\161\3\5\1\162\5\5\1\163"
			+ "\7\5\4\0\3\5\2\0\4\5\1\0\1\5\16\0"
			+ "\6\5\1\164\21\5\4\0\3\5\2\0\4\5\1\0"
			+ "\1\5\16\0\20\5\1\165\7\5\4\0\3\5\2\0"
			+ "\4\5\1\0\1\5\16\0\10\5\1\166\17\5\4\0"
			+ "\3\5\2\0\4\5\1\0\1\5\16\0\2\5\1\167"
			+ "\1\5\1\170\5\5\1\171\15\5\4\0\3\5\2\0"
			+ "\4\5\1\0\1\5\16\0\13\5\1\172\14\5\4\0"
			+ "\3\5\2\0\4\5\1\0\1\5\16\0\7\5\1\173"
			+ "\20\5\4\0\3\5\2\0\4\5\1\0\1\5\16\0"
			+ "\3\5\1\174\24\5\4\0\3\5\2\0\4\5\1\0"
			+ "\1\5\16\0\2\5\1\175\3\5\1\176\21\5\4\0"
			+ "\3\5\2\0\4\5\1\0\1\5\16\0\21\5\1\177"
			+ "\6\5\4\0\3\5\2\0\4\5\1\0\1\5\16\0"
			+ "\17\5\1\200\1\5\1\201\6\5\4\0\3\5\2\0"
			+ "\4\5\1\0\1\5\16\0\11\5\1\202\16\5\4\0"
			+ "\3\5\2\0\4\5\1\0\1\5\16\0\3\5\1\203"
			+ "\5\5\1\204\16\5\4\0\3\5\2\0\4\5\1\0"
			+ "\1\5\16\0\7\5\1\205\20\5\4\0\3\5\2\0"
			+ "\4\5\1\0\1\5\16\0\7\5\1\206\20\5\4\0"
			+ "\3\5\2\0\4\5\1\0\1\5\16\0\4\5\1\207"
			+ "\23\5\4\0\3\5\2\0\4\5\1\0\1\5\16\0"
			+ "\5\5\1\210\22\5\4\0\3\5\2\0\4\5\1\0"
			+ "\1\5\16\0\1\5\1\211\26\5\4\0\3\5\2\0"
			+ "\4\5\1\0\1\5\16\0\1\5\1\212\26\5\4\0"
			+ "\3\5\2\0\4\5\1\0\1\5\16\0\15\5\1\213"
			+ "\12\5\4\0\3\5\2\0\4\5\1\0\1\5\16\0"
			+ "\1\214\27\5\4\0\3\5\2\0\4\5\1\0\1\5"
			+ "\16\0\11\5\1\215\16\5\4\0\3\5\2\0\4\5"
			+ "\1\0\1\5\16\0\26\5\1\216\1\5\4\0\3\5"
			+ "\2\0\4\5\1\0\1\5\16\0\1\5\1\217\26\5"
			+ "\4\0\3\5\2\0\4\5\1\0\1\5\16\0\1\5"
			+ "\1\220\26\5\4\0\3\5\2\0\4\5\1\0\1\5"
			+ "\16\0\5\5\1\221\1\222\21\5\4\0\3\5\2\0"
			+ "\4\5\1\0\1\5\16\0\11\5\1\223\16\5\5\0"
			+ "\1\224\1\0\1\57\1\0\4\224\1\0\1\224\57\0"
			+ "\4\225\1\0\1\225\52\0\3\5\2\0\4\5\1\0"
			+ "\1\5\16\0\6\5\1\226\21\5\4\0\3\5\2\0"
			+ "\4\5\1\0\1\5\16\0\11\5\1\227\16\5\4\0"
			+ "\3\5\2\0\4\5\1\0\1\5\16\0\6\5\1\230"
			+ "\21\5\4\0\3\5\2\0\4\5\1\0\1\5\16\0"
			+ "\1\231\27\5\4\0\3\5\2\0\4\5\1\0\1\5"
			+ "\16\0\11\5\1\232\16\5\4\0\3\5\2\0\4\5"
			+ "\1\0\1\5\16\0\11\5\1\233\16\5\4\0\3\5"
			+ "\2\0\4\5\1\0\1\5\16\0\3\5\1\234\5\5"
			+ "\1\235\16\5\4\0\3\5\2\0\4\5\1\0\1\5"
			+ "\16\0\14\5\1\236\13\5\4\0\3\5\2\0\4\5"
			+ "\1\0\1\5\16\0\2\5\1\237\25\5\4\0\3\5"
			+ "\2\0\4\5\1\0\1\5\16\0\11\5\1\240\16\5"
			+ "\4\0\3\5\2\0\4\5\1\0\1\5\16\0\13\5"
			+ "\1\241\14\5\4\0\3\5\2\0\4\5\1\0\1\5"
			+ "\16\0\3\5\1\242\24\5\4\0\3\5\2\0\4\5"
			+ "\1\0\1\5\16\0\6\5\1\243\21\5\4\0\3\5"
			+ "\2\0\4\5\1\0\1\5\16\0\11\5\1\244\16\5"
			+ "\4\0\3\5\2\0\4\5\1\0\1\5\16\0\11\5"
			+ "\1\245\16\5\4\0\3\5\2\0\4\5\1\0\1\5"
			+ "\16\0\11\5\1\246\16\5\4\0\3\5\2\0\4\5"
			+ "\1\0\1\5\16\0\11\5\1\247\16\5\4\0\3\5"
			+ "\2\0\4\5\1\0\1\5\16\0\3\5\1\250\24\5"
			+ "\4\0\3\5\2\0\4\5\1\0\1\5\16\0\12\5"
			+ "\1\251\15\5\4\0\3\5\2\0\4\5\1\0\1\5"
			+ "\16\0\5\5\1\252\22\5\4\0\3\5\2\0\4\5"
			+ "\1\0\1\5\16\0\11\5\1\253\16\5\4\0\3\5"
			+ "\2\0\4\5\1\0\1\5\16\0\1\254\27\5\4\0"
			+ "\3\5\2\0\4\5\1\0\1\5\16\0\21\5\1\255"
			+ "\6\5\4\0\3\5\2\0\4\5\1\0\1\5\16\0"
			+ "\3\5\1\256\24\5\4\0\3\5\2\0\4\5\1\0"
			+ "\1\5\16\0\5\5\1\257\22\5\4\0\3\5\2\0"
			+ "\4\5\1\0\1\5\16\0\13\5\1\260\14\5\4\0"
			+ "\3\5\2\0\4\5\1\0\1\5\16\0\21\5\1\261"
			+ "\6\5\4\0\3\5\2\0\4\5\1\0\1\5\16\0"
			+ "\27\5\1\262\4\0\3\5\2\0\4\5\1\0\1\5"
			+ "\16\0\3\5\1\263\24\5\4\0\3\5\2\0\4\5"
			+ "\1\0\1\5\16\0\11\5\1\264\16\5\4\0\3\5"
			+ "\2\0\4\5\1\0\1\5\16\0\21\5\1\265\6\5"
			+ "\4\0\3\5\2\0\4\5\1\0\1\5\16\0\3\5"
			+ "\1\266\24\5\4\0\3\5\2\0\4\5\1\0\1\5"
			+ "\16\0\5\5\1\267\22\5\4\0\3\5\2\0\4\5"
			+ "\1\0\1\5\16\0\7\5\1\270\20\5\4\0\3\5"
			+ "\2\0\4\5\1\0\1\5\16\0\17\5\1\271\10\5"
			+ "\4\0\3\5\2\0\4\5\1\0\1\5\16\0\6\5"
			+ "\1\272\21\5\4\0\3\5\2\0\4\5\1\0\1\5"
			+ "\16\0\13\5\1\273\14\5\4\0\3\5\2\0\4\5"
			+ "\1\0\1\5\16\0\17\5\1\274\10\5\4\0\3\5"
			+ "\2\0\4\5\1\0\1\5\16\0\22\5\1\275\5\5"
			+ "\5\0\1\276\1\0\1\57\1\277\4\276\1\0\1\276"
			+ "\53\0\1\300\3\0\4\300\1\0\1\300\52\0\3\5"
			+ "\2\0\4\5\1\0\1\5\16\0\5\5\1\301\22\5"
			+ "\4\0\3\5\2\0\4\5\1\0\1\5\16\0\11\5"
			+ "\1\302\16\5\4\0\3\5\2\0\4\5\1\0\1\5"
			+ "\16\0\12\5\1\303\15\5\4\0\3\5\2\0\4\5"
			+ "\1\0\1\5\16\0\5\5\1\304\22\5\4\0\3\5"
			+ "\2\0\4\5\1\0\1\5\16\0\25\5\1\305\2\5"
			+ "\4\0\3\5\2\0\4\5\1\0\1\5\16\0\7\5"
			+ "\1\306\20\5\4\0\3\5\2\0\4\5\1\0\1\5"
			+ "\16\0\2\5\1\307\25\5\4\0\3\5\2\0\4\5"
			+ "\1\0\1\5\16\0\17\5\1\310\10\5\4\0\3\5"
			+ "\2\0\4\5\1\0\1\5\16\0\25\5\1\311\2\5"
			+ "\4\0\3\5\2\0\4\5\1\0\1\5\16\0\5\5"
			+ "\1\312\22\5\4\0\3\5\2\0\4\5\1\0\1\5"
			+ "\16\0\15\5\1\313\12\5\4\0\3\5\2\0\4\5"
			+ "\1\0\1\5\16\0\5\5\1\314\22\5\4\0\3\5"
			+ "\2\0\4\5\1\0\1\5\16\0\14\5\1\315\13\5"
			+ "\4\0\3\5\2\0\4\5\1\0\1\5\16\0\2\5"
			+ "\1\316\25\5\4\0\3\5\2\0\4\5\1\0\1\5"
			+ "\16\0\2\5\1\317\25\5\4\0\3\5\2\0\4\5"
			+ "\1\0\1\5\16\0\13\5\1\320\14\5\4\0\3\5"
			+ "\2\0\4\5\1\0\1\5\16\0\2\5\1\321\25\5"
			+ "\4\0\3\5\2\0\4\5\1\0\1\5\16\0\7\5"
			+ "\1\322\20\5\4\0\3\5\2\0\4\5\1\0\1\5"
			+ "\16\0\2\5\1\323\25\5\4\0\3\5\2\0\4\5"
			+ "\1\0\1\5\16\0\10\5\1\324\17\5\4\0\3\5"
			+ "\2\0\4\5\1\0\1\5\16\0\3\5\1\325\24\5"
			+ "\4\0\3\5\2\0\4\5\1\0\1\5\16\0\17\5"
			+ "\1\326\10\5\4\0\3\5\2\0\4\5\1\0\1\5"
			+ "\16\0\2\5\1\327\25\5\4\0\3\5\2\0\4\5"
			+ "\1\0\1\5\16\0\7\5\1\330\20\5\4\0\3\5"
			+ "\2\0\4\5\1\0\1\5\16\0\2\5\1\331\25\5"
			+ "\4\0\3\5\2\0\4\5\1\0\1\5\16\0\11\5"
			+ "\1\332\16\5\4\0\3\5\2\0\4\5\1\0\1\5"
			+ "\16\0\1\333\27\5\4\0\3\5\2\0\4\5\1\0"
			+ "\1\5\16\0\14\5\1\334\13\5\4\0\3\5\2\0"
			+ "\4\5\1\0\1\5\16\0\11\5\1\335\16\5\4\0"
			+ "\3\5\2\0\4\5\1\0\1\5\16\0\23\5\1\336"
			+ "\4\5\4\0\3\5\2\0\4\5\1\0\1\5\16\0"
			+ "\11\5\1\337\16\5\5\0\1\276\1\0\1\57\1\0"
			+ "\4\276\1\0\1\276\57\0\1\340\1\341\67\0\1\342"
			+ "\53\0\3\5\2\0\4\5\1\0\1\5\1\0\1\343"
			+ "\14\0\30\5\4\0\3\5\2\0\4\5\1\0\1\5"
			+ "\16\0\3\5\1\344\24\5\4\0\3\5\2\0\4\5"
			+ "\1\0\1\5\16\0\3\5\1\345\24\5\4\0\3\5"
			+ "\2\0\4\5\1\0\1\5\16\0\1\346\27\5\4\0"
			+ "\3\5\2\0\4\5\1\0\1\5\16\0\11\5\1\347"
			+ "\16\5\4\0\3\5\2\0\4\5\1\0\1\5\16\0"
			+ "\6\5\1\350\21\5\4\0\3\5\2\0\4\5\1\0"
			+ "\1\5\16\0\3\5\1\351\24\5\4\0\3\5\2\0"
			+ "\4\5\1\0\1\5\16\0\11\5\1\352\16\5\4\0"
			+ "\3\5\2\0\4\5\1\0\1\5\16\0\2\5\1\353"
			+ "\25\5\4\0\3\5\2\0\4\5\1\0\1\5\16\0"
			+ "\11\5\1\354\16\5\4\0\3\5\2\0\4\5\1\0"
			+ "\1\5\16\0\12\5\1\355\15\5\4\0\3\5\2\0"
			+ "\4\5\1\0\1\5\16\0\2\5\1\356\25\5\4\0"
			+ "\3\5\2\0\4\5\1\0\1\5\16\0\2\5\1\357"
			+ "\25\5\4\0\3\5\2\0\4\5\1\0\1\5\16\0"
			+ "\11\5\1\360\16\5\4\0\3\5\2\0\4\5\1\0"
			+ "\1\5\16\0\5\5\1\361\22\5\4\0\3\5\2\0"
			+ "\4\5\1\0\1\5\16\0\11\5\1\362\16\5\4\0"
			+ "\3\5\2\0\4\5\1\0\1\5\16\0\11\5\1\363"
			+ "\16\5\4\0\3\5\2\0\4\5\1\0\1\5\16\0"
			+ "\24\5\1\364\3\5\4\0\3\5\2\0\4\5\1\0"
			+ "\1\5\16\0\24\5\1\365\3\5\4\0\3\5\2\0"
			+ "\4\5\1\0\1\5\1\0\1\366\14\0\30\5\4\0"
			+ "\3\5\2\0\4\5\1\0\1\5\16\0\3\5\1\367"
			+ "\24\5\4\0\3\5\2\0\4\5\1\0\1\5\16\0"
			+ "\3\5\1\370\24\5\4\0\3\5\2\0\4\5\1\0"
			+ "\1\5\16\0\12\5\1\371\15\5\5\0\1\372\4\0"
			+ "\3\372\1\0\1\372\57\0\3\372\62\0\4\373\1\0"
			+ "\1\373\130\0\1\374\6\0\3\5\2\0\4\5\1\0"
			+ "\1\5\16\0\13\5\1\375\14\5\4\0\3\5\2\0"
			+ "\4\5\1\0\1\5\16\0\12\5\1\376\15\5\4\0"
			+ "\3\5\2\0\4\5\1\0\1\5\16\0\13\5\1\377"
			+ "\14\5\4\0\3\5\2\0\4\5\1\0\1\5\16\0"
			+ "\2\5\1\u0100\25\5\4\0\3\5\2\0\4\5\1\0"
			+ "\1\5\16\0\13\5\1\u0101\14\5\4\0\3\5\2\0"
			+ "\4\5\1\0\1\5\16\0\1\u0102\27\5\4\0\3\5"
			+ "\2\0\4\5\1\0\1\5\1\0\1\u0103\14\0\30\5"
			+ "\4\0\3\5\2\0\4\5\1\0\1\5\16\0\16\5"
			+ "\1\u0104\11\5\4\0\3\5\2\0\4\5\1\0\1\5"
			+ "\16\0\1\u0105\27\5\62\0\1\u0106\6\0\3\5\2\0"
			+ "\4\5\1\0\1\5\16\0\1\u0107\27\5\4\0\3\5"
			+ "\2\0\4\5\1\0\1\5\16\0\5\5\1\u0108\22\5"
			+ "\10\0\1\u0109\61\0\1\u010a\3\0\4\u010a\1\0\1\u010a"
			+ "\121\0\1\u010b\15\0\3\5\2\0\4\5\1\0\1\5"
			+ "\16\0\2\5\1\u010c\25\5\4\0\3\5\2\0\4\5"
			+ "\1\0\1\5\16\0\11\5\1\u010d\16\5\4\0\3\5"
			+ "\2\0\4\5\1\0\1\5\16\0\2\5\1\u010e\25\5"
			+ "\4\0\3\5\2\0\4\5\1\0\1\5\16\0\10\5"
			+ "\1\u010f\17\5\4\0\3\5\2\0\4\5\1\0\1\5"
			+ "\16\0\13\5\1\u0110\14\5\44\0\1\u0111\24\0\3\5"
			+ "\2\0\4\5\1\0\1\5\1\0\1\u0112\14\0\30\5"
			+ "\4\0\3\5\2\0\4\5\1\0\1\5\1\0\1\u0113"
			+ "\14\0\30\5\53\0\1\u0114\22\0\1\u0115\2\u0116\1\u0117"
			+ "\54\0\3\5\2\0\4\5\1\0\1\5\16\0\7\5"
			+ "\1\u0118\20\5\4\0\3\5\2\0\4\5\1\0\1\5"
			+ "\16\0\11\5\1\u0119\16\5\35\0\1\u011a\74\0\1\u011b"
			+ "\64\0\1\u011c\24\0\1\u011d\4\0\3\u011d\1\0\1\u011d"
			+ "\53\0\1\u011d\3\0\4\u011d\1\0\1\u011d\57\0\2\u011d"
			+ "\56\0\3\5\2\0\4\5\1\0\1\5\16\0\1\5"
			+ "\1\u011e\26\5\4\0\3\5\2\0\4\5\1\0\1\5"
			+ "\16\0\12\5\1\u011f\15\5\37\0\1\u0120\73\0\1\u0121"
			+ "\64\0\1\u0122\22\0\3\5\2\0\4\5\1\0\1\5"
			+ "\16\0\1\u0123\27\5\36\0\1\u0124\101\0\1\u0125\64\0"
			+ "\1\u0126\12\0";

	private static int[] zzUnpackTrans() {
		int[] result = new int[11660];
		int offset = 0;
		offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackTrans(String packed, int offset, int[] result) {
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			value--;
			do
				result[j++] = value;
			while (--count > 0);
		}
		return j;
	}

	/* error codes */
	private static final int ZZ_UNKNOWN_ERROR = 0;
	private static final int ZZ_NO_MATCH = 1;
	private static final int ZZ_PUSHBACK_2BIG = 2;

	/* error messages for the codes above */
	private static final String ZZ_ERROR_MSG[] = {
			"Unkown internal scanner error", "Error: could not match input",
			"Error: pushback value was too large" };

	/**
	 * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
	 */
	private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

	private static final String ZZ_ATTRIBUTE_PACKED_0 = "\1\0\1\1\2\11\2\1\2\11\2\1\3\11\2\1"
			+ "\7\11\24\1\1\11\1\1\1\11\1\1\1\0\1\1"
			+ "\3\11\54\1\1\0\64\1\1\0\51\1\2\0\37\1"
			+ "\4\0\22\1\1\0\3\1\3\0\6\1\1\0\2\1"
			+ "\1\0\2\1\1\0\2\11\5\1\3\0\1\11\3\0"
			+ "\2\1\3\0\1\11\2\1\3\0\1\1\3\11";

	private static int[] zzUnpackAttribute() {
		int[] result = new int[294];
		int offset = 0;
		offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAttribute(String packed, int offset, int[] result) {
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do
				result[j++] = value;
			while (--count > 0);
		}
		return j;
	}

	/** the input device */
	private java.io.Reader zzReader;

	/** the current state of the DFA */
	private int zzState;

	/** the current lexical state */
	private int zzLexicalState = YYINITIAL;

	/**
	 * this buffer contains the current text to be matched and is the source of
	 * the yytext() string
	 */
	private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

	/** the textposition at the last accepting state */
	private int zzMarkedPos;

	/** the current text position in the buffer */
	private int zzCurrentPos;

	/** startRead marks the beginning of the yytext() string in the buffer */
	private int zzStartRead;

	/**
	 * endRead marks the last character in the buffer, that has been read from
	 * input
	 */
	private int zzEndRead;

	/** number of newlines encountered up to the start of the matched text */
	private int yyline;

	/** the number of characters up to the start of the matched text */
	private int yychar;

	/**
	 * the number of characters from the last newline up to the start of the
	 * matched text
	 */
	private int yycolumn;

	/**
	 * zzAtBOL == true <=> the scanner is currently at the beginning of a line
	 */
	private boolean zzAtBOL = true;

	/** zzAtEOF == true <=> the scanner is at the EOF */
	private boolean zzAtEOF;

	/** denotes if the user-EOF-code has already been executed */
	private boolean zzEOFDone;

	/* user code: */
	String string = new String();
	private ErrorMsg errorMsg;

	private void newline() {
		errorMsg.newline(yychar);
	}

	private void newline(int pos) {
		errorMsg.newline(pos);
	}

	private Symbol symbol(int type) {
		return new Symbol(type, yychar, yychar + yylength());
	}

	private Symbol symbol(int type, Object value) {
		return new Symbol(type, yychar, yychar + yylength(), value);
	}

	public Symbol next_token() throws java.lang.Exception {
		return nextToken();
	}

	private void err(int pos, String s) {
		errorMsg.error(pos, s);
	}

	private void err(String s) {
		errorMsg.error(yychar, s);
	}

	public Scanner(java.io.InputStream s, ErrorMsg e) {
		this(s);
		errorMsg = e;
	}

	public Scanner(java.io.Reader r, ErrorMsg e) {
		this(r);
		errorMsg = e;
	}

	/**
	 * Creates a new scanner There is also a java.io.InputStream version of this
	 * constructor.
	 * 
	 * @param in
	 *            the java.io.Reader to read input from.
	 */
	public Scanner(java.io.Reader in) {
		this.zzReader = in;
	}

	/**
	 * Creates a new scanner. There is also java.io.Reader version of this
	 * constructor.
	 * 
	 * @param in
	 *            the java.io.Inputstream to read input from.
	 */
	public Scanner(java.io.InputStream in) {
		this(new java.io.InputStreamReader(in));
	}

	/**
	 * Unpacks the compressed character translation table.
	 * 
	 * @param packed
	 *            the packed character translation table
	 * @return the unpacked character translation table
	 */
	private static char[] zzUnpackCMap(String packed) {
		char[] map = new char[0x10000];
		int i = 0; /* index in packed string */
		int j = 0; /* index in unpacked array */
		while (i < 136) {
			int count = packed.charAt(i++);
			char value = packed.charAt(i++);
			do
				map[j++] = value;
			while (--count > 0);
		}
		return map;
	}

	/**
	 * Refills the input buffer.
	 * 
	 * @return <code>false</code>, iff there was new input.
	 * 
	 * @exception java.io.IOException
	 *                if any I/O-Error occurs
	 */
	private boolean zzRefill() throws java.io.IOException {

		/* first: make room (if you can) */
		if (zzStartRead > 0) {
			System.arraycopy(zzBuffer, zzStartRead, zzBuffer, 0, zzEndRead
					- zzStartRead);

			/* translate stored positions */
			zzEndRead -= zzStartRead;
			zzCurrentPos -= zzStartRead;
			zzMarkedPos -= zzStartRead;
			zzStartRead = 0;
		}

		/* is the buffer big enough? */
		if (zzCurrentPos >= zzBuffer.length) {
			/* if not: blow it up */
			char newBuffer[] = new char[zzCurrentPos * 2];
			System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
			zzBuffer = newBuffer;
		}

		/* finally: fill the buffer with new input */
		int numRead = zzReader.read(zzBuffer, zzEndRead, zzBuffer.length
				- zzEndRead);

		if (numRead > 0) {
			zzEndRead += numRead;
			return false;
		}
		// unlikely but not impossible: read 0 characters, but not at end of
		// stream
		if (numRead == 0) {
			int c = zzReader.read();
			if (c == -1) {
				return true;
			} else {
				zzBuffer[zzEndRead++] = (char) c;
				return false;
			}
		}

		// numRead < 0
		return true;
	}

	/**
	 * Closes the input stream.
	 */
	public final void yyclose() throws java.io.IOException {
		zzAtEOF = true; /* indicate end of file */
		zzEndRead = zzStartRead; /* invalidate buffer */

		if (zzReader != null)
			zzReader.close();
	}

	/**
	 * Resets the scanner to read from a new input stream. Does not close the
	 * old reader.
	 * 
	 * All internal variables are reset, the old input stream <b>cannot</b> be
	 * reused (internal buffer is discarded and lost). Lexical state is set to
	 * <tt>ZZ_INITIAL</tt>.
	 * 
	 * @param reader
	 *            the new input stream
	 */
	public final void yyreset(java.io.Reader reader) {
		zzReader = reader;
		zzAtBOL = true;
		zzAtEOF = false;
		zzEOFDone = false;
		zzEndRead = zzStartRead = 0;
		zzCurrentPos = zzMarkedPos = 0;
		yyline = yychar = yycolumn = 0;
		zzLexicalState = YYINITIAL;
	}

	/**
	 * Returns the current lexical state.
	 */
	public final int yystate() {
		return zzLexicalState;
	}

	/**
	 * Enters a new lexical state
	 * 
	 * @param newState
	 *            the new lexical state
	 */
	public final void yybegin(int newState) {
		zzLexicalState = newState;
	}

	/**
	 * Returns the text matched by the current regular expression.
	 */
	public final String yytext() {
		return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
	}

	/**
	 * Returns the character at position <tt>pos</tt> from the matched text.
	 * 
	 * It is equivalent to yytext().charAt(pos), but faster
	 * 
	 * @param pos
	 *            the position of the character to fetch. A value from 0 to
	 *            yylength()-1.
	 * 
	 * @return the character at position pos
	 */
	public final char yycharat(int pos) {
		return zzBuffer[zzStartRead + pos];
	}

	/**
	 * Returns the length of the matched text region.
	 */
	public final int yylength() {
		return zzMarkedPos - zzStartRead;
	}

	/**
	 * Reports an error that occured while scanning.
	 * 
	 * In a wellformed scanner (no or only correct usage of yypushback(int) and
	 * a match-all fallback rule) this method will only be called with things
	 * that "Can't Possibly Happen". If this method is called, something is
	 * seriously wrong (e.g. a JFlex bug producing a faulty scanner etc.).
	 * 
	 * Usual syntax/scanner level error handling should be done in error
	 * fallback rules.
	 * 
	 * @param errorCode
	 *            the code of the errormessage to display
	 */
	private void zzScanError(int errorCode) {
		String message;
		try {
			message = ZZ_ERROR_MSG[errorCode];
		} catch (ArrayIndexOutOfBoundsException e) {
			message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
		}

		throw new Error(message);
	}

	/**
	 * Pushes the specified amount of characters back into the input stream.
	 * 
	 * They will be read again by then next call of the scanning method
	 * 
	 * @param number
	 *            the number of characters to be read again. This number must
	 *            not be greater than yylength()!
	 */
	public void yypushback(int number) {
		if (number > yylength())
			zzScanError(ZZ_PUSHBACK_2BIG);

		zzMarkedPos -= number;
	}

	/**
	 * Resumes scanning until the next regular expression is matched, the end of
	 * input is encountered or an I/O-Error occurs.
	 * 
	 * @return the next token
	 * @exception java.io.IOException
	 *                if any I/O-Error occurs
	 */
	public Symbol nextToken() throws java.io.IOException {
		int zzInput;
		int zzAction;

		// cached fields:
		int zzCurrentPosL;
		int zzMarkedPosL;
		int zzEndReadL = zzEndRead;
		char[] zzBufferL = zzBuffer;
		char[] zzCMapL = ZZ_CMAP;

		int[] zzTransL = ZZ_TRANS;
		int[] zzRowMapL = ZZ_ROWMAP;
		int[] zzAttrL = ZZ_ATTRIBUTE;

		while (true) {
			zzMarkedPosL = zzMarkedPos;

			yychar += zzMarkedPosL - zzStartRead;

			zzAction = -1;

			zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

			zzState = ZZ_LEXSTATE[zzLexicalState];

			zzForAction: {
				while (true) {

					if (zzCurrentPosL < zzEndReadL)
						zzInput = zzBufferL[zzCurrentPosL++];
					else if (zzAtEOF) {
						zzInput = YYEOF;
						break zzForAction;
					} else {
						// store back cached positions
						zzCurrentPos = zzCurrentPosL;
						zzMarkedPos = zzMarkedPosL;
						boolean eof = zzRefill();
						// get translated positions and possibly new buffer
						zzCurrentPosL = zzCurrentPos;
						zzMarkedPosL = zzMarkedPos;
						zzBufferL = zzBuffer;
						zzEndReadL = zzEndRead;
						if (eof) {
							zzInput = YYEOF;
							break zzForAction;
						} else {
							zzInput = zzBufferL[zzCurrentPosL++];
						}
					}
					int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
					if (zzNext == -1)
						break zzForAction;
					zzState = zzNext;

					int zzAttributes = zzAttrL[zzState];
					if ((zzAttributes & 1) == 1) {
						zzAction = zzState;
						zzMarkedPosL = zzCurrentPosL;
						if ((zzAttributes & 8) == 8)
							break zzForAction;
					}

				}
			}

			// store back cached position
			zzMarkedPos = zzMarkedPosL;

			switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
			case 16: {
				return symbol(sym.LPAREN, null);
			}
			case 84:
				break;
			case 28: {
				return symbol(sym.IN, null);
			}
			case 85:
				break;
			case 76: {
				return symbol(sym.ROLLBACK, null);
			}
			case 86:
				break;
			case 33: {
				return symbol(sym.ADD, null);
			}
			case 87:
				break;
			case 57: {
				return symbol(sym.FLOAT, null);
			}
			case 88:
				break;
			case 61: {
				return symbol(sym.EXISTS, null);
			}
			case 89:
				break;
			case 65: {
				return symbol(sym.UNIQUE, null);
			}
			case 90:
				break;
			case 48: {
				return symbol(sym.CHAR, null);
			}
			case 91:
				break;
			case 72: {
				return symbol(sym.TIMEVAL, yytext());
			}
			case 92:
				break;
			case 71: {
				return symbol(sym.VARCHAR, null);
			}
			case 93:
				break;
			case 22: {
				return symbol(sym.LE, null);
			}
			case 94:
				break;
			case 64: {
				return symbol(sym.CREATE, null);
			}
			case 95:
				break;
			case 11: {
				return symbol(sym.LT, null);
			}
			case 96:
				break;
			case 13: {
				return symbol(sym.PLUS, null);
			}
			case 97:
				break;
			case 77: {
				return symbol(sym.GROUPBY, null);
			}
			case 98:
				break;
			case 4: {
				return symbol(sym.ID, yytext());
			}
			case 99:
				break;
			case 58: {
				return symbol(sym.WHERE, null);
			}
			case 100:
				break;
			case 67: {
				return symbol(sym.HAVING, null);
			}
			case 101:
				break;
			case 9: {
				return symbol(sym.COMMA, null);
			}
			case 102:
				break;
			case 56: {
				return symbol(sym.CHECK, null);
			}
			case 103:
				break;
			case 18: {
				return symbol(sym.LBRACE, null);
			}
			case 104:
				break;
			case 40: {
				return symbol(sym.MAX, null);
			}
			case 105:
				break;
			case 82: {
				return symbol(sym.PRIMARYKEY, null);
			}
			case 106:
				break;
			case 50: {
				return symbol(sym.VIEW, null);
			}
			case 107:
				break;
			case 59: {
				return symbol(sym.DELETE, null);
			}
			case 108:
				break;
			case 51: {
				return symbol(sym.TABLE, null);
			}
			case 109:
				break;
			case 46: {
				return symbol(sym.DESC, null);
			}
			case 110:
				break;
			case 69: {
				return symbol(sym.DEFAULT, null);
			}
			case 111:
				break;
			case 41: {
				return symbol(sym.MIN, null);
			}
			case 112:
				break;
			case 20: {
				yybegin(STRING);
				string = "";
			}
			case 113:
				break;
			case 45: {
				return symbol(sym.DROP, null);
			}
			case 114:
				break;
			case 17: {
				return symbol(sym.RPAREN, null);
			}
			case 115:
				break;
			case 37: {
				return symbol(sym.INT, null);
			}
			case 116:
				break;
			case 29: {
				return symbol(sym.FLOATVAL, new Float(yytext()));
			}
			case 117:
				break;
			case 6: {
				return symbol(sym.DOT, null);
			}
			case 118:
				break;
			case 32: {
				return symbol(sym.ANY, null);
			}
			case 119:
				break;
			case 52: {
				return symbol(sym.ALTER, null);
			}
			case 120:
				break;
			case 30: {
				return symbol(sym.NOT, null);
			}
			case 121:
				break;
			case 34: {
				return symbol(sym.ALL, null);
			}
			case 122:
				break;
			case 23: {
				return symbol(sym.NEQ, null);
			}
			case 123:
				break;
			case 10: {
				return symbol(sym.EQ, null);
			}
			case 124:
				break;
			case 60: {
				return symbol(sym.ESCAPE, null);
			}
			case 125:
				break;
			case 53: {
				return symbol(sym.INDEX, null);
			}
			case 126:
				break;
			case 44: {
				return symbol(sym.DATE, null);
			}
			case 127:
				break;
			case 38: {
				return symbol(sym.SET, null);
			}
			case 128:
				break;
			case 35: {
				return symbol(sym.ASC, null);
			}
			case 129:
				break;
			case 8: {
				return symbol(sym.SEMICOLON, null);
			}
			case 130:
				break;
			case 79: {
				return symbol(sym.REFERENCES, null);
			}
			case 131:
				break;
			case 27: {
				return symbol(sym.AS, null);
			}
			case 132:
				break;
			case 62: {
				return symbol(sym.SELECT, null);
			}
			case 133:
				break;
			case 26: {
				return symbol(sym.OR, null);
			}
			case 134:
				break;
			case 42: {
				return symbol(sym.NULL, null);
			}
			case 135:
				break;
			case 14: {
				return symbol(sym.TIMES, null);
			}
			case 136:
				break;
			case 75: {
				return symbol(sym.DISTINCT, null);
			}
			case 137:
				break;
			case 31: {
				return symbol(sym.AND, null);
			}
			case 138:
				break;
			case 83: {
				return symbol(sym.FOREIGNKEY, null);
			}
			case 139:
				break;
			case 21: {
				yybegin(YYINITIAL);
				return symbol(sym.STRING, string);
			}
			case 140:
				break;
			case 78: {
				return symbol(sym.DATEVAL, yytext());
			}
			case 141:
				break;
			case 80: {
				return symbol(sym.TRANSACTION, null);
			}
			case 142:
				break;
			case 19: {
				return symbol(sym.RBRACE, null);
			}
			case 143:
				break;
			case 47: {
				return symbol(sym.LIKE, null);
			}
			case 144:
				break;
			case 66: {
				return symbol(sym.UPDATE, null);
			}
			case 145:
				break;
			case 68: {
				return symbol(sym.VALUES, null);
			}
			case 146:
				break;
			case 39: {
				return symbol(sym.SUM, null);
			}
			case 147:
				break;
			case 49: {
				return symbol(sym.FROM, null);
			}
			case 148:
				break;
			case 55: {
				return symbol(sym.COUNT, null);
			}
			case 149:
				break;
			case 81: {
				return symbol(sym.INSERTINTO, null);
			}
			case 150:
				break;
			case 74: {
				return symbol(sym.DATABASE, null);
			}
			case 151:
				break;
			case 24: {
				return symbol(sym.GE, null);
			}
			case 152:
				break;
			case 25: {
				return symbol(sym.ON, null);
			}
			case 153:
				break;
			case 12: {
				return symbol(sym.GT, null);
			}
			case 154:
				break;
			case 15: {
				return symbol(sym.DIVIDE, null);
			}
			case 155:
				break;
			case 63: {
				return symbol(sym.COMMIT, null);
			}
			case 156:
				break;
			case 70: {
				return symbol(sym.BOOLEAN, null);
			}
			case 157:
				break;
			case 3: {
				newline();
			}
			case 158:
				break;
			case 43: {
				return symbol(sym.TIME, null);
			}
			case 159:
				break;
			case 54: {
				return symbol(sym.START, null);
			}
			case 160:
				break;
			case 36: {
				return symbol(sym.AVG, null);
			}
			case 161:
				break;
			case 73: {
				return symbol(sym.ORDERBY, null);
			}
			case 162:
				break;
			case 7: {
				return symbol(sym.MINUS, null);
			}
			case 163:
				break;
			case 5: {
				return symbol(sym.INTVAL, new Integer(yytext()));
			}
			case 164:
				break;
			case 1: {
				string = string + yytext();
			}
			case 165:
				break;
			case 2: {
			}
			case 166:
				break;
			default:
				if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
					zzAtEOF = true;
					{
						return symbol(sym.EOF, null);
					}
				} else {
					zzScanError(ZZ_NO_MATCH);
				}
			}
		}
	}

}
