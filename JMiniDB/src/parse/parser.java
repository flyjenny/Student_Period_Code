//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Wed Sep 09 16:00:12 CST 2009
//----------------------------------------------------

package parse;

import absyn.*;

/**
 * CUP v0.10k generated parser.
 * 
 * @version Wed Sep 09 16:00:12 CST 2009
 */
public class parser extends java_cup.runtime.lr_parser {

	/** Default constructor. */
	public parser() {
		super();
	}

	/** Constructor which sets the default scanner. */
	public parser(java_cup.runtime.Scanner s) {
		super(s);
	}

	/** Production table. */
	protected static final short _production_table[][] = unpackFromStrings(new String[] { "\000\167\000\002\002\004\000\002\003\003\000\002\003"
			+ "\003\000\002\003\003\000\002\003\003\000\002\003\003"
			+ "\000\002\003\003\000\002\003\003\000\002\003\003\000"
			+ "\002\003\003\000\002\003\003\000\002\003\003\000\002"
			+ "\003\003\000\002\004\003\000\002\005\006\000\002\005"
			+ "\010\000\002\005\010\000\002\005\012\000\002\005\010"
			+ "\000\002\005\012\000\002\005\014\000\002\005\012\000"
			+ "\002\005\014\000\002\005\016\000\002\006\005\000\002"
			+ "\006\003\000\002\006\004\000\002\006\003\000\002\006"
			+ "\005\000\002\006\003\000\002\007\003\000\002\007\005"
			+ "\000\002\013\003\000\002\013\003\000\002\013\003\000"
			+ "\002\013\003\000\002\013\003\000\002\014\003\000\002"
			+ "\014\003\000\002\014\003\000\002\014\003\000\002\010"
			+ "\003\000\002\010\005\000\002\011\003\000\002\011\004"
			+ "\000\002\011\004\000\002\011\005\000\002\012\003\000"
			+ "\002\012\003\000\002\012\003\000\002\012\003\000\002"
			+ "\012\003\000\002\023\003\000\002\023\003\000\002\023"
			+ "\003\000\002\023\003\000\002\023\003\000\002\023\003"
			+ "\000\002\022\005\000\002\022\004\000\002\022\005\000"
			+ "\002\022\005\000\002\022\005\000\002\022\006\000\002"
			+ "\022\007\000\002\022\010\000\002\022\010\000\002\016"
			+ "\003\000\002\016\006\000\002\016\003\000\002\016\005"
			+ "\000\002\016\006\000\002\016\010\000\002\015\003\000"
			+ "\002\015\005\000\002\020\003\000\002\020\005\000\002"
			+ "\020\007\000\002\017\003\000\002\017\005\000\002\021"
			+ "\003\000\002\025\005\000\002\026\005\000\002\027\010"
			+ "\000\002\030\005\000\002\031\003\000\002\031\005\000"
			+ "\002\032\003\000\002\032\006\000\002\032\013\000\002"
			+ "\032\006\000\002\033\004\000\002\033\010\000\002\033"
			+ "\006\000\002\033\005\000\002\033\011\000\002\033\011"
			+ "\000\002\033\015\000\002\034\003\000\002\034\003\000"
			+ "\002\034\006\000\002\034\006\000\002\034\003\000\002"
			+ "\034\003\000\002\034\003\000\002\035\010\000\002\035"
			+ "\007\000\002\036\005\000\002\036\007\000\002\037\006"
			+ "\000\002\037\010\000\002\040\005\000\002\041\003\000"
			+ "\002\041\005\000\002\042\012\000\002\042\013\000\002"
			+ "\043\007\000\002\044\007\000\002\045\005" });

	/** Access to production table. */
	public short[][] production_table() {
		return _production_table;
	}

	/** Parse-action table. */
	protected static final short[][] _action_table = unpackFromStrings(new String[] { "\000\377\000\016\045\007\057\015\060\017\064\005\065"
			+ "\025\066\024\001\002\000\004\002\ufff7\001\002\000\004"
			+ "\004\367\001\002\000\004\002\366\001\002\000\040\004"
			+ "\032\005\042\006\041\007\051\010\044\011\037\025\302"
			+ "\027\050\045\007\056\043\106\310\107\313\110\311\111"
			+ "\312\112\304\001\002\000\004\002\000\001\002\000\004"
			+ "\002\ufff5\001\002\000\004\002\uffff\001\002\000\004\002"
			+ "\ufff9\001\002\000\004\002\ufffc\001\002\000\014\062\154"
			+ "\063\155\074\157\075\153\116\156\001\002\000\004\002"
			+ "\ufffb\001\002\000\012\062\142\063\144\075\141\116\143"
			+ "\001\002\000\004\002\ufffd\001\002\000\054\002\ufff4\013"
			+ "\ufff4\015\ufff4\016\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4"
			+ "\023\ufff4\024\ufff4\025\ufff4\026\ufff4\030\ufff4\034\ufff4\035"
			+ "\ufff4\041\ufff4\046\ufff4\047\ufff4\050\ufff4\052\ufff4\055\ufff4"
			+ "\001\002\000\004\002\ufff6\001\002\000\004\002\ufffa\001"
			+ "\002\000\004\046\135\001\002\000\004\004\030\001\002"
			+ "\000\004\002\ufff8\001\002\000\004\002\ufffe\001\002\000"
			+ "\004\070\031\001\002\000\004\004\032\001\002\000\102"
			+ "\002\uffd8\013\uffd8\014\133\015\uffd8\016\uffd8\017\uffd8\020"
			+ "\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8"
			+ "\030\uffd8\034\uffd8\035\uffd8\041\uffd8\046\uffd8\047\uffd8\050"
			+ "\uffd8\051\uffd8\052\uffd8\053\uffd8\054\uffd8\055\uffd8\077\uffd8"
			+ "\100\uffd8\101\uffd8\102\uffd8\103\uffd8\104\uffd8\105\uffd8\001"
			+ "\002\000\006\002\uff94\047\065\001\002\000\010\002\uff91"
			+ "\013\063\047\uff91\001\002\000\004\015\036\001\002\000"
			+ "\024\004\032\005\042\006\041\007\051\010\044\011\037"
			+ "\027\050\045\007\056\043\001\002\000\054\002\uffd1\013"
			+ "\uffd1\015\uffd1\016\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1"
			+ "\023\uffd1\024\uffd1\025\uffd1\026\uffd1\030\uffd1\034\uffd1\035"
			+ "\uffd1\041\uffd1\046\uffd1\047\uffd1\050\uffd1\052\uffd1\055\uffd1"
			+ "\001\002\000\054\002\uffe8\013\uffe8\015\uffe8\016\uffe8\017"
			+ "\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8"
			+ "\026\uffe8\030\uffe8\034\uffe8\035\uffe8\041\uffe8\046\uffe8\047"
			+ "\uffe8\050\uffe8\052\uffe8\055\uffe8\001\002\000\054\002\uffcf"
			+ "\013\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf\021\uffcf\022"
			+ "\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\030\uffcf\034\uffcf"
			+ "\035\uffcf\041\uffcf\046\uffcf\047\uffcf\050\uffcf\052\uffcf\055"
			+ "\uffcf\001\002\000\054\002\uffd0\013\uffd0\015\uffd0\016\uffd0"
			+ "\017\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0\024\uffd0\025"
			+ "\uffd0\026\uffd0\030\uffd0\034\uffd0\035\uffd0\041\uffd0\046\uffd0"
			+ "\047\uffd0\050\uffd0\052\uffd0\055\uffd0\001\002\000\004\004"
			+ "\032\001\002\000\054\002\uffd2\013\uffd2\015\uffd2\016\uffd2"
			+ "\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2\025"
			+ "\uffd2\026\uffd2\030\uffd2\034\uffd2\035\uffd2\041\uffd2\046\uffd2"
			+ "\047\uffd2\050\uffd2\052\uffd2\055\uffd2\001\002\000\054\002"
			+ "\uffe6\013\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6"
			+ "\022\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6\030\uffe6\034"
			+ "\uffe6\035\uffe6\041\uffe6\046\uffe6\047\uffe6\050\uffe6\052\uffe6"
			+ "\055\uffe6\001\002\000\054\002\uffe4\013\uffe4\015\uffe4\016"
			+ "\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4"
			+ "\025\uffe4\026\uffe4\030\uffe4\034\uffe4\035\uffe4\041\uffe4\046"
			+ "\uffe4\047\uffe4\050\uffe4\052\uffe4\055\uffe4\001\002\000\020"
			+ "\002\uff92\013\uff92\023\054\024\055\025\060\026\057\047"
			+ "\uff92\001\002\000\024\004\032\005\042\006\041\007\051"
			+ "\010\044\011\037\027\050\045\007\056\043\001\002\000"
			+ "\054\002\uffce\013\uffce\015\uffce\016\uffce\017\uffce\020\uffce"
			+ "\021\uffce\022\uffce\023\uffce\024\uffce\025\uffce\026\uffce\030"
			+ "\uffce\034\uffce\035\uffce\041\uffce\046\uffce\047\uffce\050\uffce"
			+ "\052\uffce\055\uffce\001\002\000\014\023\054\024\055\025"
			+ "\060\026\057\030\053\001\002\000\054\002\uffe9\013\uffe9"
			+ "\015\uffe9\016\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023"
			+ "\uffe9\024\uffe9\025\uffe9\026\uffe9\030\uffe9\034\uffe9\035\uffe9"
			+ "\041\uffe9\046\uffe9\047\uffe9\050\uffe9\052\uffe9\055\uffe9\001"
			+ "\002\000\024\004\uffdc\005\uffdc\006\uffdc\007\uffdc\010\uffdc"
			+ "\011\uffdc\027\uffdc\045\uffdc\056\uffdc\001\002\000\024\004"
			+ "\uffdb\005\uffdb\006\uffdb\007\uffdb\010\uffdb\011\uffdb\027\uffdb"
			+ "\045\uffdb\056\uffdb\001\002\000\024\004\032\005\042\006"
			+ "\041\007\051\010\044\011\037\027\050\045\007\056\043"
			+ "\001\002\000\024\004\uffd9\005\uffd9\006\uffd9\007\uffd9\010"
			+ "\uffd9\011\uffd9\027\uffd9\045\uffd9\056\uffd9\001\002\000\024"
			+ "\004\uffda\005\uffda\006\uffda\007\uffda\010\uffda\011\uffda\027"
			+ "\uffda\045\uffda\056\uffda\001\002\000\054\002\uffe5\013\uffe5"
			+ "\015\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023"
			+ "\054\024\055\025\060\026\057\030\uffe5\034\uffe5\035\uffe5"
			+ "\041\uffe5\046\uffe5\047\uffe5\050\uffe5\052\uffe5\055\uffe5\001"
			+ "\002\000\054\002\uffe7\013\uffe7\015\uffe7\016\uffe7\017\uffe7"
			+ "\020\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7\026"
			+ "\uffe7\030\uffe7\034\uffe7\035\uffe7\041\uffe7\046\uffe7\047\uffe7"
			+ "\050\uffe7\052\uffe7\055\uffe7\001\002\000\004\004\032\001"
			+ "\002\000\006\002\uff90\047\uff90\001\002\000\030\004\032"
			+ "\005\042\006\041\007\051\010\044\011\037\027\067\033"
			+ "\066\040\072\045\007\056\043\001\002\000\030\004\032"
			+ "\005\042\006\041\007\051\010\044\011\037\027\067\033"
			+ "\066\040\072\045\007\056\043\001\002\000\030\004\032"
			+ "\005\042\006\041\007\051\010\044\011\037\027\067\033"
			+ "\066\040\072\045\007\056\043\001\002\000\054\002\uffb1"
			+ "\013\uffb1\015\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1\022"
			+ "\uffb1\023\uffb1\024\uffb1\025\uffb1\026\uffb1\030\uffb1\034\123"
			+ "\035\124\041\uffb1\046\uffb1\047\uffb1\050\uffb1\052\uffb1\055"
			+ "\uffb1\001\002\000\030\015\103\016\102\017\105\020\106"
			+ "\021\101\022\104\023\054\024\055\025\060\026\057\041"
			+ "\100\001\002\000\004\027\074\001\002\000\004\002\uff93"
			+ "\001\002\000\004\045\007\001\002\000\004\030\076\001"
			+ "\002\000\054\002\uffc2\013\uffc2\015\uffc2\016\uffc2\017\uffc2"
			+ "\020\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2\026"
			+ "\uffc2\030\uffc2\034\uffc2\035\uffc2\041\uffc2\046\uffc2\047\uffc2"
			+ "\050\uffc2\052\uffc2\055\uffc2\001\002\000\030\004\032\005"
			+ "\042\006\041\007\051\010\044\011\037\027\050\042\113"
			+ "\043\112\045\007\056\043\001\002\000\004\027\107\001"
			+ "\002\000\030\004\uffc9\005\uffc9\006\uffc9\007\uffc9\010\uffc9"
			+ "\011\uffc9\027\uffc9\042\uffc9\043\uffc9\045\uffc9\056\uffc9\001"
			+ "\002\000\030\004\uffcc\005\uffcc\006\uffcc\007\uffcc\010\uffcc"
			+ "\011\uffcc\027\uffcc\042\uffcc\043\uffcc\045\uffcc\056\uffcc\001"
			+ "\002\000\030\004\uffcd\005\uffcd\006\uffcd\007\uffcd\010\uffcd"
			+ "\011\uffcd\027\uffcd\042\uffcd\043\uffcd\045\uffcd\056\uffcd\001"
			+ "\002\000\030\004\uffc8\005\uffc8\006\uffc8\007\uffc8\010\uffc8"
			+ "\011\uffc8\027\uffc8\042\uffc8\043\uffc8\045\uffc8\056\uffc8\001"
			+ "\002\000\030\004\uffcb\005\uffcb\006\uffcb\007\uffcb\010\uffcb"
			+ "\011\uffcb\027\uffcb\042\uffcb\043\uffcb\045\uffcb\056\uffcb\001"
			+ "\002\000\030\004\uffca\005\uffca\006\uffca\007\uffca\010\uffca"
			+ "\011\uffca\027\uffca\042\uffca\043\uffca\045\uffca\056\uffca\001"
			+ "\002\000\004\045\007\001\002\000\004\030\111\001\002"
			+ "\000\054\002\uffc1\013\uffc1\015\uffc1\016\uffc1\017\uffc1\020"
			+ "\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1"
			+ "\030\uffc1\034\uffc1\035\uffc1\041\uffc1\046\uffc1\047\uffc1\050"
			+ "\uffc1\052\uffc1\055\uffc1\001\002\000\004\027\120\001\002"
			+ "\000\004\027\115\001\002\000\054\002\uffc3\013\uffc3\015"
			+ "\uffc3\016\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3\023\054"
			+ "\024\055\025\060\026\057\030\uffc3\034\uffc3\035\uffc3\041"
			+ "\uffc3\046\uffc3\047\uffc3\050\uffc3\052\uffc3\055\uffc3\001\002"
			+ "\000\004\045\007\001\002\000\004\030\117\001\002\000"
			+ "\054\002\uffbf\013\uffbf\015\uffbf\016\uffbf\017\uffbf\020\uffbf"
			+ "\021\uffbf\022\uffbf\023\uffbf\024\uffbf\025\uffbf\026\uffbf\030"
			+ "\uffbf\034\uffbf\035\uffbf\041\uffbf\046\uffbf\047\uffbf\050\uffbf"
			+ "\052\uffbf\055\uffbf\001\002\000\004\045\007\001\002\000"
			+ "\004\030\122\001\002\000\054\002\uffc0\013\uffc0\015\uffc0"
			+ "\016\uffc0\017\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0\024"
			+ "\uffc0\025\uffc0\026\uffc0\030\uffc0\034\uffc0\035\uffc0\041\uffc0"
			+ "\046\uffc0\047\uffc0\050\uffc0\052\uffc0\055\uffc0\001\002\000"
			+ "\030\004\032\005\042\006\041\007\051\010\044\011\037"
			+ "\027\067\033\066\040\072\045\007\056\043\001\002\000"
			+ "\030\004\032\005\042\006\041\007\051\010\044\011\037"
			+ "\027\067\033\066\040\072\045\007\056\043\001\002\000"
			+ "\054\002\uffc4\013\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4"
			+ "\021\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4\030"
			+ "\uffc4\034\123\035\124\041\uffc4\046\uffc4\047\uffc4\050\uffc4"
			+ "\052\uffc4\055\uffc4\001\002\000\054\002\uffc5\013\uffc5\015"
			+ "\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5"
			+ "\024\uffc5\025\uffc5\026\uffc5\030\uffc5\034\123\035\uffc5\041"
			+ "\uffc5\046\uffc5\047\uffc5\050\uffc5\052\uffc5\055\uffc5\001\002"
			+ "\000\032\015\103\016\102\017\105\020\106\021\101\022"
			+ "\104\023\054\024\055\025\060\026\057\030\053\041\100"
			+ "\001\002\000\010\030\131\034\123\035\124\001\002\000"
			+ "\054\002\uffc7\013\uffc7\015\uffc7\016\uffc7\017\uffc7\020\uffc7"
			+ "\021\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7\026\uffc7\030"
			+ "\uffc7\034\uffc7\035\uffc7\041\uffc7\046\uffc7\047\uffc7\050\uffc7"
			+ "\052\uffc7\055\uffc7\001\002\000\054\002\uffc6\013\uffc6\015"
			+ "\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6\022\uffc6\023\uffc6"
			+ "\024\uffc6\025\uffc6\026\uffc6\030\uffc6\034\123\035\124\041"
			+ "\uffc6\046\uffc6\047\uffc6\050\uffc6\052\uffc6\055\uffc6\001\002"
			+ "\000\004\004\134\001\002\000\100\002\uffd7\013\uffd7\015"
			+ "\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7"
			+ "\024\uffd7\025\uffd7\026\uffd7\030\uffd7\034\uffd7\035\uffd7\041"
			+ "\uffd7\046\uffd7\047\uffd7\050\uffd7\051\uffd7\052\uffd7\053\uffd7"
			+ "\054\uffd7\055\uffd7\077\uffd7\100\uffd7\101\uffd7\102\uffd7\103"
			+ "\uffd7\104\uffd7\105\uffd7\001\002\000\004\004\136\001\002"
			+ "\000\006\002\uff96\047\137\001\002\000\030\004\032\005"
			+ "\042\006\041\007\051\010\044\011\037\027\067\033\066"
			+ "\040\072\045\007\056\043\001\002\000\004\002\uff95\001"
			+ "\002\000\004\004\150\001\002\000\004\004\147\001\002"
			+ "\000\004\004\146\001\002\000\004\004\145\001\002\000"
			+ "\004\002\uffad\001\002\000\004\002\uff8b\001\002\000\004"
			+ "\002\uffaf\001\002\000\004\076\151\001\002\000\004\004"
			+ "\152\001\002\000\004\002\uff8d\001\002\000\004\004\274"
			+ "\001\002\000\004\004\273\001\002\000\004\004\172\001"
			+ "\002\000\004\004\167\001\002\000\004\075\160\001\002"
			+ "\000\004\004\161\001\002\000\004\076\162\001\002\000"
			+ "\004\004\163\001\002\000\004\027\164\001\002\000\004"
			+ "\004\032\001\002\000\004\030\166\001\002\000\004\002"
			+ "\uff8e\001\002\000\004\055\170\001\002\000\004\045\007"
			+ "\001\002\000\004\002\uff8c\001\002\000\004\027\173\001"
			+ "\002\000\012\004\032\073\200\114\175\115\174\001\002"
			+ "\000\004\027\270\001\002\000\004\027\260\001\002\000"
			+ "\020\077\225\100\222\101\224\102\221\103\223\104\220"
			+ "\105\216\001\002\000\006\013\214\030\uffac\001\002\000"
			+ "\004\027\204\001\002\000\004\030\203\001\002\000\006"
			+ "\013\uffaa\030\uffaa\001\002\000\004\002\uffae\001\002\000"
			+ "\004\004\032\001\002\000\004\030\213\001\002\000\062"
			+ "\002\uffd6\013\207\015\uffd6\016\uffd6\017\uffd6\020\uffd6\021"
			+ "\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\030\uffd6"
			+ "\034\uffd6\035\uffd6\041\uffd6\046\uffd6\047\uffd6\050\uffd6\051"
			+ "\uffd6\052\uffd6\053\210\054\211\055\uffd6\001\002\000\004"
			+ "\004\032\001\002\000\056\002\uffd5\013\uffd5\015\uffd5\016"
			+ "\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5"
			+ "\025\uffd5\026\uffd5\030\uffd5\034\uffd5\035\uffd5\041\uffd5\046"
			+ "\uffd5\047\uffd5\050\uffd5\051\uffd5\052\uffd5\055\uffd5\001\002"
			+ "\000\056\002\uffd4\013\uffd4\015\uffd4\016\uffd4\017\uffd4\020"
			+ "\uffd4\021\uffd4\022\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4"
			+ "\030\uffd4\034\uffd4\035\uffd4\041\uffd4\046\uffd4\047\uffd4\050"
			+ "\uffd4\051\uffd4\052\uffd4\055\uffd4\001\002\000\056\002\uffd3"
			+ "\013\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3\022"
			+ "\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3\030\uffd3\034\uffd3"
			+ "\035\uffd3\041\uffd3\046\uffd3\047\uffd3\050\uffd3\051\uffd3\052"
			+ "\uffd3\055\uffd3\001\002\000\006\013\uffa9\030\uffa9\001\002"
			+ "\000\012\004\032\073\200\114\175\115\174\001\002\000"
			+ "\004\030\uffab\001\002\000\016\013\uff99\030\uff99\072\uff99"
			+ "\073\uff99\113\uff99\115\uff99\001\002\000\016\013\uffa6\030"
			+ "\uffa6\072\234\073\237\113\236\115\235\001\002\000\016"
			+ "\013\uff9a\030\uff9a\072\uff9a\073\uff9a\113\uff9a\115\uff9a\001"
			+ "\002\000\004\027\231\001\002\000\016\013\uff9e\030\uff9e"
			+ "\072\uff9e\073\uff9e\113\uff9e\115\uff9e\001\002\000\016\013"
			+ "\uff9b\030\uff9b\072\uff9b\073\uff9b\113\uff9b\115\uff9b\001\002"
			+ "\000\004\027\226\001\002\000\016\013\uff9f\030\uff9f\072"
			+ "\uff9f\073\uff9f\113\uff9f\115\uff9f\001\002\000\004\010\227"
			+ "\001\002\000\004\030\230\001\002\000\016\013\uff9d\030"
			+ "\uff9d\072\uff9d\073\uff9d\113\uff9d\115\uff9d\001\002\000\004"
			+ "\010\232\001\002\000\004\030\233\001\002\000\016\013"
			+ "\uff9c\030\uff9c\072\uff9c\073\uff9c\113\uff9c\115\uff9c\001\002"
			+ "\000\014\005\042\006\041\007\051\010\044\011\037\001"
			+ "\002\000\004\027\254\001\002\000\004\004\244\001\002"
			+ "\000\010\013\uffa3\030\uffa3\115\240\001\002\000\004\027"
			+ "\241\001\002\000\030\004\032\005\042\006\041\007\051"
			+ "\010\044\011\037\027\067\033\066\040\072\045\007\056"
			+ "\043\001\002\000\004\030\243\001\002\000\006\013\uffa2"
			+ "\030\uffa2\001\002\000\004\027\245\001\002\000\004\004"
			+ "\246\001\002\000\004\030\247\001\002\000\010\013\uffa1"
			+ "\030\uffa1\115\250\001\002\000\004\027\251\001\002\000"
			+ "\030\004\032\005\042\006\041\007\051\010\044\011\037"
			+ "\027\067\033\066\040\072\045\007\056\043\001\002\000"
			+ "\004\030\253\001\002\000\006\013\uffa0\030\uffa0\001\002"
			+ "\000\030\004\032\005\042\006\041\007\051\010\044\011"
			+ "\037\027\067\033\066\040\072\045\007\056\043\001\002"
			+ "\000\004\030\256\001\002\000\006\013\uffa5\030\uffa5\001"
			+ "\002\000\006\013\uffa4\030\uffa4\001\002\000\004\004\032"
			+ "\001\002\000\004\030\262\001\002\000\004\113\263\001"
			+ "\002\000\004\004\264\001\002\000\004\027\265\001\002"
			+ "\000\004\004\266\001\002\000\004\030\267\001\002\000"
			+ "\006\013\uffa8\030\uffa8\001\002\000\030\004\032\005\042"
			+ "\006\041\007\051\010\044\011\037\027\067\033\066\040"
			+ "\072\045\007\056\043\001\002\000\004\030\272\001\002"
			+ "\000\006\013\uffa7\030\uffa7\001\002\000\004\002\uffb0\001"
			+ "\002\000\004\076\275\001\002\000\004\004\276\001\002"
			+ "\000\004\027\277\001\002\000\004\004\032\001\002\000"
			+ "\004\030\301\001\002\000\004\002\uff8f\001\002\000\006"
			+ "\013\uffbe\046\uffbe\001\002\000\004\046\327\001\002\000"
			+ "\004\027\uffdd\001\002\000\004\027\320\001\002\000\006"
			+ "\013\316\046\uffb8\001\002\000\020\013\uffbc\023\054\024"
			+ "\055\025\060\026\057\046\uffbc\055\314\001\002\000\004"
			+ "\027\uffe1\001\002\000\004\027\uffdf\001\002\000\004\027"
			+ "\uffde\001\002\000\004\027\uffe0\001\002\000\004\004\315"
			+ "\001\002\000\006\013\uffbb\046\uffbb\001\002\000\040\004"
			+ "\032\005\042\006\041\007\051\010\044\011\037\025\302"
			+ "\027\050\045\007\056\043\106\310\107\313\110\311\111"
			+ "\312\112\304\001\002\000\004\046\uffb7\001\002\000\006"
			+ "\004\032\025\322\001\002\000\004\030\324\001\002\000"
			+ "\004\030\323\001\002\000\006\013\uffbd\046\uffbd\001\002"
			+ "\000\010\013\uffba\046\uffba\055\325\001\002\000\004\004"
			+ "\326\001\002\000\006\013\uffb9\046\uffb9\001\002\000\006"
			+ "\004\330\027\332\001\002\000\054\002\uffb6\013\uffb6\015"
			+ "\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6\023\uffb6"
			+ "\024\uffb6\025\uffb6\026\uffb6\030\uffb6\034\uffb6\035\uffb6\041"
			+ "\uffb6\046\uffb6\047\uffb6\050\uffb6\052\uffb6\055\364\001\002"
			+ "\000\054\002\uffb3\013\362\015\uffb3\016\uffb3\017\uffb3\020"
			+ "\uffb3\021\uffb3\022\uffb3\023\uffb3\024\uffb3\025\uffb3\026\uffb3"
			+ "\030\uffb3\034\uffb3\035\uffb3\041\uffb3\046\uffb3\047\uffb3\050"
			+ "\uffb3\052\uffb3\055\uffb3\001\002\000\004\045\007\001\002"
			+ "\000\054\002\ufff3\013\ufff3\015\ufff3\016\ufff3\017\ufff3\020"
			+ "\ufff3\021\ufff3\022\ufff3\023\ufff3\024\ufff3\025\ufff3\026\ufff3"
			+ "\030\ufff3\034\ufff3\035\ufff3\041\ufff3\046\ufff3\047\335\050"
			+ "\336\052\334\055\ufff3\001\002\000\004\004\032\001\002"
			+ "\000\030\004\032\005\042\006\041\007\051\010\044\011"
			+ "\037\027\067\033\066\040\072\045\007\056\043\001\002"
			+ "\000\004\004\032\001\002\000\056\002\ufff1\013\ufff1\015"
			+ "\ufff1\016\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1"
			+ "\024\ufff1\025\ufff1\026\ufff1\030\ufff1\034\ufff1\035\ufff1\041"
			+ "\ufff1\046\ufff1\047\ufff1\050\ufff1\051\340\052\ufff1\055\ufff1"
			+ "\001\002\000\030\004\032\005\042\006\041\007\051\010"
			+ "\044\011\037\027\067\033\066\040\072\045\007\056\043"
			+ "\001\002\000\054\002\ufff0\013\ufff0\015\ufff0\016\ufff0\017"
			+ "\ufff0\020\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0"
			+ "\026\ufff0\030\ufff0\034\ufff0\035\ufff0\041\ufff0\046\ufff0\047"
			+ "\ufff0\050\ufff0\052\ufff0\055\ufff0\001\002\000\054\002\ufff2"
			+ "\013\ufff2\015\ufff2\016\ufff2\017\ufff2\020\ufff2\021\ufff2\022"
			+ "\ufff2\023\ufff2\024\ufff2\025\ufff2\026\ufff2\030\ufff2\034\ufff2"
			+ "\035\ufff2\041\ufff2\046\ufff2\047\ufff2\050\344\052\343\055"
			+ "\ufff2\001\002\000\004\004\032\001\002\000\004\004\032"
			+ "\001\002\000\056\002\uffee\013\uffee\015\uffee\016\uffee\017"
			+ "\uffee\020\uffee\021\uffee\022\uffee\023\uffee\024\uffee\025\uffee"
			+ "\026\uffee\030\uffee\034\uffee\035\uffee\041\uffee\046\uffee\047"
			+ "\uffee\050\uffee\051\347\052\346\055\uffee\001\002\000\004"
			+ "\004\032\001\002\000\030\004\032\005\042\006\041\007"
			+ "\051\010\044\011\037\027\067\033\066\040\072\045\007"
			+ "\056\043\001\002\000\054\002\uffed\013\uffed\015\uffed\016"
			+ "\uffed\017\uffed\020\uffed\021\uffed\022\uffed\023\uffed\024\uffed"
			+ "\025\uffed\026\uffed\030\uffed\034\uffed\035\uffed\041\uffed\046"
			+ "\uffed\047\uffed\050\uffed\052\351\055\uffed\001\002\000\004"
			+ "\004\032\001\002\000\054\002\uffea\013\uffea\015\uffea\016"
			+ "\uffea\017\uffea\020\uffea\021\uffea\022\uffea\023\uffea\024\uffea"
			+ "\025\uffea\026\uffea\030\uffea\034\uffea\035\uffea\041\uffea\046"
			+ "\uffea\047\uffea\050\uffea\052\uffea\055\uffea\001\002\000\054"
			+ "\002\uffeb\013\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb\021"
			+ "\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\030\uffeb"
			+ "\034\uffeb\035\uffeb\041\uffeb\046\uffeb\047\uffeb\050\uffeb\052"
			+ "\uffeb\055\uffeb\001\002\000\054\002\uffec\013\uffec\015\uffec"
			+ "\016\uffec\017\uffec\020\uffec\021\uffec\022\uffec\023\uffec\024"
			+ "\uffec\025\uffec\026\uffec\030\uffec\034\uffec\035\uffec\041\uffec"
			+ "\046\uffec\047\uffec\050\uffec\052\uffec\055\uffec\001\002\000"
			+ "\054\002\uffef\013\uffef\015\uffef\016\uffef\017\uffef\020\uffef"
			+ "\021\uffef\022\uffef\023\uffef\024\uffef\025\uffef\026\uffef\030"
			+ "\uffef\034\uffef\035\uffef\041\uffef\046\uffef\047\uffef\050\uffef"
			+ "\052\uffef\055\uffef\001\002\000\004\030\357\001\002\000"
			+ "\004\055\360\001\002\000\004\004\361\001\002\000\054"
			+ "\002\uffb4\013\uffb4\015\uffb4\016\uffb4\017\uffb4\020\uffb4\021"
			+ "\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4\030\uffb4"
			+ "\034\uffb4\035\uffb4\041\uffb4\046\uffb4\047\uffb4\050\uffb4\052"
			+ "\uffb4\055\uffb4\001\002\000\006\004\330\027\332\001\002"
			+ "\000\054\002\uffb2\013\uffb2\015\uffb2\016\uffb2\017\uffb2\020"
			+ "\uffb2\021\uffb2\022\uffb2\023\uffb2\024\uffb2\025\uffb2\026\uffb2"
			+ "\030\uffb2\034\uffb2\035\uffb2\041\uffb2\046\uffb2\047\uffb2\050"
			+ "\uffb2\052\uffb2\055\uffb2\001\002\000\004\004\365\001\002"
			+ "\000\054\002\uffb5\013\uffb5\015\uffb5\016\uffb5\017\uffb5\020"
			+ "\uffb5\021\uffb5\022\uffb5\023\uffb5\024\uffb5\025\uffb5\026\uffb5"
			+ "\030\uffb5\034\uffb5\035\uffb5\041\uffb5\046\uffb5\047\uffb5\050"
			+ "\uffb5\052\uffb5\055\uffb5\001\002\000\004\002\001\001\002"
			+ "\000\006\027\371\067\370\001\002\000\004\027\374\001"
			+ "\002\000\004\045\007\001\002\000\004\030\373\001\002"
			+ "\000\004\002\uff97\001\002\000\024\004\032\005\042\006"
			+ "\041\007\051\010\044\011\037\027\050\045\007\056\043"
			+ "\001\002\000\016\013\u0100\023\054\024\055\025\060\026"
			+ "\057\030\uffe3\001\002\000\004\030\377\001\002\000\004"
			+ "\002\uff98\001\002\000\024\004\032\005\042\006\041\007"
			+ "\051\010\044\011\037\027\050\045\007\056\043\001\002"
			+ "\000\004\030\uffe2\001\002" });

	/** Access to parse-action table. */
	public short[][] action_table() {
		return _action_table;
	}

	/** <code>reduce_goto</code> table. */
	protected static final short[][] _reduce_table = unpackFromStrings(new String[] { "\000\377\000\036\003\005\004\007\005\020\025\011\026"
			+ "\026\027\017\030\013\035\003\036\021\037\010\042\012"
			+ "\043\025\044\015\045\022\001\001\000\002\001\001\000"
			+ "\002\001\001\000\002\001\001\000\022\004\045\005\020"
			+ "\006\306\010\037\012\044\013\304\015\302\016\305\001"
			+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
			+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
			+ "\002\001\001\000\002\001\001\000\002\001\001\000\002"
			+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
			+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
			+ "\000\002\001\001\000\010\010\034\040\033\041\032\001"
			+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
			+ "\000\002\001\001\000\014\004\045\005\020\006\046\010"
			+ "\037\012\044\001\001\000\002\001\001\000\002\001\001"
			+ "\000\002\001\001\000\002\001\001\000\004\010\061\001"
			+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
			+ "\000\004\014\055\001\001\000\014\004\045\005\020\006"
			+ "\051\010\037\012\044\001\001\000\002\001\001\000\004"
			+ "\014\055\001\001\000\002\001\001\000\002\001\001\000"
			+ "\002\001\001\000\014\004\045\005\020\006\060\010\037"
			+ "\012\044\001\001\000\002\001\001\000\002\001\001\000"
			+ "\004\014\055\001\001\000\002\001\001\000\010\010\034"
			+ "\040\033\041\063\001\001\000\002\001\001\000\020\004"
			+ "\045\005\020\006\070\010\037\012\044\021\072\022\067"
			+ "\001\001\000\016\004\045\005\020\006\070\010\037\012"
			+ "\044\022\131\001\001\000\016\004\045\005\020\006\126"
			+ "\010\037\012\044\022\127\001\001\000\002\001\001\000"
			+ "\006\014\055\023\076\001\001\000\002\001\001\000\002"
			+ "\001\001\000\006\004\074\005\020\001\001\000\002\001"
			+ "\001\000\002\001\001\000\014\004\045\005\020\006\113"
			+ "\010\037\012\044\001\001\000\002\001\001\000\002\001"
			+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
			+ "\000\002\001\001\000\002\001\001\000\006\004\107\005"
			+ "\020\001\001\000\002\001\001\000\002\001\001\000\002"
			+ "\001\001\000\002\001\001\000\004\014\055\001\001\000"
			+ "\006\004\115\005\020\001\001\000\002\001\001\000\002"
			+ "\001\001\000\006\004\120\005\020\001\001\000\002\001"
			+ "\001\000\002\001\001\000\016\004\045\005\020\006\070"
			+ "\010\037\012\044\022\125\001\001\000\016\004\045\005"
			+ "\020\006\070\010\037\012\044\022\124\001\001\000\002"
			+ "\001\001\000\002\001\001\000\006\014\055\023\076\001"
			+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
			+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
			+ "\002\001\001\000\020\004\045\005\020\006\070\010\037"
			+ "\012\044\021\137\022\067\001\001\000\002\001\001\000"
			+ "\002\001\001\000\002\001\001\000\002\001\001\000\002"
			+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
			+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
			+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
			+ "\002\001\001\000\002\001\001\000\002\001\001\000\002"
			+ "\001\001\000\002\001\001\000\002\001\001\000\004\010"
			+ "\164\001\001\000\002\001\001\000\002\001\001\000\002"
			+ "\001\001\000\006\004\170\005\020\001\001\000\002\001"
			+ "\001\000\002\001\001\000\012\010\175\031\200\032\176"
			+ "\033\201\001\001\000\002\001\001\000\002\001\001\000"
			+ "\004\034\216\001\001\000\002\001\001\000\002\001\001"
			+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
			+ "\006\010\205\011\204\001\001\000\002\001\001\000\002"
			+ "\001\001\000\006\010\205\011\211\001\001\000\002\001"
			+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
			+ "\000\012\010\175\031\214\032\176\033\201\001\001\000"
			+ "\002\001\001\000\002\001\001\000\002\001\001\000\002"
			+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
			+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
			+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
			+ "\002\001\001\000\002\001\001\000\004\012\256\001\001"
			+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
			+ "\002\001\001\000\020\004\045\005\020\006\070\010\037"
			+ "\012\044\021\241\022\067\001\001\000\002\001\001\000"
			+ "\002\001\001\000\002\001\001\000\002\001\001\000\002"
			+ "\001\001\000\002\001\001\000\002\001\001\000\020\004"
			+ "\045\005\020\006\070\010\037\012\044\021\251\022\067"
			+ "\001\001\000\002\001\001\000\002\001\001\000\020\004"
			+ "\045\005\020\006\070\010\037\012\044\021\254\022\067"
			+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
			+ "\001\000\004\010\260\001\001\000\002\001\001\000\002"
			+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
			+ "\001\000\002\001\001\000\002\001\001\000\020\004\045"
			+ "\005\020\006\070\010\037\012\044\021\270\022\067\001"
			+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
			+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
			+ "\004\010\277\001\001\000\002\001\001\000\002\001\001"
			+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
			+ "\002\001\001\000\002\001\001\000\004\014\055\001\001"
			+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
			+ "\002\001\001\000\002\001\001\000\002\001\001\000\022"
			+ "\004\045\005\020\006\306\010\037\012\044\013\304\015"
			+ "\316\016\305\001\001\000\002\001\001\000\004\010\320"
			+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
			+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
			+ "\000\006\017\332\020\330\001\001\000\002\001\001\000"
			+ "\002\001\001\000\006\004\355\005\020\001\001\000\002"
			+ "\001\001\000\006\010\205\011\354\001\001\000\020\004"
			+ "\045\005\020\006\070\010\037\012\044\021\341\022\067"
			+ "\001\001\000\006\010\205\011\336\001\001\000\002\001"
			+ "\001\000\020\004\045\005\020\006\070\010\037\012\044"
			+ "\021\340\022\067\001\001\000\002\001\001\000\002\001"
			+ "\001\000\006\010\205\011\353\001\001\000\006\010\205"
			+ "\011\344\001\001\000\002\001\001\000\006\010\205\011"
			+ "\352\001\001\000\020\004\045\005\020\006\070\010\037"
			+ "\012\044\021\347\022\067\001\001\000\002\001\001\000"
			+ "\006\010\205\011\351\001\001\000\002\001\001\000\002"
			+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
			+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
			+ "\000\006\017\362\020\330\001\001\000\002\001\001\000"
			+ "\002\001\001\000\002\001\001\000\002\001\001\000\002"
			+ "\001\001\000\002\001\001\000\006\004\371\005\020\001"
			+ "\001\000\002\001\001\000\002\001\001\000\016\004\045"
			+ "\005\020\006\374\007\375\010\037\012\044\001\001\000"
			+ "\004\014\055\001\001\000\002\001\001\000\002\001\001"
			+ "\000\016\004\045\005\020\006\374\007\u0100\010\037\012"
			+ "\044\001\001\000\002\001\001" });

	/** Access to <code>reduce_goto</code> table. */
	public short[][] reduce_table() {
		return _reduce_table;
	}

	/** Instance of action encapsulation class. */
	protected CUP$parser$actions action_obj;

	/** Action encapsulation object initializer. */
	protected void init_actions() {
		action_obj = new CUP$parser$actions(this);
	}

	/** Invoke a user supplied parse action. */
	public java_cup.runtime.Symbol do_action(int act_num,
			java_cup.runtime.lr_parser parser, java.util.Stack stack, int top)
			throws java.lang.Exception {
		/* call code in generated class */
		return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
	}

	/** Indicates start state. */
	public int start_state() {
		return 0;
	}

	/** Indicates start production. */
	public int start_production() {
		return 0;
	}

	/** <code>EOF</code> Symbol index. */
	public int EOF_sym() {
		return 0;
	}

	/** <code>error</code> Symbol index. */
	public int error_sym() {
		return 1;
	}

	/** User initialization code. */
	public void user_init() throws java.lang.Exception {

	}

	/** Scan to get the next Symbol. */
	public java_cup.runtime.Symbol scan() throws java.lang.Exception {
		return lexer.nextToken();
	}

	Scanner lexer;
	ErrorMsg errorMsg;

	public void syntax_error(java_cup.runtime.Symbol current) {
		report_error("Syntax error (" + current.sym + ")", current);
	}

	public void report_error(String message, java_cup.runtime.Symbol tok) {
		errorMsg.error(tok.left, message);
	}

	public parser(Scanner l, ErrorMsg err) {
		this();
		errorMsg = err;
		lexer = l;
	}

	public Absyn result;

}

/** Cup generated class to encapsulate user supplied action code. */
class CUP$parser$actions {

	private final parser parser;

	/** Constructor */
	CUP$parser$actions(parser parser) {
		this.parser = parser;
	}

	/** Method with the actual generated action code. */
	public final java_cup.runtime.Symbol CUP$parser$do_action(
			int CUP$parser$act_num,
			java_cup.runtime.lr_parser CUP$parser$parser,
			java.util.Stack CUP$parser$stack, int CUP$parser$top)
			throws java.lang.Exception {
		/* Symbol object for return from actions */
		java_cup.runtime.Symbol CUP$parser$result;

		/* select the action based on the action number */
		switch (CUP$parser$act_num) {
		/* . . . . . . . . . . . . . . . . . . . . */
		case 118: // dropview ::= DROP VIEW ID
		{
			DropView RESULT = null;
			int posleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).left;
			int posright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).right;
			Object pos = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;
			int vnleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).left;
			int vnright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).right;
			String vn = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;
			RESULT = new DropView(posleft, vn);
			CUP$parser$result = new java_cup.runtime.Symbol(35/* dropview */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 117: // createview ::= CREATE VIEW ID AS query
		{
			CreateView RESULT = null;
			int posleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 4)).left;
			int posright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 4)).right;
			Object pos = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 4)).value;
			int vnleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).left;
			int vnright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).right;
			String vn = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;
			int qleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).left;
			int qright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).right;
			Query q = (Query) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;
			RESULT = new CreateView(posleft, vn, q);
			CUP$parser$result = new java_cup.runtime.Symbol(34/* createview */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 4)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 116: // dropindex ::= DROP INDEX ID ON ID
		{
			DropIdx RESULT = null;
			int posleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 4)).left;
			int posright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 4)).right;
			Object pos = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 4)).value;
			int idxleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).left;
			int idxright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).right;
			String idx = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;
			int tblleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).left;
			int tblright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).right;
			String tbl = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;
			RESULT = new DropIdx(posleft, idx, tbl);
			CUP$parser$result = new java_cup.runtime.Symbol(33/* dropindex */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 4)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 115: // createindex ::= CREATE UNIQUE INDEX ID ON ID LPAREN
					// attribute RPAREN
		{
			CreateIdx RESULT = null;
			int posleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 8)).left;
			int posright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 8)).right;
			Object pos = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 8)).value;
			int idxleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 5)).left;
			int idxright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 5)).right;
			String idx = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 5)).value;
			int tblleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).left;
			int tblright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).right;
			String tbl = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).value;
			int cnleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int cnright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			Attribute cn = (Attribute) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			RESULT = new CreateIdx(posleft, idx, tbl, cn, true);
			CUP$parser$result = new java_cup.runtime.Symbol(32/* createindex */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 8)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 114: // createindex ::= CREATE INDEX ID ON ID LPAREN attribute
					// RPAREN
		{
			CreateIdx RESULT = null;
			int posleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 7)).left;
			int posright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 7)).right;
			Object pos = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 7)).value;
			int idxleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 5)).left;
			int idxright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 5)).right;
			String idx = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 5)).value;
			int tblleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).left;
			int tblright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).right;
			String tbl = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).value;
			int cnleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int cnright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			Attribute cn = (Attribute) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			RESULT = new CreateIdx(posleft, idx, tbl, cn, false);
			CUP$parser$result = new java_cup.runtime.Symbol(32/* createindex */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 7)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 113: // setlist ::= setcol COMMA setlist
		{
			SetList RESULT = null;
			int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).left;
			int sright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).right;
			SetCol s = (SetCol) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;
			int slleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).left;
			int slright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).right;
			SetList sl = (SetList) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;
			RESULT = new SetList(s, sl);
			CUP$parser$result = new java_cup.runtime.Symbol(31/* setlist */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 112: // setlist ::= setcol
		{
			SetList RESULT = null;
			int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).left;
			int sright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).right;
			SetCol s = (SetCol) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;
			RESULT = new SetList(s);
			CUP$parser$result = new java_cup.runtime.Symbol(31/* setlist */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 111: // setcol ::= attribute EQ value
		{
			SetCol RESULT = null;
			int cnleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).left;
			int cnright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).right;
			Attribute cn = (Attribute) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;
			int vleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).left;
			int vright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).right;
			Value v = (Value) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;
			RESULT = new SetCol(cnleft, cn, v);
			CUP$parser$result = new java_cup.runtime.Symbol(30/* setcol */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 110: // update ::= UPDATE ID SET setlist WHERE condition
		{
			UpdateClause RESULT = null;
			int posleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 5)).left;
			int posright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 5)).right;
			Object pos = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 5)).value;
			int tblleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 4)).left;
			int tblright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 4)).right;
			String tbl = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 4)).value;
			int slleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).left;
			int slright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).right;
			SetList sl = (SetList) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;
			int cleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).left;
			int cright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).right;
			Condition c = (Condition) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;
			RESULT = new UpdateClause(posleft, tbl, sl, c);
			CUP$parser$result = new java_cup.runtime.Symbol(29/* update */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 5)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 109: // update ::= UPDATE ID SET setlist
		{
			UpdateClause RESULT = null;
			int posleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).left;
			int posright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).right;
			Object pos = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).value;
			int tblleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).left;
			int tblright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).right;
			String tbl = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;
			int slleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).left;
			int slright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).right;
			SetList sl = (SetList) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;
			RESULT = new UpdateClause(posleft, tbl, sl);
			CUP$parser$result = new java_cup.runtime.Symbol(29/* update */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 3)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 108: // delete ::= DELETE FROM ID WHERE condition
		{
			DeleteClause RESULT = null;
			int posleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 4)).left;
			int posright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 4)).right;
			Object pos = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 4)).value;
			int tblleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).left;
			int tblright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).right;
			String tbl = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;
			int cleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).left;
			int cright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).right;
			Condition c = (Condition) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;
			RESULT = new DeleteClause(posleft, tbl, c);
			CUP$parser$result = new java_cup.runtime.Symbol(28/* delete */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 4)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 107: // delete ::= DELETE FROM ID
		{
			DeleteClause RESULT = null;
			int posleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).left;
			int posright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).right;
			Object pos = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;
			int tblleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).left;
			int tblright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).right;
			String tbl = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;
			RESULT = new DeleteClause(posleft, tbl);
			CUP$parser$result = new java_cup.runtime.Symbol(28/* delete */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 106: // insert ::= INSERTINTO ID LPAREN query RPAREN
		{
			InsertClause RESULT = null;
			int posleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 4)).left;
			int posright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 4)).right;
			Object pos = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 4)).value;
			int tblleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).left;
			int tblright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).right;
			String tbl = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).value;
			int qleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int qright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			Query q = (Query) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			RESULT = new InsertClause(posleft, tbl, q);
			CUP$parser$result = new java_cup.runtime.Symbol(27/* insert */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 4)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 105: // insert ::= INSERTINTO ID VALUES LPAREN valuelist RPAREN
		{
			InsertClause RESULT = null;
			int posleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 5)).left;
			int posright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 5)).right;
			Object pos = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 5)).value;
			int tblleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 4)).left;
			int tblright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 4)).right;
			String tbl = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 4)).value;
			int vlleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int vlright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			ValueList vl = (ValueList) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			RESULT = new InsertClause(posleft, tbl, vl);
			CUP$parser$result = new java_cup.runtime.Symbol(27/* insert */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 5)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 104: // datatype ::= TIME
		{
			DataType RESULT = null;
			RESULT = new DataType(DataType.TIME);
			CUP$parser$result = new java_cup.runtime.Symbol(26/* datatype */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 103: // datatype ::= DATE
		{
			DataType RESULT = null;
			RESULT = new DataType(DataType.DATE);
			CUP$parser$result = new java_cup.runtime.Symbol(26/* datatype */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 102: // datatype ::= BOOLEAN
		{
			DataType RESULT = null;
			RESULT = new DataType(DataType.BOOLEAN);
			CUP$parser$result = new java_cup.runtime.Symbol(26/* datatype */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 101: // datatype ::= VARCHAR LPAREN INTVAL RPAREN
		{
			DataType RESULT = null;
			int mleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int mright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			Integer m = (Integer) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			RESULT = new DataType(DataType.VARCHAR, (Integer) m);
			CUP$parser$result = new java_cup.runtime.Symbol(26/* datatype */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 3)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 100: // datatype ::= CHAR LPAREN INTVAL RPAREN
		{
			DataType RESULT = null;
			int mleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int mright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			Integer m = (Integer) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			RESULT = new DataType(DataType.CHAR, (Integer) m);
			CUP$parser$result = new java_cup.runtime.Symbol(26/* datatype */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 3)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 99: // datatype ::= FLOAT
		{
			DataType RESULT = null;
			RESULT = new DataType(DataType.FLOAT);
			CUP$parser$result = new java_cup.runtime.Symbol(26/* datatype */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 98: // datatype ::= INT
		{
			DataType RESULT = null;
			RESULT = new DataType(DataType.INT);
			CUP$parser$result = new java_cup.runtime.Symbol(26/* datatype */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 97: // coldef ::= attribute datatype REFERENCES ID LPAREN ID RPAREN
					// CHECK LPAREN condition RPAREN
		{
			ColDef RESULT = null;
			int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 10)).left;
			int aright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 10)).right;
			Attribute a = (Attribute) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 10)).value;
			int tyleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 9)).left;
			int tyright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 9)).right;
			DataType ty = (DataType) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 9)).value;
			int tnleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 7)).left;
			int tnright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 7)).right;
			String tn = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 7)).value;
			int cnleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 5)).left;
			int cnright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 5)).right;
			String cn = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 5)).value;
			int cleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int cright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			Condition c = (Condition) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			ColDef cd = new ColDef(aleft, a, ty, c);
			cd.setForeignKey(new Attribute(tnleft, tn, cn));
			RESULT = cd;
			CUP$parser$result = new java_cup.runtime.Symbol(25/* coldef */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 10)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 96: // coldef ::= attribute datatype REFERENCES ID LPAREN ID RPAREN
		{
			ColDef RESULT = null;
			int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 6)).left;
			int aright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 6)).right;
			Attribute a = (Attribute) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 6)).value;
			int tyleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 5)).left;
			int tyright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 5)).right;
			DataType ty = (DataType) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 5)).value;
			int tnleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).left;
			int tnright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).right;
			String tn = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).value;
			int cnleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int cnright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			String cn = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			ColDef cd = new ColDef(aleft, a, ty);
			cd.setForeignKey(new Attribute(tnleft, tn, cn));
			RESULT = cd;
			CUP$parser$result = new java_cup.runtime.Symbol(25/* coldef */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 6)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 95: // coldef ::= attribute datatype PRIMARYKEY CHECK LPAREN
					// condition RPAREN
		{
			ColDef RESULT = null;
			int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 6)).left;
			int aright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 6)).right;
			Attribute a = (Attribute) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 6)).value;
			int tyleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 5)).left;
			int tyright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 5)).right;
			DataType ty = (DataType) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 5)).value;
			int cleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int cright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			Condition c = (Condition) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			ColDef cd = new ColDef(aleft, a, ty, c);
			cd.setPrimaryKey();
			RESULT = cd;
			CUP$parser$result = new java_cup.runtime.Symbol(25/* coldef */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 6)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 94: // coldef ::= attribute datatype PRIMARYKEY
		{
			ColDef RESULT = null;
			int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).left;
			int aright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).right;
			Attribute a = (Attribute) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;
			int tyleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int tyright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			DataType ty = (DataType) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			ColDef cd = new ColDef(aleft, a, ty);
			cd.setPrimaryKey();
			RESULT = cd;
			CUP$parser$result = new java_cup.runtime.Symbol(25/* coldef */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 93: // coldef ::= attribute datatype DEFAULT constant
		{
			ColDef RESULT = null;
			int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).left;
			int aright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).right;
			Attribute a = (Attribute) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).value;
			int tyleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).left;
			int tyright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).right;
			DataType ty = (DataType) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;
			int cleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).left;
			int cright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).right;
			Const c = (Const) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;
			RESULT = new ColDef(aleft, a, ty, c);
			CUP$parser$result = new java_cup.runtime.Symbol(25/* coldef */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 3)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 92: // coldef ::= attribute datatype CHECK LPAREN condition RPAREN
		{
			ColDef RESULT = null;
			int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 5)).left;
			int aright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 5)).right;
			Attribute a = (Attribute) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 5)).value;
			int tyleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 4)).left;
			int tyright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 4)).right;
			DataType ty = (DataType) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 4)).value;
			int cleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int cright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			Condition c = (Condition) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			RESULT = new ColDef(aleft, a, ty, c);
			CUP$parser$result = new java_cup.runtime.Symbol(25/* coldef */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 5)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 91: // coldef ::= attribute datatype
		{
			ColDef RESULT = null;
			int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int aright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			Attribute a = (Attribute) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			int tyleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).left;
			int tyright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).right;
			DataType ty = (DataType) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;
			RESULT = new ColDef(aleft, a, ty);
			CUP$parser$result = new java_cup.runtime.Symbol(25/* coldef */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 1)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 90: // createdef ::= CHECK LPAREN condition RPAREN
		{
			CreateDef RESULT = null;
			int cleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int cright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			Condition c = (Condition) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			RESULT = new CheckDef(c);
			CUP$parser$result = new java_cup.runtime.Symbol(24/* createdef */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 3)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 89: // createdef ::= FOREIGNKEY LPAREN attribute RPAREN REFERENCES
					// ID LPAREN ID RPAREN
		{
			CreateDef RESULT = null;
			int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 6)).left;
			int aright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 6)).right;
			Attribute a = (Attribute) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 6)).value;
			int tnleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).left;
			int tnright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).right;
			String tn = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).value;
			int cnleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int cnright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			String cn = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			RESULT = new ForgnKeyDef(a, new Attribute(tnleft, tn, cn));
			CUP$parser$result = new java_cup.runtime.Symbol(24/* createdef */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 8)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 88: // createdef ::= PRIMARYKEY LPAREN attrlist RPAREN
		{
			CreateDef RESULT = null;
			int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int aright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			AttributeList a = (AttributeList) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			RESULT = new PriKeyDef(a);
			CUP$parser$result = new java_cup.runtime.Symbol(24/* createdef */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 3)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 87: // createdef ::= coldef
		{
			CreateDef RESULT = null;
			int cdleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).left;
			int cdright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).right;
			ColDef cd = (ColDef) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;
			RESULT = cd;
			CUP$parser$result = new java_cup.runtime.Symbol(24/* createdef */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 86: // deflist ::= createdef COMMA deflist
		{
			DefList RESULT = null;
			int dleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).left;
			int dright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).right;
			CreateDef d = (CreateDef) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;
			int dlleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).left;
			int dlright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).right;
			DefList dl = (DefList) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;
			RESULT = new DefList(d, dl);
			CUP$parser$result = new java_cup.runtime.Symbol(23/* deflist */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 85: // deflist ::= createdef
		{
			DefList RESULT = null;
			int dleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).left;
			int dright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).right;
			CreateDef d = (CreateDef) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;
			RESULT = new DefList(d);
			CUP$parser$result = new java_cup.runtime.Symbol(23/* deflist */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 84: // droptbl ::= DROP TABLE ID
		{
			DropTbl RESULT = null;
			int posleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).left;
			int posright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).right;
			Object pos = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;
			int tblleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).left;
			int tblright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).right;
			String tbl = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;
			RESULT = new DropTbl(posleft, tbl);
			CUP$parser$result = new java_cup.runtime.Symbol(22/* droptbl */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 83: // createtbl ::= CREATE TABLE ID LPAREN deflist RPAREN
		{
			CreateTbl RESULT = null;
			int posleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 5)).left;
			int posright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 5)).right;
			Object pos = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 5)).value;
			int tblleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).left;
			int tblright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).right;
			String tbl = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).value;
			int dlleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int dlright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			DefList dl = (DefList) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			RESULT = new CreateTbl(posleft, tbl, dl);
			CUP$parser$result = new java_cup.runtime.Symbol(21/* createtbl */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 5)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 82: // dropdb ::= DROP DATABASE ID
		{
			DropDB RESULT = null;
			int posleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).left;
			int posright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).right;
			Object pos = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;
			int dbleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).left;
			int dbright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).right;
			String db = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;
			RESULT = new DropDB(posleft, db);
			CUP$parser$result = new java_cup.runtime.Symbol(20/* dropdb */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 81: // createdb ::= CREATE DATABASE ID
		{
			CreateDB RESULT = null;
			int posleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).left;
			int posright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).right;
			Object pos = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;
			int dbleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).left;
			int dbright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).right;
			String db = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;
			RESULT = new CreateDB(posleft, db);
			CUP$parser$result = new java_cup.runtime.Symbol(19/* createdb */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 80: // condition ::= boolexpr
		{
			Condition RESULT = null;
			int cleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).left;
			int cright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).right;
			BoolExp c = (BoolExp) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;
			RESULT = new Condition(c);
			CUP$parser$result = new java_cup.runtime.Symbol(15/* condition */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 79: // tablelist ::= table COMMA tablelist
		{
			TableList RESULT = null;
			int tleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).left;
			int tright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).right;
			Table t = (Table) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;
			int tlleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).left;
			int tlright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).right;
			TableList tl = (TableList) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;
			RESULT = new TableList(t, tl);
			CUP$parser$result = new java_cup.runtime.Symbol(13/* tablelist */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 78: // tablelist ::= table
		{
			TableList RESULT = null;
			int tleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).left;
			int tright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).right;
			Table t = (Table) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;
			RESULT = new TableList(t);
			CUP$parser$result = new java_cup.runtime.Symbol(13/* tablelist */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 77: // table ::= LPAREN query RPAREN AS ID
		{
			Table RESULT = null;
			int qleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).left;
			int qright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).right;
			Query q = (Query) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).value;
			int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).left;
			int aright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).right;
			String a = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;
			RESULT = new Table(qleft, q, a);
			CUP$parser$result = new java_cup.runtime.Symbol(14/* table */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 4)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 76: // table ::= ID AS ID
		{
			Table RESULT = null;
			int tnleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).left;
			int tnright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).right;
			String tn = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;
			int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).left;
			int aright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).right;
			String a = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;
			RESULT = new Table(tnleft, tn, a);
			CUP$parser$result = new java_cup.runtime.Symbol(14/* table */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 75: // table ::= ID
		{
			Table RESULT = null;
			int tnleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).left;
			int tnright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).right;
			String tn = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;
			RESULT = new Table(tnleft, tn);
			CUP$parser$result = new java_cup.runtime.Symbol(14/* table */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 74: // selectlist ::= selectexpr COMMA selectlist
		{
			SelList RESULT = null;
			int seleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).left;
			int seright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).right;
			SelExp se = (SelExp) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;
			int slleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).left;
			int slright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).right;
			SelList sl = (SelList) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;
			RESULT = new SelList(se, sl);
			CUP$parser$result = new java_cup.runtime.Symbol(11/* selectlist */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 73: // selectlist ::= selectexpr
		{
			SelList RESULT = null;
			int seleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).left;
			int seright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).right;
			SelExp se = (SelExp) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;
			RESULT = new SelList(se);
			CUP$parser$result = new java_cup.runtime.Symbol(11/* selectlist */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 72: // selectexpr ::= func LPAREN attribute RPAREN AS ID
		{
			SelExp RESULT = null;
			int fleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 5)).left;
			int fright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 5)).right;
			Integer f = (Integer) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 5)).value;
			int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).left;
			int aright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).right;
			Attribute a = (Attribute) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).value;
			int nleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).left;
			int nright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).right;
			String n = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;
			RESULT = new SelExp(f, a, n);
			CUP$parser$result = new java_cup.runtime.Symbol(12/* selectexpr */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 5)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 71: // selectexpr ::= func LPAREN attribute RPAREN
		{
			SelExp RESULT = null;
			int fleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).left;
			int fright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).right;
			Integer f = (Integer) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).value;
			int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int aright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			Attribute a = (Attribute) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			RESULT = new SelExp(f, a);
			CUP$parser$result = new java_cup.runtime.Symbol(12/* selectexpr */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 3)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 70: // selectexpr ::= value AS ID
		{
			SelExp RESULT = null;
			int vleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).left;
			int vright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).right;
			Value v = (Value) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;
			int nleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).left;
			int nright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).right;
			String n = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;
			RESULT = new SelExp(v, n);
			CUP$parser$result = new java_cup.runtime.Symbol(12/* selectexpr */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 69: // selectexpr ::= value
		{
			SelExp RESULT = null;
			int vleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).left;
			int vright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).right;
			Value v = (Value) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;
			RESULT = new SelExp(v);
			CUP$parser$result = new java_cup.runtime.Symbol(12/* selectexpr */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 68: // selectexpr ::= func LPAREN TIMES RPAREN
		{
			SelExp RESULT = null;
			int fleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).left;
			int fright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).right;
			Integer f = (Integer) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).value;
			RESULT = new SelExp(f);
			CUP$parser$result = new java_cup.runtime.Symbol(12/* selectexpr */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 3)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 67: // selectexpr ::= TIMES
		{
			SelExp RESULT = null;
			RESULT = new SelExp(0);
			CUP$parser$result = new java_cup.runtime.Symbol(12/* selectexpr */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 66: // boolexpr ::= value cop ALL LPAREN query RPAREN
		{
			BoolExp RESULT = null;
			int vleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 5)).left;
			int vright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 5)).right;
			Value v = (Value) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 5)).value;
			int opleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 4)).left;
			int opright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 4)).right;
			Integer op = (Integer) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 4)).value;
			int qleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int qright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			Query q = (Query) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			RESULT = new ValTerm(vleft, v, op, ValTerm.ALL, q);
			CUP$parser$result = new java_cup.runtime.Symbol(16/* boolexpr */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 5)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 65: // boolexpr ::= value cop ANY LPAREN query RPAREN
		{
			BoolExp RESULT = null;
			int vleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 5)).left;
			int vright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 5)).right;
			Value v = (Value) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 5)).value;
			int opleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 4)).left;
			int opright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 4)).right;
			Integer op = (Integer) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 4)).value;
			int qleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int qright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			Query q = (Query) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			RESULT = new ValTerm(vleft, v, op, ValTerm.ANY, q);
			CUP$parser$result = new java_cup.runtime.Symbol(16/* boolexpr */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 5)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 64: // boolexpr ::= value IN LPAREN query RPAREN
		{
			BoolExp RESULT = null;
			int vleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 4)).left;
			int vright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 4)).right;
			Value v = (Value) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 4)).value;
			int qleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int qright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			Query q = (Query) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			RESULT = new ValTerm(vleft, v, ValTerm.IN, q);
			CUP$parser$result = new java_cup.runtime.Symbol(16/* boolexpr */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 4)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 63: // boolexpr ::= EXISTS LPAREN query RPAREN
		{
			BoolExp RESULT = null;
			int posleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).left;
			int posright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).right;
			Object pos = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).value;
			int qleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int qright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			Query q = (Query) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			RESULT = new ValTerm(posleft, ValTerm.EXISTS, q);
			CUP$parser$result = new java_cup.runtime.Symbol(16/* boolexpr */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 3)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 62: // boolexpr ::= value cop value
		{
			BoolExp RESULT = null;
			int lvleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).left;
			int lvright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).right;
			Value lv = (Value) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;
			int opleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int opright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			Integer op = (Integer) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			int rvleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).left;
			int rvright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).right;
			Value rv = (Value) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;
			RESULT = new ValTerm(lvleft, lv, op, rv);
			CUP$parser$result = new java_cup.runtime.Symbol(16/* boolexpr */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 61: // boolexpr ::= boolexpr OR boolexpr
		{
			BoolExp RESULT = null;
			int lbleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).left;
			int lbright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).right;
			BoolExp lb = (BoolExp) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;
			int rbleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).left;
			int rbright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).right;
			BoolExp rb = (BoolExp) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;
			RESULT = new BoolTerm(lb, BoolTerm.OR, rb);
			CUP$parser$result = new java_cup.runtime.Symbol(16/* boolexpr */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 60: // boolexpr ::= boolexpr AND boolexpr
		{
			BoolExp RESULT = null;
			int lbleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).left;
			int lbright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).right;
			BoolExp lb = (BoolExp) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;
			int rbleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).left;
			int rbright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).right;
			BoolExp rb = (BoolExp) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;
			RESULT = new BoolTerm(lb, BoolTerm.AND, rb);
			CUP$parser$result = new java_cup.runtime.Symbol(16/* boolexpr */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 59: // boolexpr ::= NOT boolexpr
		{
			BoolExp RESULT = null;
			int bleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).left;
			int bright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).right;
			BoolExp b = (BoolExp) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;
			RESULT = new BoolTerm(BoolTerm.NOT, b);
			CUP$parser$result = new java_cup.runtime.Symbol(16/* boolexpr */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 1)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 58: // boolexpr ::= LPAREN boolexpr RPAREN
		{
			BoolExp RESULT = null;
			int bleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int bright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			BoolExp b = (BoolExp) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			RESULT = b;
			CUP$parser$result = new java_cup.runtime.Symbol(16/* boolexpr */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 57: // cop ::= LE
		{
			Integer RESULT = null;
			RESULT = ValTerm.LE;
			CUP$parser$result = new java_cup.runtime.Symbol(17/* cop */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 56: // cop ::= GE
		{
			Integer RESULT = null;
			RESULT = ValTerm.GE;
			CUP$parser$result = new java_cup.runtime.Symbol(17/* cop */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 55: // cop ::= LT
		{
			Integer RESULT = null;
			RESULT = ValTerm.LT;
			CUP$parser$result = new java_cup.runtime.Symbol(17/* cop */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 54: // cop ::= GT
		{
			Integer RESULT = null;
			RESULT = ValTerm.GT;
			CUP$parser$result = new java_cup.runtime.Symbol(17/* cop */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 53: // cop ::= NEQ
		{
			Integer RESULT = null;
			RESULT = ValTerm.NEQ;
			CUP$parser$result = new java_cup.runtime.Symbol(17/* cop */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 52: // cop ::= EQ
		{
			Integer RESULT = null;
			RESULT = ValTerm.EQ;
			CUP$parser$result = new java_cup.runtime.Symbol(17/* cop */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 51: // constant ::= TIMEVAL
		{
			Const RESULT = null;
			int vleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).left;
			int vright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).right;
			String v = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;
			RESULT = new Const(vleft, Const.TIME, v);
			CUP$parser$result = new java_cup.runtime.Symbol(8/* constant */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 50: // constant ::= DATEVAL
		{
			Const RESULT = null;
			int vleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).left;
			int vright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).right;
			String v = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;
			RESULT = new Const(vleft, Const.DATE, v);
			CUP$parser$result = new java_cup.runtime.Symbol(8/* constant */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 49: // constant ::= STRING
		{
			Const RESULT = null;
			int vleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).left;
			int vright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).right;
			String v = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;
			RESULT = new Const(vleft, Const.STRING, v);
			CUP$parser$result = new java_cup.runtime.Symbol(8/* constant */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 48: // constant ::= FLOATVAL
		{
			Const RESULT = null;
			int vleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).left;
			int vright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).right;
			Double v = (Double) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;
			RESULT = new Const(vleft, Const.FLOAT, v);
			CUP$parser$result = new java_cup.runtime.Symbol(8/* constant */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 47: // constant ::= INTVAL
		{
			Const RESULT = null;
			int vleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).left;
			int vright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).right;
			Integer v = (Integer) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;
			RESULT = new Const(vleft, Const.INT, v);
			CUP$parser$result = new java_cup.runtime.Symbol(8/* constant */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 46: // attrlist ::= attribute COMMA attrlist
		{
			AttributeList RESULT = null;
			int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).left;
			int aright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).right;
			Attribute a = (Attribute) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;
			int alleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).left;
			int alright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).right;
			AttributeList al = (AttributeList) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;
			RESULT = new AttributeList(a, al);
			CUP$parser$result = new java_cup.runtime.Symbol(7/* attrlist */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 45: // attrlist ::= attribute DESC
		{
			AttributeList RESULT = null;
			int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int aright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			Attribute a = (Attribute) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			a.order = Attribute.DESC;
			RESULT = new AttributeList(a);
			CUP$parser$result = new java_cup.runtime.Symbol(7/* attrlist */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 1)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 44: // attrlist ::= attribute ASC
		{
			AttributeList RESULT = null;
			int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int aright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			Attribute a = (Attribute) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			RESULT = new AttributeList(a);
			CUP$parser$result = new java_cup.runtime.Symbol(7/* attrlist */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 1)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 43: // attrlist ::= attribute
		{
			AttributeList RESULT = null;
			int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).left;
			int aright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).right;
			Attribute a = (Attribute) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;
			RESULT = new AttributeList(a);
			CUP$parser$result = new java_cup.runtime.Symbol(7/* attrlist */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 42: // attribute ::= ID DOT ID
		{
			Attribute RESULT = null;
			int tnleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).left;
			int tnright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).right;
			String tn = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;
			int cnleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).left;
			int cnright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).right;
			String cn = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;
			RESULT = new Attribute(tnleft, tn, cn);
			CUP$parser$result = new java_cup.runtime.Symbol(6/* attribute */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 41: // attribute ::= ID
		{
			Attribute RESULT = null;
			int cnleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).left;
			int cnright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).right;
			String cn = (String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;
			RESULT = new Attribute(cnleft, cn);
			CUP$parser$result = new java_cup.runtime.Symbol(6/* attribute */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 40: // aop ::= DIVIDE
		{
			Integer RESULT = null;
			RESULT = AopValue.DIVIDE;
			CUP$parser$result = new java_cup.runtime.Symbol(10/* aop */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 39: // aop ::= TIMES
		{
			Integer RESULT = null;
			RESULT = AopValue.TIMES;
			CUP$parser$result = new java_cup.runtime.Symbol(10/* aop */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 38: // aop ::= MINUS
		{
			Integer RESULT = null;
			RESULT = AopValue.MINUS;
			CUP$parser$result = new java_cup.runtime.Symbol(10/* aop */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 37: // aop ::= PLUS
		{
			Integer RESULT = null;
			RESULT = AopValue.PLUS;
			CUP$parser$result = new java_cup.runtime.Symbol(10/* aop */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 36: // func ::= SUM
		{
			Integer RESULT = null;
			RESULT = Attribute.SUM;
			CUP$parser$result = new java_cup.runtime.Symbol(9/* func */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 35: // func ::= MAX
		{
			Integer RESULT = null;
			RESULT = Attribute.MAX;
			CUP$parser$result = new java_cup.runtime.Symbol(9/* func */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 34: // func ::= MIN
		{
			Integer RESULT = null;
			RESULT = Attribute.MIN;
			CUP$parser$result = new java_cup.runtime.Symbol(9/* func */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 33: // func ::= COUNT
		{
			Integer RESULT = null;
			RESULT = Attribute.COUNT;
			CUP$parser$result = new java_cup.runtime.Symbol(9/* func */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 32: // func ::= AVG
		{
			Integer RESULT = null;
			RESULT = Attribute.AVG;
			CUP$parser$result = new java_cup.runtime.Symbol(9/* func */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 31: // valuelist ::= value COMMA valuelist
		{
			ValueList RESULT = null;
			int vleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).left;
			int vright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).right;
			Value v = (Value) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;
			int vlleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).left;
			int vlright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).right;
			ValueList vl = (ValueList) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;
			RESULT = new ValueList(v, vl);
			CUP$parser$result = new java_cup.runtime.Symbol(5/* valuelist */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 30: // valuelist ::= value
		{
			ValueList RESULT = null;
			int vleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).left;
			int vright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).right;
			Value v = (Value) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;
			RESULT = new ValueList(v);
			CUP$parser$result = new java_cup.runtime.Symbol(5/* valuelist */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 29: // value ::= query
		{
			Value RESULT = null;
			int qleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).left;
			int qright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).right;
			Query q = (Query) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;
			RESULT = new AtomValue(q);
			CUP$parser$result = new java_cup.runtime.Symbol(4/* value */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 28: // value ::= value aop value
		{
			Value RESULT = null;
			int lvleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).left;
			int lvright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).right;
			Value lv = (Value) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;
			int opleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int opright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			Integer op = (Integer) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			int rvleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).left;
			int rvright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).right;
			Value rv = (Value) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;
			RESULT = new AopValue(lvleft, lv, op, rv);
			CUP$parser$result = new java_cup.runtime.Symbol(4/* value */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 27: // value ::= constant
		{
			Value RESULT = null;
			int cleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).left;
			int cright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).right;
			Const c = (Const) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;
			RESULT = c;
			CUP$parser$result = new java_cup.runtime.Symbol(4/* value */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 26: // value ::= DISTINCT attribute
		{
			Value RESULT = null;
			int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).left;
			int aright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).right;
			Attribute a = (Attribute) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;
			a.distinct = true;
			RESULT = a;
			CUP$parser$result = new java_cup.runtime.Symbol(4/* value */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 1)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 25: // value ::= attribute
		{
			Value RESULT = null;
			int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).left;
			int aright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).right;
			Attribute a = (Attribute) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;
			RESULT = a;
			CUP$parser$result = new java_cup.runtime.Symbol(4/* value */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 24: // value ::= LPAREN value RPAREN
		{
			Value RESULT = null;
			int vleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int vright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			Value v = (Value) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			RESULT = v;
			CUP$parser$result = new java_cup.runtime.Symbol(4/* value */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 23: // sfw ::= SELECT selectlist FROM tablelist WHERE condition
					// GROUPBY attrlist HAVING condition ORDERBY attrlist
		{
			SFW RESULT = null;
			int posleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 11)).left;
			int posright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 11)).right;
			Object pos = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 11)).value;
			int slleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 10)).left;
			int slright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 10)).right;
			SelList sl = (SelList) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 10)).value;
			int tlleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 8)).left;
			int tlright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 8)).right;
			TableList tl = (TableList) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 8)).value;
			int cleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 6)).left;
			int cright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 6)).right;
			Condition c = (Condition) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 6)).value;
			int gleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 4)).left;
			int gright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 4)).right;
			AttributeList g = (AttributeList) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 4)).value;
			int hcleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).left;
			int hcright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).right;
			Condition hc = (Condition) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;
			int oleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).left;
			int oright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).right;
			AttributeList o = (AttributeList) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;
			RESULT = new SFW(posleft, sl, tl, c, g, new HvCondition(hc), o);
			CUP$parser$result = new java_cup.runtime.Symbol(3/* sfw */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 11)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 22: // sfw ::= SELECT selectlist FROM tablelist WHERE condition
					// GROUPBY attrlist ORDERBY attrlist
		{
			SFW RESULT = null;
			int posleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 9)).left;
			int posright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 9)).right;
			Object pos = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 9)).value;
			int slleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 8)).left;
			int slright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 8)).right;
			SelList sl = (SelList) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 8)).value;
			int tlleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 6)).left;
			int tlright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 6)).right;
			TableList tl = (TableList) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 6)).value;
			int cleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 4)).left;
			int cright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 4)).right;
			Condition c = (Condition) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 4)).value;
			int gleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).left;
			int gright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).right;
			AttributeList g = (AttributeList) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;
			int oleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).left;
			int oright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).right;
			AttributeList o = (AttributeList) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;
			RESULT = new SFW(posleft, sl, tl, c, g, null, o);
			CUP$parser$result = new java_cup.runtime.Symbol(3/* sfw */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 9)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 21: // sfw ::= SELECT selectlist FROM tablelist WHERE condition
					// ORDERBY attrlist
		{
			SFW RESULT = null;
			int posleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 7)).left;
			int posright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 7)).right;
			Object pos = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 7)).value;
			int slleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 6)).left;
			int slright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 6)).right;
			SelList sl = (SelList) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 6)).value;
			int tlleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 4)).left;
			int tlright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 4)).right;
			TableList tl = (TableList) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 4)).value;
			int cleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).left;
			int cright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).right;
			Condition c = (Condition) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;
			int oleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).left;
			int oright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).right;
			AttributeList o = (AttributeList) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;
			RESULT = new SFW(posleft, sl, tl, c, null, null, o);
			CUP$parser$result = new java_cup.runtime.Symbol(3/* sfw */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 7)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 20: // sfw ::= SELECT selectlist FROM tablelist WHERE condition
					// GROUPBY attrlist HAVING condition
		{
			SFW RESULT = null;
			int posleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 9)).left;
			int posright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 9)).right;
			Object pos = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 9)).value;
			int slleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 8)).left;
			int slright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 8)).right;
			SelList sl = (SelList) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 8)).value;
			int tlleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 6)).left;
			int tlright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 6)).right;
			TableList tl = (TableList) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 6)).value;
			int cleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 4)).left;
			int cright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 4)).right;
			Condition c = (Condition) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 4)).value;
			int gleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).left;
			int gright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).right;
			AttributeList g = (AttributeList) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;
			int hcleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).left;
			int hcright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).right;
			Condition hc = (Condition) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;
			RESULT = new SFW(posleft, sl, tl, c, g, new HvCondition(hc), null);
			CUP$parser$result = new java_cup.runtime.Symbol(3/* sfw */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 9)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 19: // sfw ::= SELECT selectlist FROM tablelist WHERE condition
					// GROUPBY attrlist
		{
			SFW RESULT = null;
			int posleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 7)).left;
			int posright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 7)).right;
			Object pos = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 7)).value;
			int slleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 6)).left;
			int slright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 6)).right;
			SelList sl = (SelList) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 6)).value;
			int tlleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 4)).left;
			int tlright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 4)).right;
			TableList tl = (TableList) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 4)).value;
			int cleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).left;
			int cright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).right;
			Condition c = (Condition) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;
			int gleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).left;
			int gright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).right;
			AttributeList g = (AttributeList) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;
			RESULT = new SFW(posleft, sl, tl, c, g, null, null);
			CUP$parser$result = new java_cup.runtime.Symbol(3/* sfw */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 7)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 18: // sfw ::= SELECT selectlist FROM tablelist ORDERBY attrlist
		{
			SFW RESULT = null;
			int posleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 5)).left;
			int posright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 5)).right;
			Object pos = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 5)).value;
			int slleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 4)).left;
			int slright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 4)).right;
			SelList sl = (SelList) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 4)).value;
			int tlleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).left;
			int tlright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).right;
			TableList tl = (TableList) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;
			int oleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).left;
			int oright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).right;
			AttributeList o = (AttributeList) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;
			RESULT = new SFW(posleft, sl, tl, null, null, null, o);
			CUP$parser$result = new java_cup.runtime.Symbol(3/* sfw */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 5)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 17: // sfw ::= SELECT selectlist FROM tablelist GROUPBY attrlist
					// HAVING condition
		{
			SFW RESULT = null;
			int posleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 7)).left;
			int posright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 7)).right;
			Object pos = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 7)).value;
			int slleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 6)).left;
			int slright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 6)).right;
			SelList sl = (SelList) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 6)).value;
			int tlleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 4)).left;
			int tlright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 4)).right;
			TableList tl = (TableList) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 4)).value;
			int gleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).left;
			int gright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).right;
			AttributeList g = (AttributeList) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;
			int hcleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).left;
			int hcright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).right;
			Condition hc = (Condition) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;
			RESULT = new SFW(posleft, sl, tl, null, g, new HvCondition(hc),
					null);
			CUP$parser$result = new java_cup.runtime.Symbol(3/* sfw */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 7)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 16: // sfw ::= SELECT selectlist FROM tablelist GROUPBY attrlist
		{
			SFW RESULT = null;
			int posleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 5)).left;
			int posright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 5)).right;
			Object pos = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 5)).value;
			int slleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 4)).left;
			int slright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 4)).right;
			SelList sl = (SelList) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 4)).value;
			int tlleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).left;
			int tlright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).right;
			TableList tl = (TableList) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;
			int gleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).left;
			int gright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).right;
			AttributeList g = (AttributeList) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;
			RESULT = new SFW(posleft, sl, tl, null, g, null, null);
			CUP$parser$result = new java_cup.runtime.Symbol(3/* sfw */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 5)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 15: // sfw ::= SELECT selectlist FROM tablelist WHERE condition
		{
			SFW RESULT = null;
			int posleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 5)).left;
			int posright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 5)).right;
			Object pos = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 5)).value;
			int slleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 4)).left;
			int slright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 4)).right;
			SelList sl = (SelList) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 4)).value;
			int tlleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).left;
			int tlright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).right;
			TableList tl = (TableList) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;
			int cleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).left;
			int cright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).right;
			Condition c = (Condition) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;
			RESULT = new SFW(posleft, sl, tl, c, null, null, null);
			CUP$parser$result = new java_cup.runtime.Symbol(3/* sfw */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 5)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 14: // sfw ::= SELECT selectlist FROM tablelist
		{
			SFW RESULT = null;
			int posleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).left;
			int posright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).right;
			Object pos = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).value;
			int slleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).left;
			int slright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).right;
			SelList sl = (SelList) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;
			int tlleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).left;
			int tlright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).right;
			TableList tl = (TableList) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;
			RESULT = new SFW(posleft, sl, tl, null, null, null, null);
			CUP$parser$result = new java_cup.runtime.Symbol(3/* sfw */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 3)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 13: // query ::= sfw
		{
			Query RESULT = null;
			int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).left;
			int sright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).right;
			SFW s = (SFW) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;
			RESULT = new Query(sleft, s);
			CUP$parser$result = new java_cup.runtime.Symbol(2/* query */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 12: // plan ::= update
		{
			Query RESULT = null;
			int cleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).left;
			int cright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).right;
			UpdateClause c = (UpdateClause) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;
			parser.result = c;
			CUP$parser$result = new java_cup.runtime.Symbol(1/* plan */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 11: // plan ::= delete
		{
			Query RESULT = null;
			int cleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).left;
			int cright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).right;
			DeleteClause c = (DeleteClause) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;
			parser.result = c;
			CUP$parser$result = new java_cup.runtime.Symbol(1/* plan */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 10: // plan ::= insert
		{
			Query RESULT = null;
			int cleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).left;
			int cright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).right;
			InsertClause c = (InsertClause) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;
			parser.result = c;
			CUP$parser$result = new java_cup.runtime.Symbol(1/* plan */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 9: // plan ::= dropindex
		{
			Query RESULT = null;
			int cleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).left;
			int cright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).right;
			DropIdx c = (DropIdx) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;
			parser.result = c;
			CUP$parser$result = new java_cup.runtime.Symbol(1/* plan */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 8: // plan ::= createindex
		{
			Query RESULT = null;
			int cleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).left;
			int cright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).right;
			CreateIdx c = (CreateIdx) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;
			parser.result = c;
			CUP$parser$result = new java_cup.runtime.Symbol(1/* plan */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 7: // plan ::= dropview
		{
			Query RESULT = null;
			int cleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).left;
			int cright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).right;
			DropView c = (DropView) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;
			parser.result = c;
			CUP$parser$result = new java_cup.runtime.Symbol(1/* plan */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 6: // plan ::= createview
		{
			Query RESULT = null;
			int cleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).left;
			int cright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).right;
			CreateView c = (CreateView) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;
			parser.result = c;
			CUP$parser$result = new java_cup.runtime.Symbol(1/* plan */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 5: // plan ::= droptbl
		{
			Query RESULT = null;
			int cleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).left;
			int cright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).right;
			DropTbl c = (DropTbl) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;
			parser.result = c;
			CUP$parser$result = new java_cup.runtime.Symbol(1/* plan */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 4: // plan ::= createtbl
		{
			Query RESULT = null;
			int cleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).left;
			int cright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).right;
			CreateTbl c = (CreateTbl) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;
			parser.result = c;
			CUP$parser$result = new java_cup.runtime.Symbol(1/* plan */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 3: // plan ::= dropdb
		{
			Query RESULT = null;
			int cleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).left;
			int cright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).right;
			DropDB c = (DropDB) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;
			parser.result = c;
			CUP$parser$result = new java_cup.runtime.Symbol(1/* plan */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 2: // plan ::= createdb
		{
			Query RESULT = null;
			int cleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).left;
			int cright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).right;
			CreateDB c = (CreateDB) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;
			parser.result = c;
			CUP$parser$result = new java_cup.runtime.Symbol(1/* plan */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 1: // plan ::= query
		{
			Query RESULT = null;
			int qleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).left;
			int qright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).right;
			Query q = (Query) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;
			parser.result = q;
			CUP$parser$result = new java_cup.runtime.Symbol(1/* plan */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 0: // $START ::= plan EOF
		{
			Object RESULT = null;
			int start_valleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int start_valright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			Query start_val = (Query) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			RESULT = start_val;
			CUP$parser$result = new java_cup.runtime.Symbol(0/* $START */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 1)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			/* ACCEPT */
			CUP$parser$parser.done_parsing();
			return CUP$parser$result;

			/* . . . . . . */
		default:
			throw new Exception(
					"Invalid action number found in internal parse table");

		}
	}
}
