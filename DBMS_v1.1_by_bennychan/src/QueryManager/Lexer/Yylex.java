/* The following code was generated by JFlex 1.4.3 on 11-8-23 上午10:41 */

package QueryManager.Lexer;

import ErrorMsg.ErrorMsg;

/**
 * This class is a scanner generated by <a href="http://www.jflex.de/">JFlex</a>
 * 1.4.3 on 11-8-23 上午10:41 from the specification file
 * <tt>/home/micro2fly/workspace/lex_v3.0.flex</tt>
 */
public class Yylex implements Lexer {

	/** This character denotes the end of file */
	public static final int YYEOF = -1;

	/** initial size of the lookahead buffer */
	private static final int ZZ_BUFFERSIZE = 16384;

	/** lexical states */
	public static final int STRINGSTATE = 2;
	public static final int YYINITIAL = 0;

	/**
	 * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
	 * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l at the
	 * beginning of a line l is of the form l = 2*k, k a non negative integer
	 */
	private static final int ZZ_LEXSTATE[] = { 0, 0, 1, 1 };

	/**
	 * Translates characters to character classes
	 */
	private static final String ZZ_CMAP_PACKED = "\11\0\2\35\1\0\2\35\22\0\1\7\5\0\1\55\1\40\1\43"
			+ "\1\44\1\50\1\52\1\54\1\53\1\42\1\51\12\37\2\0\1\47"
			+ "\1\46\1\45\2\0\1\5\1\14\1\1\1\12\1\4\1\30\1\32"
			+ "\1\34\1\10\1\36\1\27\1\15\1\25\1\11\1\20\1\21\1\31"
			+ "\1\2\1\33\1\6\1\22\1\16\1\17\1\13\1\26\1\36\4\0"
			+ "\1\41\1\0\1\5\1\14\1\1\1\12\1\4\1\30\1\32\1\34"
			+ "\1\10\1\36\1\27\1\15\1\23\1\24\1\20\1\21\1\31\1\2"
			+ "\1\33\1\6\1\22\1\16\1\17\1\13\1\26\1\36\1\0\1\3" + "\uff83\0";

	/**
	 * Translates characters to character classes
	 */
	private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

	/**
	 * Translates DFA states to action switch labels.
	 */
	private static final int[] ZZ_ACTION = zzUnpackAction();

	private static final String ZZ_ACTION_PACKED_0 = "\1\0\1\1\2\2\1\0\3\2\1\3\17\2\1\4"
			+ "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"
			+ "\1\15\1\16\1\17\1\20\1\0\1\1\1\21\1\2"
			+ "\1\0\2\2\1\0\1\2\2\22\3\0\1\23\6\0"
			+ "\1\24\1\0\1\24\4\2\1\24\1\2\1\0\2\23"
			+ "\1\0\3\2\1\0\3\2\1\0\1\2\1\0\1\2"
			+ "\1\0\1\2\1\0\1\2\1\22\2\25\1\2\2\0"
			+ "\2\2\1\0\3\2\1\0\4\2\2\0\2\2\1\0"
			+ "\1\2\1\0\1\26\1\27\1\30\1\31\1\32\1\0"
			+ "\1\2\4\0\1\2\1\0\2\2\1\0\1\2\5\0"
			+ "\1\33\1\0\1\34\1\0\1\35\1\0\1\36\1\37"
			+ "\1\40\1\34\3\0\1\41\1\42\2\0\1\43\2\0"
			+ "\2\35\3\0\1\40\1\0\1\36\1\0\1\42\1\44"
			+ "\2\0\1\37\1\34\1\0\1\34\2\0\2\45\3\0"
			+ "\1\41\1\0\1\33\2\0\1\34\1\31\1\42\1\37"
			+ "\1\2\1\34\1\43\1\33\1\2\2\44\1\2\2\45"
			+ "\1\2\1\0\1\2\5\0\1\2\1\0\7\2\2\0"
			+ "\2\2\1\0\3\2\1\0\2\2\1\40\1\36\1\0"
			+ "\1\2\3\0\3\2\1\0\1\2\1\35\1\0\1\35"
			+ "\1\2\1\41\1\2\1\46\1\0\1\2\1\0\2\47"
			+ "\2\0\1\2\1\47\1\2\1\47\1\0\1\2\1\50"
			+ "\1\51\2\0\1\50\2\0\2\50\1\51\4\0\1\52"
			+ "\1\47\1\50\1\53\5\0\1\54\12\0\1\54\3\0"
			+ "\1\50\1\0\1\55\1\51\1\53\2\0\2\52\1\0"
			+ "\1\52\3\0\1\53\3\0\1\55\1\0\1\47\1\0"
			+ "\1\2\1\51\1\2\1\54\1\2\1\52\1\0\1\52"
			+ "\1\2\1\52\2\2\1\52\2\2\1\55\1\53\1\0"
			+ "\5\2\1\0\3\2\3\50\4\2\1\0\2\2\1\0"
			+ "\1\2\2\56\3\57\1\56\1\0\1\2\11\0\1\56"
			+ "\1\60\2\0\1\56\1\60\1\61\1\0\1\62\4\0"
			+ "\2\61\5\0\1\62\3\0\1\63\1\0\1\62\2\0"
			+ "\2\63\1\0\2\61\1\57\5\0\1\63\2\62\1\61"
			+ "\1\57\2\2\1\0\1\2\1\0\4\2\1\0\2\2"
			+ "\1\60\2\2\1\62\2\2\2\63\1\61\4\2\1\0"
			+ "\1\2\1\0\1\2\15\0\1\64\3\0\2\65\1\0"
			+ "\1\64\2\0\1\66\1\67\1\70\1\0\1\66\1\71"
			+ "\2\65\1\64\2\70\2\72\1\0\1\66\1\0\1\65"
			+ "\1\72\2\0\2\64\1\66\1\65\1\71\1\2\1\70"
			+ "\1\2\2\70\2\2\1\71\1\67\1\2\1\67\1\2"
			+ "\1\65\1\72\1\2\1\64\1\66\2\0\1\2\10\0"
			+ "\1\73\2\74\6\0\2\75\5\0\2\75\1\73\1\75"
			+ "\1\2\1\74\2\2\5\0\1\2\1\76\6\0\1\77"
			+ "\3\0\1\76\1\0\2\100\2\0\1\101\1\0\1\100"
			+ "\5\0\1\2\2\0\1\102\2\0\1\102\13\0\2\103"
			+ "\2\0\1\104\1\105\1\104\7\0\1\106\2\0\1\106"
			+ "\1\107\1\110\1\111\1\112\1\0\2\113\1\112\1\114" + "\1\115\1\116";

	private static int[] zzUnpackAction() {
		int[] result = new int[623];
		int offset = 0;
		offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAction(String packed, int offset, int[] result) {
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do
				result[j++] = value;
			while (--count > 0);
		}
		return j;
	}

	/**
	 * Translates a state to a row index in the transition table
	 */
	private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

	private static final String ZZ_ROWMAP_PACKED_0 = "\0\0\0\56\0\134\0\212\0\270\0\346\0\u0114\0\u0142"
			+ "\0\u0170\0\u019e\0\u01cc\0\u01fa\0\u0228\0\u0256\0\u0284\0\u02b2"
			+ "\0\u02e0\0\u030e\0\u033c\0\u036a\0\u0398\0\u03c6\0\u03f4\0\u0422"
			+ "\0\u0450\0\u047e\0\u047e\0\u047e\0\u047e\0\u04ac\0\u047e\0\u04da"
			+ "\0\u047e\0\u047e\0\u047e\0\u047e\0\u047e\0\u0508\0\u0536\0\u0564"
			+ "\0\u0592\0\u05c0\0\u05ee\0\u061c\0\u064a\0\u0678\0\u06a6\0\u06d4"
			+ "\0\u0702\0\u0730\0\u075e\0\u078c\0\u07ba\0\u07e8\0\u0816\0\u0844"
			+ "\0\u0872\0\u08a0\0\u08ce\0\u08fc\0\u092a\0\u0958\0\u0986\0\u09b4"
			+ "\0\u09e2\0\u0a10\0\u0a3e\0\u0a6c\0\u0a9a\0\u0ac8\0\u0af6\0\u0b24"
			+ "\0\u0b52\0\u0b80\0\u0bae\0\u0bdc\0\u0c0a\0\u0c38\0\u0c66\0\u0c94"
			+ "\0\u0cc2\0\u0cf0\0\u0d1e\0\u0d4c\0\u0d7a\0\u0da8\0\u0dd6\0\u0e04"
			+ "\0\346\0\u0e32\0\u0e60\0\u0e8e\0\u0ebc\0\u0eea\0\u0f18\0\u0f46"
			+ "\0\u0f74\0\u0fa2\0\u0fd0\0\u0ffe\0\u102c\0\u105a\0\u1088\0\u10b6"
			+ "\0\u10e4\0\u1112\0\u1140\0\u116e\0\u119c\0\u11ca\0\u047e\0\u047e"
			+ "\0\u047e\0\u047e\0\u047e\0\u11f8\0\u1226\0\u1254\0\u1282\0\u12b0"
			+ "\0\u12de\0\u130c\0\u133a\0\u1368\0\u1396\0\u13c4\0\u13f2\0\u1420"
			+ "\0\u144e\0\u147c\0\u14aa\0\u14d8\0\u1506\0\u1534\0\u1562\0\u1590"
			+ "\0\u15be\0\u15ec\0\u047e\0\u161a\0\u047e\0\u1648\0\u1676\0\u16a4"
			+ "\0\u16d2\0\u047e\0\u047e\0\u1700\0\u172e\0\u047e\0\u175c\0\u1506"
			+ "\0\u178a\0\u047e\0\u17b8\0\u17e6\0\u1814\0\u1842\0\u1870\0\u189e"
			+ "\0\u18cc\0\u18fa\0\u047e\0\u1928\0\u1956\0\u047e\0\u1984\0\u19b2"
			+ "\0\u047e\0\u19e0\0\u1a0e\0\u1a3c\0\u1a6a\0\u1a98\0\u1ac6\0\u1af4"
			+ "\0\u1b22\0\u1b22\0\u047e\0\u1b50\0\u1b7e\0\u19b2\0\346\0\346"
			+ "\0\346\0\u1bac\0\346\0\346\0\346\0\u1bda\0\u1956\0\346"
			+ "\0\u1c08\0\u1c36\0\u1c64\0\u1c92\0\u1cc0\0\u1cee\0\u1d1c\0\u1d4a"
			+ "\0\u1d78\0\u1da6\0\u1dd4\0\u1e02\0\u1e30\0\u1e5e\0\u1e8c\0\u1eba"
			+ "\0\u1ee8\0\u1f16\0\u1f44\0\u1f72\0\u1fa0\0\u1fce\0\u1ffc\0\u202a"
			+ "\0\u2058\0\u2086\0\u20b4\0\u20e2\0\u2110\0\u213e\0\u216c\0\346"
			+ "\0\346\0\u219a\0\u21c8\0\u21f6\0\u2224\0\u2252\0\u2280\0\u22ae"
			+ "\0\u22dc\0\u230a\0\u2338\0\u2366\0\u2366\0\346\0\u2394\0\346"
			+ "\0\u23c2\0\u11ca\0\u23f0\0\u241e\0\u244c\0\u047e\0\u247a\0\u24a8"
			+ "\0\u24d6\0\u2504\0\u244c\0\u2532\0\346\0\u2560\0\u258e\0\u25bc"
			+ "\0\u25ea\0\u2618\0\u2646\0\u2674\0\u2674\0\u25ea\0\u26a2\0\u047e"
			+ "\0\u047e\0\u26d0\0\u26fe\0\u272c\0\u275a\0\u2788\0\u27b6\0\u27e4"
			+ "\0\u2812\0\u2840\0\u286e\0\u289c\0\u28ca\0\u28f8\0\u047e\0\u2926"
			+ "\0\u2954\0\u2982\0\u29b0\0\u27b6\0\u29de\0\u2a0c\0\u2a3a\0\u2a68"
			+ "\0\u2a96\0\u2ac4\0\u2af2\0\u2b20\0\u2b4e\0\u2b7c\0\u2baa\0\u047e"
			+ "\0\u2bd8\0\u047e\0\u2c06\0\u2c34\0\u047e\0\u2c62\0\u2c90\0\u2cbe"
			+ "\0\u2cec\0\u2d1a\0\u2d48\0\u286e\0\u2d76\0\u2da4\0\u2dd2\0\u2e00"
			+ "\0\u2bd8\0\u2e2e\0\u2e2e\0\u2e5c\0\346\0\u2e8a\0\346\0\u2eb8"
			+ "\0\u2ee6\0\u2f14\0\u286e\0\u2f42\0\u2f70\0\u2f9e\0\u2fcc\0\346"
			+ "\0\u2ffa\0\u3028\0\346\0\346\0\u3056\0\u3084\0\u30b2\0\u30e0"
			+ "\0\u310e\0\u313c\0\u316a\0\u3198\0\u31c6\0\u31f4\0\346\0\u3222"
			+ "\0\u2baa\0\u3250\0\u327e\0\u32ac\0\u32da\0\u3308\0\u3336\0\u3364"
			+ "\0\u3392\0\u33c0\0\u047e\0\u3392\0\u3392\0\u047e\0\346\0\346"
			+ "\0\u33ee\0\u341c\0\u344a\0\u3478\0\u34a6\0\u34d4\0\u3502\0\u3530"
			+ "\0\u355e\0\u358c\0\u35ba\0\u355e\0\u047e\0\u35e8\0\u3616\0\u3644"
			+ "\0\u3672\0\u36a0\0\u36ce\0\u36fc\0\u372a\0\u3758\0\u3786\0\u37b4"
			+ "\0\u37e2\0\u3810\0\u383e\0\u386c\0\u389a\0\u38c8\0\u36fc\0\u047e"
			+ "\0\u38f6\0\u3672\0\u3924\0\u047e\0\u3952\0\u3980\0\u39ae\0\u39dc"
			+ "\0\u3a0a\0\u3672\0\u3a38\0\u3502\0\u047e\0\u372a\0\u3a66\0\u3a94"
			+ "\0\u3ac2\0\u3af0\0\u3b1e\0\u3b4c\0\u3b7a\0\u3924\0\u3952\0\u3ba8"
			+ "\0\u3bd6\0\u3c04\0\u3c32\0\u3c60\0\u3c8e\0\u3cbc\0\u3cea\0\u3d18"
			+ "\0\u3d46\0\u3d74\0\u3da2\0\u3dd0\0\346\0\u3dfe\0\u3e2c\0\346"
			+ "\0\u3e5a\0\u3e88\0\u35ba\0\346\0\346\0\u3eb6\0\u3ee4\0\u3f12"
			+ "\0\u3f40\0\u3f6e\0\u3f9c\0\u3fca\0\u3ff8\0\u4026\0\u4054\0\u4082"
			+ "\0\u40b0\0\u40de\0\u410c\0\u413a\0\u4168\0\u4196\0\u41c4\0\u41f2"
			+ "\0\u4220\0\u424e\0\u047e\0\u427c\0\u42aa\0\u42d8\0\u4306\0\u4334"
			+ "\0\u4362\0\u42aa\0\u4390\0\u43be\0\u424e\0\u047e\0\u3f6e\0\u43ec"
			+ "\0\u047e\0\u047e\0\u43be\0\u047e\0\u441a\0\u3fca\0\u047e\0\u4448"
			+ "\0\u3f6e\0\u4476\0\u41c4\0\u44a4\0\u4054\0\u047e\0\u44d2\0\u4500"
			+ "\0\u452e\0\u3fca\0\u41f2\0\u42aa\0\u424e\0\u455c\0\u458a\0\u45b8"
			+ "\0\u45e6\0\346\0\u4614\0\u4642\0\346\0\u41f2\0\u4670\0\346"
			+ "\0\u469e\0\346\0\346\0\u46cc\0\346\0\346\0\u46fa\0\u4728"
			+ "\0\u4756\0\u4784\0\u47b2\0\u47e0\0\u480e\0\u483c\0\u486a\0\u4898"
			+ "\0\u48c6\0\u047e\0\u047e\0\u48f4\0\u48f4\0\u4922\0\u4950\0\u497e"
			+ "\0\u49ac\0\u49da\0\u4a08\0\u047e\0\u4a36\0\u4a64\0\u4a92\0\u4ac0"
			+ "\0\u4aee\0\u4728\0\u49da\0\346\0\346\0\u4b1c\0\346\0\u4b4a"
			+ "\0\u4b78\0\u4ba6\0\u4bd4\0\u4c02\0\u4c30\0\u4c5e\0\u4c8c\0\u047e"
			+ "\0\u4cba\0\u4ce8\0\u4d16\0\u4d44\0\u4d72\0\u4da0\0\u047e\0\u4dce"
			+ "\0\u4dfc\0\u4e2a\0\u4e58\0\u4e86\0\u047e\0\u4c5e\0\u4eb4\0\u4ee2"
			+ "\0\u047e\0\u4e58\0\346\0\u4f10\0\u4f3e\0\u4f6c\0\u4f9a\0\u4fc8"
			+ "\0\u4ff6\0\u5024\0\u5052\0\u5080\0\u50ae\0\u50dc\0\u047e\0\u510a"
			+ "\0\u5138\0\u5166\0\u5194\0\u51c2\0\u51f0\0\u521e\0\u524c\0\u527a"
			+ "\0\u52a8\0\u52d6\0\u047e\0\346\0\u5304\0\u5332\0\u5332\0\u047e"
			+ "\0\u047e\0\u5360\0\u538e\0\u53bc\0\u53ea\0\u5418\0\u5446\0\u5474"
			+ "\0\u54a2\0\u54d0\0\u54fe\0\u047e\0\u047e\0\u047e\0\u047e\0\u047e"
			+ "\0\u552c\0\u552c\0\u047e\0\u54d0\0\u047e\0\u047e\0\u047e";

	private static int[] zzUnpackRowMap() {
		int[] result = new int[623];
		int offset = 0;
		offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackRowMap(String packed, int offset, int[] result) {
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int high = packed.charAt(i++) << 16;
			result[j++] = high | packed.charAt(i++);
		}
		return j;
	}

	/**
	 * The transition table of the DFA
	 */
	private static final int[] ZZ_TRANS = zzUnpackTrans();

	private static final String ZZ_TRANS_PACKED_0 = "\1\0\1\3\1\4\1\5\1\6\1\7\1\10\1\11"
			+ "\1\12\1\13\1\14\1\6\1\15\1\16\1\17\1\20"
			+ "\1\21\1\22\1\23\1\24\1\13\1\24\2\6\1\25"
			+ "\1\6\1\26\1\27\1\30\1\11\1\6\1\31\1\32"
			+ "\1\0\1\33\1\34\1\35\1\36\1\37\1\40\1\41"
			+ "\1\42\1\43\1\44\1\45\1\46\40\47\1\50\15\47"
			+ "\1\0\1\6\1\51\1\52\3\6\1\0\10\6\1\53"
			+ "\13\6\1\54\1\0\2\6\1\0\1\6\15\0\2\6"
			+ "\1\55\1\56\2\6\1\0\25\6\1\0\2\6\1\0"
			+ "\1\6\16\0\1\57\1\60\1\61\1\62\2\0\1\63"
			+ "\1\64\1\65\2\0\1\66\1\67\1\0\1\70\1\71"
			+ "\1\72\1\0\1\64\6\0\1\73\1\74\22\0\2\6"
			+ "\1\0\3\6\1\0\25\6\1\0\2\6\1\0\1\6"
			+ "\15\0\2\6\1\75\3\6\1\0\1\6\1\76\1\77"
			+ "\2\6\1\100\1\101\5\6\1\76\6\6\1\102\1\6"
			+ "\1\0\2\6\1\0\1\6\15\0\1\6\1\103\1\104"
			+ "\3\6\1\0\25\6\1\0\2\6\1\0\1\6\23\0"
			+ "\1\11\25\0\1\11\21\0\2\6\1\105\3\6\1\0"
			+ "\1\6\1\106\12\6\1\106\10\6\1\0\2\6\1\0"
			+ "\1\6\15\0\2\6\1\107\3\6\1\0\10\6\1\110"
			+ "\1\6\1\111\12\6\1\0\2\6\1\0\1\6\15\0"
			+ "\1\6\1\112\1\113\1\114\2\6\1\0\1\115\7\6"
			+ "\1\116\14\6\1\0\2\6\1\0\1\6\15\0\2\6"
			+ "\1\117\3\6\1\0\10\6\1\120\14\6\1\0\2\6"
			+ "\1\0\1\6\15\0\2\6\1\121\3\6\1\0\1\122"
			+ "\24\6\1\0\2\6\1\0\1\6\15\0\2\6\1\123"
			+ "\1\6\1\124\1\6\1\0\25\6\1\0\2\6\1\0"
			+ "\1\6\15\0\2\6\1\125\3\6\1\0\24\6\1\126"
			+ "\1\0\2\6\1\0\1\6\15\0\1\6\1\127\1\130"
			+ "\3\6\1\0\1\6\1\131\12\6\1\131\10\6\1\0"
			+ "\2\6\1\0\1\6\15\0\1\6\1\132\1\133\3\6"
			+ "\1\0\25\6\1\0\2\6\1\0\1\6\15\0\2\6"
			+ "\1\134\3\6\1\0\1\6\1\135\7\6\1\136\2\6"
			+ "\1\135\10\6\1\0\2\6\1\0\1\6\15\0\2\6"
			+ "\1\137\1\6\1\140\1\6\1\0\1\141\24\6\1\0"
			+ "\2\6\1\0\1\6\15\0\1\6\1\142\1\143\1\6"
			+ "\1\144\1\6\1\0\5\6\1\145\2\6\1\146\14\6"
			+ "\1\0\2\6\1\0\1\6\15\0\1\6\1\147\1\150"
			+ "\3\6\1\0\25\6\1\0\2\6\1\0\1\6\15\0"
			+ "\2\6\1\151\1\152\2\6\1\0\12\6\1\153\12\6"
			+ "\1\0\2\6\1\0\1\6\15\0\2\6\1\154\1\6"
			+ "\1\155\1\6\1\0\25\6\1\0\2\6\1\0\1\6"
			+ "\53\0\1\31\2\0\1\156\137\0\1\157\54\0\1\160"
			+ "\1\161\64\0\1\162\40\47\1\0\15\47\40\0\1\163"
			+ "\16\0\2\6\1\164\1\165\2\6\1\0\25\6\1\0"
			+ "\2\6\1\0\1\6\17\0\1\166\1\167\1\170\14\0"
			+ "\1\171\34\0\2\6\1\171\3\6\1\0\12\6\1\172"
			+ "\12\6\1\0\2\6\1\0\1\6\15\0\2\6\1\173"
			+ "\1\174\1\175\1\6\1\0\25\6\1\0\2\6\1\0"
			+ "\1\6\17\0\1\176\24\0\1\176\26\0\2\6\1\176"
			+ "\3\6\1\0\20\6\1\177\4\6\1\0\2\6\1\0"
			+ "\1\6\17\0\1\200\1\164\3\0\1\201\1\0\1\202"
			+ "\5\0\1\203\1\0\1\204\34\0\1\205\1\206\1\207"
			+ "\1\210\1\170\1\211\1\0\1\212\1\213\1\214\1\215"
			+ "\1\0\1\216\1\217\1\0\1\220\1\0\1\221\1\222"
			+ "\1\213\1\222\1\223\1\224\1\225\1\0\1\226\1\227"
			+ "\23\0\1\230\1\0\1\231\2\0\1\232\6\0\1\233"
			+ "\12\0\1\225\2\0\1\234\24\0\1\235\1\236\7\0"
			+ "\1\215\1\0\1\237\1\217\42\0\1\240\5\0\1\213"
			+ "\12\0\1\213\2\0\1\224\3\0\1\241\25\0\1\242"
			+ "\2\0\1\243\1\0\1\244\1\0\1\162\13\0\1\223"
			+ "\4\0\1\245\25\0\1\246\6\0\1\246\46\0\1\247"
			+ "\2\0\1\250\6\0\1\251\2\0\1\252\40\0\1\226"
			+ "\26\0\1\226\25\0\1\253\1\254\2\0\1\255\11\0"
			+ "\1\256\1\0\1\257\36\0\1\260\6\0\1\260\46\0"
			+ "\1\261\11\0\1\262\5\0\1\222\1\0\1\222\31\0"
			+ "\1\263\1\0\1\263\55\0\1\264\1\265\1\170\51\0"
			+ "\1\263\1\0\1\266\2\0\1\250\3\0\1\246\2\0"
			+ "\1\251\10\0\1\223\3\0\1\226\24\0\2\6\1\223"
			+ "\3\6\1\0\2\6\1\267\13\6\1\270\6\6\1\0"
			+ "\2\6\1\0\1\6\15\0\2\6\1\246\3\6\1\0"
			+ "\2\6\1\271\22\6\1\0\2\6\1\0\1\6\15\0"
			+ "\2\6\1\266\2\6\1\272\1\0\5\6\1\273\17\6"
			+ "\1\0\2\6\1\0\1\6\15\0\2\6\1\226\3\6"
			+ "\1\0\22\6\1\274\2\6\1\0\2\6\1\0\1\6"
			+ "\15\0\1\275\1\6\1\263\3\6\1\0\25\6\1\0"
			+ "\2\6\1\0\1\6\15\0\2\6\1\204\3\6\1\0"
			+ "\12\6\1\276\12\6\1\0\2\6\1\0\1\6\17\0"
			+ "\1\204\16\0\1\204\36\0\1\277\2\0\1\243\24\0"
			+ "\1\245\23\0\2\6\1\277\2\6\1\300\1\0\23\6"
			+ "\1\301\1\6\1\0\2\6\1\0\1\6\17\0\1\302"
			+ "\2\0\1\255\6\0\1\262\41\0\2\6\1\255\2\6"
			+ "\1\303\1\0\25\6\1\0\2\6\1\0\1\6\15\0"
			+ "\2\6\1\262\3\6\1\0\5\6\1\304\17\6\1\0"
			+ "\2\6\1\0\1\6\15\0\2\6\1\305\3\6\1\0"
			+ "\10\6\1\306\14\6\1\0\2\6\1\0\1\6\15\0"
			+ "\1\230\1\0\1\307\11\0\1\310\2\0\1\305\1\0"
			+ "\1\311\5\0\1\312\2\0\1\313\23\0\1\314\1\6"
			+ "\1\315\3\6\1\0\5\6\1\316\12\6\1\317\2\6"
			+ "\1\320\1\6\1\0\2\6\1\0\1\6\15\0\2\6"
			+ "\1\241\3\6\1\0\23\6\1\321\1\6\1\0\2\6"
			+ "\1\0\1\6\15\0\2\6\1\311\3\6\1\0\12\6"
			+ "\1\322\12\6\1\0\2\6\1\0\1\6\17\0\1\256"
			+ "\14\0\1\256\36\0\2\6\1\256\3\6\1\0\10\6"
			+ "\1\323\14\6\1\0\2\6\1\0\1\6\17\0\1\224"
			+ "\23\0\1\224\27\0\2\6\1\224\3\6\1\0\17\6"
			+ "\1\324\5\6\1\0\2\6\1\0\1\6\16\0\1\235"
			+ "\1\325\11\0\1\326\41\0\1\6\1\327\1\325\3\6"
			+ "\1\0\5\6\1\330\17\6\1\0\2\6\1\0\1\6"
			+ "\17\0\2\331\52\0\2\6\1\331\1\332\2\6\1\0"
			+ "\25\6\1\0\2\6\1\0\1\6\15\0\2\6\1\202"
			+ "\3\6\1\0\2\6\1\333\22\6\1\0\2\6\1\0"
			+ "\1\6\17\0\1\202\6\0\1\202\44\0\2\6\1\201"
			+ "\3\6\1\0\1\334\24\6\1\0\2\6\1\0\1\6"
			+ "\17\0\1\201\4\0\1\201\50\0\1\335\4\0\1\244"
			+ "\1\0\1\260\44\0\2\6\1\244\3\6\1\0\1\336"
			+ "\24\6\1\0\2\6\1\0\1\6\15\0\2\6\1\260"
			+ "\3\6\1\0\2\6\1\337\22\6\1\0\2\6\1\0"
			+ "\1\6\17\0\1\215\5\0\1\213\1\0\1\215\10\0"
			+ "\1\213\32\0\2\6\1\215\3\6\1\0\3\6\1\340"
			+ "\21\6\1\0\2\6\1\0\1\6\15\0\2\6\1\213"
			+ "\3\6\1\0\1\6\1\341\12\6\1\341\10\6\1\0"
			+ "\2\6\1\0\1\6\15\0\2\6\1\342\3\6\1\0"
			+ "\10\6\1\343\14\6\1\0\2\6\1\0\1\6\16\0"
			+ "\1\253\1\344\11\0\1\345\2\0\1\346\36\0\2\6"
			+ "\1\345\3\6\1\0\5\6\1\347\17\6\1\0\2\6"
			+ "\1\0\1\6\15\0\2\6\1\252\3\6\1\0\10\6"
			+ "\1\350\14\6\1\0\2\6\1\0\1\6\15\0\1\6"
			+ "\1\351\1\253\3\6\1\0\25\6\1\0\2\6\1\0"
			+ "\1\6\15\0\2\6\1\352\3\6\1\0\10\6\1\353"
			+ "\14\6\1\0\2\6\1\0\1\6\17\0\1\352\14\0"
			+ "\1\352\40\0\1\354\2\0\1\232\6\0\1\355\5\0"
			+ "\1\222\1\0\1\222\31\0\2\6\1\354\2\6\1\356"
			+ "\1\0\5\6\1\357\17\6\1\0\2\6\1\0\1\6"
			+ "\15\0\2\6\1\222\3\6\1\0\13\6\1\360\1\6"
			+ "\1\360\7\6\1\0\2\6\1\0\1\6\17\0\1\217"
			+ "\12\0\1\217\40\0\2\6\1\217\3\6\1\0\6\6"
			+ "\1\361\16\6\1\0\2\6\1\0\1\6\53\0\1\362"
			+ "\21\0\1\363\1\0\1\363\51\0\2\6\1\363\1\6"
			+ "\1\364\1\6\1\0\25\6\1\0\2\6\1\0\1\6"
			+ "\15\0\1\365\1\366\1\367\1\0\1\363\3\0\1\370"
			+ "\12\0\1\370\32\0\1\365\1\0\1\371\1\0\1\363"
			+ "\52\0\2\366\55\0\1\370\5\0\1\370\12\0\1\370"
			+ "\32\0\2\6\1\370\3\6\1\0\1\6\1\372\12\6"
			+ "\1\372\10\6\1\0\2\6\1\0\1\6\15\0\1\365"
			+ "\1\366\1\373\53\0\1\374\1\6\1\365\3\6\1\0"
			+ "\25\6\1\0\2\6\1\0\1\6\15\0\1\6\1\375"
			+ "\1\366\3\6\1\0\25\6\1\0\2\6\1\0\1\6"
			+ "\17\0\2\376\52\0\2\6\1\376\1\377\2\6\1\0"
			+ "\25\6\1\0\2\6\1\0\1\6\17\0\1\u0100\1\u0101"
			+ "\1\363\13\0\1\u0102\1\u0103\1\u0104\1\0\1\u0104\33\0"
			+ "\1\u0105\17\0\1\u0105\1\0\1\u0105\33\0\2\u0106\54\0"
			+ "\1\u0107\15\0\1\u0102\1\u0103\1\u0108\1\0\1\u0108\33\0"
			+ "\2\u0109\54\0\1\u010a\4\0\1\u010a\46\0\1\u010b\1\0"
			+ "\1\u010c\1\u010d\52\0\1\u010e\1\u010f\1\u0110\1\u0111\1\u0112"
			+ "\1\u0113\1\u0114\1\u0115\1\370\2\0\1\u0116\1\u0117\2\0"
			+ "\1\u0118\1\u0102\1\u0119\1\u0104\1\370\1\u0104\3\0\1\u011a"
			+ "\1\0\1\u011b\23\0\1\365\1\u011c\1\u011d\1\0\1\363"
			+ "\53\0\2\u011e\2\0\1\u0114\51\0\1\u011f\14\0\1\u0118"
			+ "\2\0\1\u0105\1\0\1\u0105\3\0\1\u011a\27\0\1\u0120"
			+ "\1\u0106\1\u0121\53\0\1\u0122\1\u0123\10\0\1\u0117\4\0"
			+ "\1\u0124\10\0\1\u011b\25\0\1\u0125\4\0\1\u0125\50\0"
			+ "\1\u0126\1\0\1\u0127\7\0\1\u0128\3\0\1\u0102\1\u0103"
			+ "\1\u0108\1\0\1\u0108\33\0\1\u0129\1\u0109\4\0\1\370"
			+ "\2\0\1\u0116\7\0\1\370\34\0\2\u012a\54\0\1\u012b"
			+ "\1\376\1\u012c\51\0\1\u012d\1\0\1\u012e\1\u012f\1\0"
			+ "\1\u0113\50\0\1\u012d\1\0\1\u0130\1\u0131\1\u012c\2\0"
			+ "\1\u010a\50\0\2\u0123\52\0\1\u012d\1\0\1\u012d\53\0"
			+ "\1\u010b\1\0\1\u010b\53\0\1\u010b\1\0\1\u0132\4\0"
			+ "\1\u0125\11\0\1\u0124\10\0\1\u011b\25\0\1\u0133\16\0"
			+ "\1\u0124\10\0\1\u011b\25\0\1\u0134\1\u012a\1\0\1\u0113"
			+ "\52\0\1\u0113\2\0\1\u0113\52\0\1\u0135\1\u012f\13\0"
			+ "\1\u0118\10\0\1\u011a\27\0\1\u0136\14\0\1\u0118\10\0"
			+ "\1\u011a\27\0\2\u012f\54\0\1\u0137\1\u011e\1\u0127\53\0"
			+ "\2\u011e\54\0\1\u0127\1\0\1\u0127\53\0\2\u010d\54\0"
			+ "\1\u0138\1\u010d\2\0\1\u0114\1\0\1\370\2\0\1\u0116"
			+ "\1\u0128\6\0\1\370\40\0\1\u0114\51\0\1\u0128\11\0"
			+ "\1\u0128\43\0\1\u0139\5\0\1\370\2\0\1\u0116\7\0"
			+ "\1\370\34\0\1\u0121\1\0\1\u0121\53\0\1\u0117\11\0"
			+ "\1\u0117\41\0\1\365\1\u010f\1\u013a\53\0\1\365\1\u011c"
			+ "\1\u013b\53\0\2\6\1\u011e\1\u013c\2\6\1\0\25\6"
			+ "\1\0\2\6\1\0\1\6\15\0\2\6\1\u0109\1\u013d"
			+ "\2\6\1\0\25\6\1\0\2\6\1\0\1\6\15\0"
			+ "\2\6\1\u012f\1\u013e\2\6\1\0\25\6\1\0\2\6"
			+ "\1\0\1\6\17\0\1\u0117\3\0\1\u0114\5\0\1\u0117"
			+ "\41\0\2\6\1\0\3\6\1\u0114\25\6\1\0\2\6"
			+ "\1\0\1\6\15\0\2\6\1\u0117\3\6\1\0\5\6"
			+ "\1\u013f\17\6\1\0\2\6\1\0\1\6\17\0\1\u0102"
			+ "\15\0\1\u0102\35\0\2\6\1\u0102\3\6\1\0\11\6"
			+ "\1\u0140\13\6\1\0\2\6\1\0\1\6\15\0\1\u012d"
			+ "\1\0\1\u0141\1\u0142\1\u012c\1\u0113\1\0\1\u010a\3\0"
			+ "\1\u0116\4\0\1\u0102\37\0\2\u0142\54\0\1\u0116\10\0"
			+ "\1\u0116\44\0\1\u012c\1\0\1\u012c\51\0\1\u012d\1\0"
			+ "\1\u0143\2\0\1\u0113\50\0\2\6\1\u010a\3\6\1\0"
			+ "\1\u0144\24\6\1\0\2\6\1\0\1\6\15\0\1\u012d"
			+ "\1\0\1\u0145\1\u0142\1\u012c\2\0\1\u010a\46\0\2\6"
			+ "\1\u0142\1\u0146\2\6\1\0\25\6\1\0\2\6\1\0"
			+ "\1\6\15\0\2\6\1\u012c\1\6\1\u0147\1\6\1\0"
			+ "\25\6\1\0\2\6\1\0\1\6\15\0\1\u0148\1\6"
			+ "\1\u012d\3\6\1\0\25\6\1\0\2\6\1\0\1\6"
			+ "\15\0\2\6\1\u0113\2\6\1\u0149\1\0\25\6\1\0"
			+ "\2\6\1\0\1\6\15\0\2\6\1\u0116\3\6\1\0"
			+ "\4\6\1\u014a\20\6\1\0\2\6\1\0\1\6\15\0"
			+ "\2\6\1\u0128\3\6\1\0\5\6\1\u014b\17\6\1\0"
			+ "\2\6\1\0\1\6\15\0\2\6\1\u012a\1\u014c\2\6"
			+ "\1\0\25\6\1\0\2\6\1\0\1\6\15\0\1\u010b"
			+ "\1\0\1\u014d\16\0\1\u0124\36\0\1\u0124\16\0\1\u0124"
			+ "\34\0\1\u014e\1\6\1\u010b\3\6\1\0\25\6\1\0"
			+ "\2\6\1\0\1\6\15\0\2\6\1\u0124\3\6\1\0"
			+ "\12\6\1\u014f\12\6\1\0\2\6\1\0\1\6\16\0"
			+ "\2\u011c\53\0\1\6\1\u0150\1\u011c\3\6\1\0\25\6"
			+ "\1\0\2\6\1\0\1\6\15\0\2\6\1\u0106\1\u0151"
			+ "\2\6\1\0\25\6\1\0\2\6\1\0\1\6\15\0"
			+ "\2\6\1\u0105\3\6\1\0\13\6\1\u0152\1\6\1\u0152"
			+ "\7\6\1\0\2\6\1\0\1\6\17\0\1\u0153\1\0"
			+ "\1\u0121\12\0\1\u0118\10\0\1\u011a\25\0\2\6\1\u0136"
			+ "\3\6\1\0\10\6\1\u0154\10\6\1\u0155\3\6\1\0"
			+ "\2\6\1\0\1\6\15\0\2\6\1\u0121\1\6\1\u0156"
			+ "\1\6\1\0\25\6\1\0\2\6\1\0\1\6\17\0"
			+ "\1\u0108\17\0\1\u0108\1\0\1\u0108\31\0\2\6\1\u0108"
			+ "\3\6\1\0\13\6\1\u0157\1\6\1\u0157\7\6\1\0"
			+ "\2\6\1\0\1\6\17\0\1\u0158\1\u010d\1\u0127\15\0"
			+ "\1\u0108\1\0\1\u0108\5\0\1\u011b\25\0\1\u011b\27\0"
			+ "\1\u011b\25\0\1\u0159\1\0\1\u0127\15\0\1\u0108\1\0"
			+ "\1\u0108\31\0\2\6\1\u011b\3\6\1\0\23\6\1\u015a"
			+ "\1\6\1\0\2\6\1\0\1\6\15\0\2\6\1\u0127"
			+ "\1\6\1\u015b\1\6\1\0\25\6\1\0\2\6\1\0"
			+ "\1\6\15\0\2\6\1\u010d\1\u015c\2\6\1\0\25\6"
			+ "\1\0\2\6\1\0\1\6\17\0\1\u0103\16\0\1\u0103"
			+ "\34\0\2\6\1\u0103\3\6\1\0\12\6\1\u015d\12\6"
			+ "\1\0\2\6\1\0\1\6\17\0\2\u015e\52\0\2\6"
			+ "\1\u015e\1\u015f\2\6\1\0\25\6\1\0\2\6\1\0"
			+ "\1\6\15\0\2\6\1\u0125\3\6\1\0\1\u0160\24\6"
			+ "\1\0\2\6\1\0\1\6\17\0\1\u0161\2\0\1\u0161"
			+ "\50\0\2\6\1\u0161\2\6\1\u0162\1\0\25\6\1\0"
			+ "\2\6\1\0\1\6\17\0\1\u0163\23\0\1\u0163\31\0"
			+ "\1\u0164\2\0\1\u0165\20\0\1\u0163\31\0\1\u0166\2\0"
			+ "\1\u0166\52\0\1\u0164\2\0\1\u0161\20\0\1\u0163\27\0"
			+ "\2\6\1\u0166\2\6\1\u0167\1\0\25\6\1\0\2\6"
			+ "\1\0\1\6\15\0\2\6\1\u0163\3\6\1\0\17\6"
			+ "\1\u0168\5\6\1\0\2\6\1\0\1\6\16\0\2\u0169"
			+ "\53\0\1\6\1\u016a\1\u0169\3\6\1\0\25\6\1\0"
			+ "\2\6\1\0\1\6\16\0\1\u016b\1\u016c\1\0\1\u016d"
			+ "\1\u0161\1\u016e\11\0\1\u016f\36\0\2\u016b\61\0\1\u016e"
			+ "\51\0\1\u016f\15\0\1\u016f\37\0\1\u016d\1\0\1\u016d"
			+ "\53\0\1\u016f\3\0\1\u016e\11\0\1\u016f\37\0\1\u0170"
			+ "\17\0\1\u0170\1\0\1\u0170\33\0\1\u0171\30\0\1\u0171"
			+ "\24\0\1\u0172\4\0\1\u0173\23\0\1\u0171\24\0\1\u0173"
			+ "\4\0\1\u0173\50\0\1\u0174\23\0\1\u0163\4\0\1\u0171"
			+ "\24\0\2\u0175\52\0\1\u0176\1\u0177\1\u0178\1\u0179\1\u016d"
			+ "\1\u017a\1\u016e\1\u017b\1\u017c\3\0\1\u017d\3\0\1\u016f"
			+ "\1\u017e\1\u0170\1\u017c\1\u0170\1\0\1\u0163\4\0\1\u0171"
			+ "\22\0\1\u0176\1\u0177\1\u017f\2\0\1\u0180\1\0\1\u0173"
			+ "\50\0\1\u0181\2\0\1\u0182\13\0\1\u0183\36\0\1\u0184"
			+ "\4\0\1\u0184\50\0\1\u0185\3\0\1\u0114\1\0\1\u0185"
			+ "\12\0\1\u0185\34\0\1\u0186\5\0\1\u0187\11\0\1\u0170"
			+ "\1\u0187\1\u0170\33\0\1\u017d\11\0\1\u017d\43\0\1\u0188"
			+ "\5\0\1\u0188\12\0\1\u0188\34\0\1\u0189\1\u018a\14\0"
			+ "\1\u016f\37\0\1\u018b\16\0\1\u018b\36\0\2\u018c\54\0"
			+ "\1\u0164\1\u0175\1\0\1\u0161\20\0\1\u0163\30\0\2\u018d"
			+ "\55\0\1\u018e\1\0\1\u016d\3\0\1\u0188\10\0\1\u018b"
			+ "\1\0\1\u0188\33\0\1\u016b\1\u018f\2\0\1\u0190\52\0"
			+ "\1\u0190\2\0\1\u0190\50\0\1\u0176\1\0\1\u0191\1\u0192"
			+ "\1\0\1\u0180\50\0\1\u0176\1\0\1\u0193\2\0\1\u0180"
			+ "\52\0\2\u018a\54\0\1\u0187\5\0\1\u0187\12\0\1\u0187"
			+ "\34\0\1\u0194\2\0\1\u0195\1\u016e\11\0\1\u016f\37\0"
			+ "\1\u0195\2\0\1\u0195\52\0\1\u0196\2\0\1\u0166\6\0"
			+ "\1\u017d\42\0\1\u0169\1\u0197\16\0\1\u0183\36\0\1\u0183"
			+ "\16\0\1\u0183\35\0\1\u0198\1\u0199\4\0\1\u0184\47\0"
			+ "\2\u0198\53\0\1\u0176\1\u0169\1\u019a\2\0\1\u0180\13\0"
			+ "\1\u0183\1\u0170\1\0\1\u0170\31\0\1\u0176\1\u0169\1\u019b"
			+ "\2\0\1\u0180\52\0\1\u019c\1\u0192\4\0\1\u0187\12\0"
			+ "\1\u0187\7\0\1\u0171\24\0\2\u0192\53\0\1\u0198\1\u019d"
			+ "\5\0\1\u0188\10\0\1\u018b\1\0\1\u0188\34\0\1\u019e"
			+ "\5\0\1\u0188\10\0\1\u018b\1\0\1\u0188\33\0\1\u018d"
			+ "\1\u019f\2\0\1\u0195\52\0\1\u01a0\2\0\1\u0166\1\0"
			+ "\1\u0173\4\0\1\u017d\43\0\1\u0163\1\u0175\22\0\1\u0163"
			+ "\27\0\1\6\1\u01a1\1\u018d\3\6\1\0\25\6\1\0"
			+ "\2\6\1\0\1\6\15\0\1\6\1\u01a2\1\u0198\3\6"
			+ "\1\0\25\6\1\0\2\6\1\0\1\6\15\0\2\6"
			+ "\1\0\3\6\1\u016e\25\6\1\0\2\6\1\0\1\6"
			+ "\17\0\1\u01a3\2\0\1\u0180\1\u016e\1\u0184\4\0\1\u017d"
			+ "\4\0\1\u0183\1\u0170\1\0\1\u0170\33\0\1\u0180\2\0"
			+ "\1\u0180\50\0\2\6\1\u0170\3\6\1\0\13\6\1\u01a4"
			+ "\1\6\1\u01a4\7\6\1\0\2\6\1\0\1\6\17\0"
			+ "\1\u01a5\2\0\1\u0180\13\0\1\u0183\1\u0170\1\0\1\u0170"
			+ "\31\0\2\6\1\u0180\2\6\1\u01a6\1\0\25\6\1\0"
			+ "\2\6\1\0\1\6\15\0\2\6\1\u0183\3\6\1\0"
			+ "\12\6\1\u01a7\12\6\1\0\2\6\1\0\1\6\15\0"
			+ "\2\6\1\u0184\3\6\1\0\1\u01a8\24\6\1\0\2\6"
			+ "\1\0\1\6\15\0\2\6\1\u017d\3\6\1\0\5\6"
			+ "\1\u01a9\17\6\1\0\2\6\1\0\1\6\17\0\1\u01aa"
			+ "\1\u018a\27\0\1\u0171\22\0\2\6\1\u0171\3\6\1\0"
			+ "\24\6\1\u01ab\1\0\2\6\1\0\1\6\15\0\2\6"
			+ "\1\u018a\1\u01ac\2\6\1\0\25\6\1\0\2\6\1\0"
			+ "\1\6\15\0\2\6\1\u0175\1\u01ad\2\6\1\0\25\6"
			+ "\1\0\2\6\1\0\1\6\15\0\1\6\1\u01ae\1\u016b"
			+ "\3\6\1\0\25\6\1\0\2\6\1\0\1\6\15\0"
			+ "\2\6\1\u016d\1\6\1\u01af\1\6\1\0\25\6\1\0"
			+ "\2\6\1\0\1\6\17\0\1\u019e\2\0\1\u0190\2\0"
			+ "\1\u0188\10\0\1\u018b\1\0\1\u0188\32\0\2\6\1\u0188"
			+ "\3\6\1\0\1\6\1\u01b0\12\6\1\u01b0\10\6\1\0"
			+ "\2\6\1\0\1\6\15\0\2\6\1\u018b\3\6\1\0"
			+ "\12\6\1\u01b1\12\6\1\0\2\6\1\0\1\6\15\0"
			+ "\2\6\1\u0190\2\6\1\u01b2\1\0\25\6\1\0\2\6"
			+ "\1\0\1\6\17\0\1\u01b3\1\u018c\1\0\1\u0195\1\0"
			+ "\1\u0173\46\0\2\6\1\u018c\1\u01b4\2\6\1\0\25\6"
			+ "\1\0\2\6\1\0\1\6\15\0\2\6\1\u0195\2\6"
			+ "\1\u01b5\1\0\25\6\1\0\2\6\1\0\1\6\15\0"
			+ "\2\6\1\u0173\3\6\1\0\1\u01b6\24\6\1\0\2\6"
			+ "\1\0\1\6\15\0\2\6\1\u016f\3\6\1\0\11\6"
			+ "\1\u01b7\13\6\1\0\2\6\1\0\1\6\15\0\1\u0176"
			+ "\1\0\1\u0176\53\0\1\u01b8\1\6\1\u0176\3\6\1\0"
			+ "\25\6\1\0\2\6\1\0\1\6\15\0\2\6\1\u0187"
			+ "\3\6\1\0\1\6\1\u01b9\12\6\1\u01b9\10\6\1\0"
			+ "\2\6\1\0\1\6\17\0\2\u01ba\52\0\2\6\1\u01ba"
			+ "\1\u01bb\2\6\1\0\25\6\1\0\2\6\1\0\1\6"
			+ "\17\0\2\u01bc\52\0\2\6\1\u01bc\1\u01bd\2\6\1\0"
			+ "\25\6\1\0\2\6\1\0\1\6\23\0\1\u01be\50\0"
			+ "\1\u01bf\1\u01c0\1\u01ba\2\0\1\u01be\50\0\2\u01bf\53\0"
			+ "\1\u01c1\1\0\1\u01c2\2\0\1\u01c3\1\u016e\1\u01c4\5\0"
			+ "\1\u01c5\46\0\1\u01c6\51\0\1\u01c7\1\0\1\u01c7\53\0"
			+ "\1\u01c8\1\0\1\u01c8\53\0\1\u01c9\1\0\1\u01c8\24\0"
			+ "\1\u01ca\26\0\1\u01ca\26\0\1\u01ca\26\0\1\u01cb\2\0"
			+ "\1\u01cb\52\0\1\u01cc\1\u01bc\1\0\1\u01cd\1\u01ce\50\0"
			+ "\1\u01bf\1\u01cf\1\u01d0\1\u01d1\1\u01d2\1\u01ce\1\0\1\u01d3"
			+ "\3\0\1\u01d4\6\0\1\u01d3\5\0\1\u01d5\1\u01d6\25\0"
			+ "\1\u01d6\27\0\1\u01d6\25\0\2\u01d7\54\0\1\u01d8\5\0"
			+ "\1\u01d3\12\0\1\u01d3\5\0\1\u01ca\26\0\1\u01d9\26\0"
			+ "\1\u01d9\26\0\2\u01da\54\0\1\u01db\1\u01dc\10\0\1\u01d4"
			+ "\43\0\1\u01dd\1\u01de\1\0\1\u01d2\1\u01ce\22\0\1\u01ca"
			+ "\26\0\2\u01df\54\0\1\u01e0\1\u01e1\10\0\1\u01d4\43\0"
			+ "\2\u01e1\54\0\1\u01d4\11\0\1\u01d4\43\0\1\u01d3\5\0"
			+ "\1\u01d3\12\0\1\u01d3\34\0\1\u01e2\16\0\1\u01e2\36\0"
			+ "\1\u01e3\1\0\1\u01c7\24\0\1\u01d9\26\0\1\u01d6\3\0"
			+ "\1\u01c6\23\0\1\u01d6\25\0\2\u01dc\60\0\1\u01e4\50\0"
			+ "\1\u01bf\1\u01e5\1\u01dc\54\0\2\u01e6\2\0\1\u01be\51\0"
			+ "\2\u01e6\54\0\1\u01cb\1\u01df\1\0\1\u01cb\24\0\1\u01d6"
			+ "\25\0\1\u01cb\1\u01df\1\0\1\u01cb\52\0\1\u01e7\1\u01bc"
			+ "\10\0\1\u01d4\43\0\1\u01cd\2\0\1\u01cd\52\0\1\u01e8"
			+ "\2\0\1\u01cd\2\0\1\u01d3\12\0\1\u01d3\34\0\1\u01e9"
			+ "\1\u01de\1\u01c7\1\u01cb\6\0\1\u01d4\43\0\1\u01ea\1\u01de"
			+ "\1\0\1\u01cb\52\0\1\u01eb\1\0\1\u01c8\24\0\1\u01d9"
			+ "\1\u01d6\25\0\1\u01ec\1\u01dc\1\0\1\u01cd\52\0\1\u01ed"
			+ "\1\u01da\25\0\1\u01ca\24\0\2\6\1\0\3\6\1\u01e4"
			+ "\25\6\1\0\2\6\1\0\1\6\15\0\2\6\1\u01cd"
			+ "\2\6\1\u01ee\1\0\25\6\1\0\2\6\1\0\1\6"
			+ "\17\0\1\u01ef\1\u01df\1\u01c7\3\0\1\u01d3\3\0\1\u01d4"
			+ "\6\0\1\u01d3\32\0\2\6\1\u01c7\1\6\1\u01f0\1\6"
			+ "\1\0\25\6\1\0\2\6\1\0\1\6\17\0\1\u01f1"
			+ "\1\u01df\1\u01c7\7\0\1\u01d4\41\0\2\6\1\u01df\1\u01f2"
			+ "\2\6\1\0\25\6\1\0\2\6\1\0\1\6\15\0"
			+ "\2\6\1\u01d4\3\6\1\0\5\6\1\u01f3\17\6\1\0"
			+ "\2\6\1\0\1\6\15\0\2\6\1\u01d3\3\6\1\0"
			+ "\1\6\1\u01f4\12\6\1\u01f4\10\6\1\0\2\6\1\0"
			+ "\1\6\15\0\2\6\1\u01da\1\u01f5\2\6\1\0\25\6"
			+ "\1\0\2\6\1\0\1\6\17\0\1\u01f6\1\0\1\u01c8"
			+ "\25\0\1\u01d6\23\0\2\6\1\u01c8\1\6\1\u01f7\1\6"
			+ "\1\0\25\6\1\0\2\6\1\0\1\6\15\0\2\6"
			+ "\1\u01d6\3\6\1\0\23\6\1\u01f8\1\6\1\0\2\6"
			+ "\1\0\1\6\15\0\2\6\1\0\3\6\1\u01be\25\6"
			+ "\1\0\2\6\1\0\1\6\15\0\1\6\1\u01f9\1\u01bf"
			+ "\3\6\1\0\25\6\1\0\2\6\1\0\1\6\15\0"
			+ "\2\6\1\u01dc\1\u01fa\2\6\1\0\25\6\1\0\2\6"
			+ "\1\0\1\6\15\0\2\6\1\u01e6\1\u01fb\2\6\1\0"
			+ "\25\6\1\0\2\6\1\0\1\6\15\0\2\6\1\u01ca"
			+ "\3\6\1\0\22\6\1\u01fc\2\6\1\0\2\6\1\0"
			+ "\1\6\15\0\2\6\1\0\3\6\1\u01c6\25\6\1\0"
			+ "\2\6\1\0\1\6\15\0\2\6\1\u01cb\2\6\1\u01fd"
			+ "\1\0\25\6\1\0\2\6\1\0\1\6\15\0\2\6"
			+ "\1\u01d9\3\6\1\0\22\6\1\u01fe\2\6\1\0\2\6"
			+ "\1\0\1\6\23\0\1\u01ff\47\0\2\6\1\0\3\6"
			+ "\1\u01ff\25\6\1\0\2\6\1\0\1\6\17\0\1\u0200"
			+ "\5\0\1\u0200\12\0\1\u0200\32\0\2\6\1\u0200\3\6"
			+ "\1\0\1\6\1\u0201\12\6\1\u0201\10\6\1\0\2\6"
			+ "\1\0\1\6\17\0\1\u0202\3\0\1\u01be\4\0\1\u0202"
			+ "\44\0\1\u0203\22\0\1\u0203\32\0\1\u0203\3\0\1\u01ff"
			+ "\16\0\1\u0203\32\0\1\u0204\14\0\1\u0204\40\0\1\u0205"
			+ "\1\0\1\u0206\2\0\1\u0207\1\u0208\6\0\1\u0204\3\0"
			+ "\1\u0208\34\0\1\u0206\1\0\1\u0206\53\0\1\u0208\5\0"
			+ "\1\u0208\12\0\1\u0208\34\0\1\u0207\4\0\1\u0207\50\0"
			+ "\1\u0209\3\0\1\u01c6\4\0\1\u0209\44\0\1\u020a\11\0"
			+ "\1\u020a\42\0\2\u020b\54\0\1\u020b\1\u020c\5\0\1\u020d"
			+ "\12\0\1\u020d\34\0\1\u020d\5\0\1\u020d\12\0\1\u020d"
			+ "\34\0\1\u0200\3\0\1\u020e\1\0\1\u0200\12\0\1\u0200"
			+ "\40\0\1\u020e\47\0\1\u020f\1\0\1\u0210\2\0\1\u0211"
			+ "\1\u01ce\4\0\1\u0202\42\0\1\u0212\1\u020b\1\u0213\2\0"
			+ "\1\u0214\1\u0215\1\0\1\u0216\3\0\1\u020a\6\0\1\u0216"
			+ "\1\0\1\u0203\32\0\1\u0200\3\0\1\u01ff\1\0\1\u0200"
			+ "\12\0\1\u0200\33\0\1\u020b\1\u020a\11\0\1\u020a\41\0"
			+ "\1\u0212\1\0\1\u0212\55\0\1\u0214\2\0\1\u0214\50\0"
			+ "\1\u0212\1\0\1\u0217\5\0\1\u020d\12\0\1\u020d\34\0"
			+ "\1\u0216\3\0\1\u020e\1\0\1\u0216\12\0\1\u0216\34\0"
			+ "\1\u0214\2\0\1\u0214\1\u01ff\51\0\1\u0218\11\0\1\u0218"
			+ "\41\0\1\u020f\1\0\1\u0219\2\0\1\u0211\1\u01e4\51\0"
			+ "\1\u021a\2\0\1\u0214\2\0\1\u0200\12\0\1\u0200\32\0"
			+ "\1\u0212\1\0\1\u0212\3\0\1\u020e\51\0\1\u021a\2\0"
			+ "\1\u0214\2\0\1\u0200\3\0\1\u020a\6\0\1\u0200\32\0"
			+ "\2\6\1\0\3\6\1\u020e\25\6\1\0\2\6\1\0"
			+ "\1\6\15\0\1\u0212\1\0\1\u021b\2\0\1\u0214\6\0"
			+ "\1\u020a\41\0\2\6\1\u020a\3\6\1\0\5\6\1\u021c"
			+ "\17\6\1\0\2\6\1\0\1\6\17\0\1\u0214\2\0"
			+ "\1\u0214\6\0\1\u020a\41\0\2\6\1\u0214\2\6\1\u021d"
			+ "\1\0\25\6\1\0\2\6\1\0\1\6\15\0\1\u021e"
			+ "\1\6\1\u0212\3\6\1\0\25\6\1\0\2\6\1\0"
			+ "\1\6\15\0\1\6\1\u021f\1\u020b\3\6\1\0\25\6"
			+ "\1\0\2\6\1\0\1\6\15\0\2\6\1\u0203\3\6"
			+ "\1\0\16\6\1\u0220\6\6\1\0\2\6\1\0\1\6"
			+ "\15\0\2\6\1\u020d\3\6\1\0\1\6\1\u0221\12\6"
			+ "\1\u0221\10\6\1\0\2\6\1\0\1\6\17\0\1\u0222"
			+ "\2\0\1\u0223\1\u01ff\1\u0224\5\0\1\u0225\40\0\1\u0226"
			+ "\1\0\1\u0226\53\0\1\u0227\1\6\1\u0226\3\6\1\0"
			+ "\25\6\1\0\2\6\1\0\1\6\17\0\1\u0228\22\0"
			+ "\1\u0228\36\0\1\u0229\51\0\1\u022a\11\0\1\u022a\43\0"
			+ "\1\u022b\1\u022c\5\0\1\u022d\1\0\1\u022e\1\u022a\43\0"
			+ "\1\u022e\10\0\1\u022e\44\0\2\u022c\54\0\1\u022d\6\0"
			+ "\1\u022d\46\0\1\u022f\22\0\1\u022f\36\0\1\u0230\51\0"
			+ "\1\u0231\3\0\1\u020e\1\u0231\50\0\1\u0232\14\0\1\u0232"
			+ "\40\0\1\u0233\1\0\1\u0234\12\0\1\u0232\5\0\1\u0228"
			+ "\32\0\1\u0234\1\0\1\u0234\53\0\1\u0235\2\0\1\u0235"
			+ "\50\0\1\u0226\1\0\1\u0236\2\0\1\u0235\1\u0229\51\0"
			+ "\1\u0237\2\0\1\u0223\1\u0215\1\u0238\5\0\1\u0225\40\0"
			+ "\1\u0226\1\0\1\u0226\3\0\1\u0230\51\0\1\u0235\2\0"
			+ "\1\u0235\1\u0230\51\0\1\u0239\11\0\1\u0239\43\0\1\u023a"
			+ "\1\0\1\u0234\12\0\1\u0232\36\0\2\6\1\u0235\2\6"
			+ "\1\u023b\1\0\25\6\1\0\2\6\1\0\1\6\15\0"
			+ "\2\6\1\0\3\6\1\u0229\25\6\1\0\2\6\1\0"
			+ "\1\6\15\0\2\6\1\0\3\6\1\u0230\25\6\1\0"
			+ "\2\6\1\0\1\6\17\0\1\u023c\1\0\1\u023d\2\0"
			+ "\1\u023e\1\u023f\12\0\1\u023f\34\0\1\u023d\1\0\1\u023d"
			+ "\53\0\1\u023f\5\0\1\u023f\12\0\1\u023f\34\0\1\u023e"
			+ "\4\0\1\u023e\50\0\2\u0240\52\0\2\6\1\u0240\1\u0241"
			+ "\2\6\1\0\25\6\1\0\2\6\1\0\1\6\17\0"
			+ "\1\u0242\3\0\1\u0229\17\0\1\u0242\31\0\1\u0243\16\0"
			+ "\1\u0243\36\0\1\u0244\1\u0245\10\0\1\u0246\1\0\1\u0247"
			+ "\2\0\1\u0243\36\0\1\u0247\13\0\1\u0247\41\0\2\u0245"
			+ "\54\0\1\u0246\11\0\1\u0246\43\0\1\u0248\3\0\1\u0230"
			+ "\17\0\1\u0248\31\0\1\u0249\5\0\1\u0249\12\0\1\u0249"
			+ "\34\0\1\u024a\11\0\1\u024a\43\0\1\u024b\10\0\1\u024c"
			+ "\1\u024a\43\0\1\u024c\10\0\1\u024c\44\0\1\u024d\1\0"
			+ "\1\u023d\2\0\1\u023e\1\u024e\12\0\1\u024e\34\0\1\u024e"
			+ "\5\0\1\u024e\12\0\1\u024e\34\0\1\u024f\1\u0250\5\0"
			+ "\1\u0251\1\0\1\u0252\44\0\1\u0252\10\0\1\u0252\44\0"
			+ "\2\u0250\54\0\1\u0251\6\0\1\u0251\46\0\1\u0253\27\0"
			+ "\1\u0253\23\0\2\6\1\u0253\3\6\1\0\23\6\1\u0254"
			+ "\1\6\1\0\2\6\1\0\1\6\17\0\2\u0255\54\0"
			+ "\1\u0256\17\0\1\u0256\1\0\1\u0256\33\0\1\u0257\1\u0258"
			+ "\6\0\1\u0259\7\0\1\u0256\1\0\1\u0256\33\0\1\u0259"
			+ "\7\0\1\u0259\45\0\2\u0258\54\0\2\u025a\54\0\1\u025b"
			+ "\2\0\1\u025b\52\0\1\u025c\16\0\1\u025c\36\0\1\u025d"
			+ "\11\0\1\u025e\4\0\1\u025c\36\0\1\u025e\11\0\1\u025e"
			+ "\43\0\1\u025f\1\u0250\1\0\1\u025b\3\0\1\u0251\1\0"
			+ "\1\u0252\44\0\1\u0260\2\0\1\u025b\3\0\1\u0251\46\0"
			+ "\1\u0261\1\u0262\10\0\1\u0263\1\0\1\u0264\41\0\1\u0264"
			+ "\13\0\1\u0264\41\0\2\u0262\54\0\1\u0263\11\0\1\u0263"
			+ "\43\0\1\u0265\22\0\1\u0265\32\0\1\u0266\5\0\1\u0266"
			+ "\12\0\1\u0266\34\0\1\u0267\22\0\1\u0267\32\0\1\u0268"
			+ "\14\0\1\u0268\40\0\1\u0269\17\0\1\u0269\1\0\1\u0269"
			+ "\33\0\1\u026a\1\u026b\16\0\1\u0269\1\0\1\u0269\33\0"
			+ "\2\u026b\54\0\1\u0261\1\u0262\10\0\1\u0263\1\0\1\u0264"
			+ "\1\u0268\40\0\1\u026c\1\u0262\13\0\1\u0268\40\0\1\u026d"
			+ "\1\u026e\6\0\1\u026d\45\0\1\u026d\7\0\1\u026d\45\0"
			+ "\2\u026e\54\0\1\u026f\20\0\2\u026f\30\0";

	private static int[] zzUnpackTrans() {
		int[] result = new int[21850];
		int offset = 0;
		offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackTrans(String packed, int offset, int[] result) {
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			value--;
			do
				result[j++] = value;
			while (--count > 0);
		}
		return j;
	}

	/* error codes */
	private static final int ZZ_UNKNOWN_ERROR = 0;
	private static final int ZZ_NO_MATCH = 1;
	private static final int ZZ_PUSHBACK_2BIG = 2;

	/* error messages for the codes above */
	private static final String ZZ_ERROR_MSG[] = {
			"Unkown internal scanner error", "Error: could not match input",
			"Error: pushback value was too large" };

	/**
	 * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
	 */
	private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

	private static final String ZZ_ATTRIBUTE_PACKED_0 = "\1\0\3\1\1\0\24\1\4\11\1\1\1\11\1\1"
			+ "\5\11\1\0\3\1\1\0\2\1\1\0\3\1\3\0"
			+ "\1\1\6\0\1\1\1\0\7\1\1\0\2\1\1\0"
			+ "\3\1\1\0\3\1\1\0\1\1\1\0\1\1\1\0"
			+ "\1\1\1\0\5\1\2\0\2\1\1\0\3\1\1\0"
			+ "\4\1\2\0\2\1\1\0\1\1\1\0\5\11\1\0"
			+ "\1\1\4\0\1\1\1\0\2\1\1\0\1\1\5\0"
			+ "\1\1\1\0\1\1\1\0\1\1\1\0\1\11\1\1"
			+ "\1\11\1\1\3\0\2\11\2\0\1\11\2\0\1\1"
			+ "\1\11\3\0\1\1\1\0\1\1\1\0\1\1\1\11"
			+ "\2\0\1\11\1\1\1\0\1\11\2\0\2\1\3\0"
			+ "\1\1\1\0\1\11\2\0\17\1\1\0\1\1\5\0"
			+ "\1\1\1\0\7\1\2\0\2\1\1\0\3\1\1\0"
			+ "\4\1\1\0\1\1\3\0\3\1\1\0\2\1\1\0"
			+ "\5\1\1\0\1\1\1\0\1\11\1\1\2\0\4\1"
			+ "\1\0\3\1\2\0\1\1\2\0\1\1\2\11\4\0"
			+ "\4\1\5\0\1\11\12\0\1\1\3\0\1\1\1\0"
			+ "\1\11\1\1\1\11\2\0\1\11\1\1\1\0\1\1"
			+ "\3\0\1\1\3\0\1\1\1\0\1\1\1\0\6\1"
			+ "\1\0\12\1\1\0\5\1\1\0\12\1\1\0\2\1"
			+ "\1\0\1\1\1\11\2\1\1\11\2\1\1\0\1\1"
			+ "\11\0\1\1\1\11\2\0\3\1\1\0\1\1\4\0"
			+ "\2\1\5\0\1\11\3\0\1\11\1\0\1\1\2\0"
			+ "\2\1\1\0\1\1\1\11\1\1\5\0\7\1\1\0"
			+ "\1\1\1\0\4\1\1\0\17\1\1\0\1\1\1\0"
			+ "\1\1\15\0\1\11\3\0\2\1\1\0\1\1\2\0"
			+ "\1\1\1\11\1\1\1\0\2\11\1\1\1\11\2\1"
			+ "\1\11\2\1\1\0\1\1\1\0\1\1\1\11\2\0"
			+ "\26\1\2\0\1\1\10\0\2\11\1\1\6\0\1\1"
			+ "\1\11\5\0\10\1\5\0\1\1\1\11\6\0\1\11"
			+ "\3\0\1\1\1\0\1\11\1\1\2\0\1\11\1\0"
			+ "\1\1\5\0\1\1\2\0\1\1\2\0\1\11\13\0"
			+ "\1\11\1\1\2\0\1\1\2\11\7\0\1\1\2\0"
			+ "\5\11\1\0\1\1\1\11\1\1\3\11";

	private static int[] zzUnpackAttribute() {
		int[] result = new int[623];
		int offset = 0;
		offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAttribute(String packed, int offset, int[] result) {
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do
				result[j++] = value;
			while (--count > 0);
		}
		return j;
	}

	/** the input device */
	private java.io.Reader zzReader;

	/** the current state of the DFA */
	private int zzState;

	/** the current lexical state */
	private int zzLexicalState = YYINITIAL;

	/**
	 * this buffer contains the current text to be matched and is the source of
	 * the yytext() string
	 */
	private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

	/** the textposition at the last accepting state */
	private int zzMarkedPos;

	/** the current text position in the buffer */
	private int zzCurrentPos;

	/** startRead marks the beginning of the yytext() string in the buffer */
	private int zzStartRead;

	/**
	 * endRead marks the last character in the buffer, that has been read from
	 * input
	 */
	private int zzEndRead;

	/** number of newlines encountered up to the start of the matched text */
	private int yyline;

	/** the number of characters up to the start of the matched text */
	private int yychar;

	/**
	 * the number of characters from the last newline up to the start of the
	 * matched text
	 */
	private int yycolumn;

	/**
	 * zzAtBOL == true <=> the scanner is currently at the beginning of a line
	 */
	private boolean zzAtBOL = true;

	/** zzAtEOF == true <=> the scanner is at the EOF */
	private boolean zzAtEOF;

	/** denotes if the user-EOF-code has already been executed */
	private boolean zzEOFDone;

	/* user code: */
	private int count;
	private ErrorMsg errorMsg;
	StringBuffer stringvalue = new StringBuffer();

	private void err(int pos, String s) {
		errorMsg.error(pos, s);
	}

	private void err(String s) {
		err(yychar, s);
	}

	private java_cup.runtime.Symbol tok(int kind, Object value) {
		return new java_cup.runtime.Symbol(kind, yychar, yychar + yylength(),
				value);
	}

	public Yylex(java.io.InputStream s, ErrorMsg e) {
		this(s);
		errorMsg = e;
	}

	/**
	 * Creates a new scanner There is also a java.io.InputStream version of this
	 * constructor.
	 * 
	 * @param in
	 *            the java.io.Reader to read input from.
	 */
	Yylex(java.io.Reader in) {
		this.zzReader = in;
	}

	/**
	 * Creates a new scanner. There is also java.io.Reader version of this
	 * constructor.
	 * 
	 * @param in
	 *            the java.io.Inputstream to read input from.
	 */
	Yylex(java.io.InputStream in) {
		this(new java.io.InputStreamReader(in));
	}

	/**
	 * Unpacks the compressed character translation table.
	 * 
	 * @param packed
	 *            the packed character translation table
	 * @return the unpacked character translation table
	 */
	private static char[] zzUnpackCMap(String packed) {
		char[] map = new char[0x10000];
		int i = 0; /* index in packed string */
		int j = 0; /* index in unpacked array */
		while (i < 162) {
			int count = packed.charAt(i++);
			char value = packed.charAt(i++);
			do
				map[j++] = value;
			while (--count > 0);
		}
		return map;
	}

	/**
	 * Refills the input buffer.
	 * 
	 * @return <code>false</code>, iff there was new input.
	 * 
	 * @exception java.io.IOException
	 *                if any I/O-Error occurs
	 */
	private boolean zzRefill() throws java.io.IOException {

		/* first: make room (if you can) */
		if (zzStartRead > 0) {
			System.arraycopy(zzBuffer, zzStartRead, zzBuffer, 0, zzEndRead
					- zzStartRead);

			/* translate stored positions */
			zzEndRead -= zzStartRead;
			zzCurrentPos -= zzStartRead;
			zzMarkedPos -= zzStartRead;
			zzStartRead = 0;
		}

		/* is the buffer big enough? */
		if (zzCurrentPos >= zzBuffer.length) {
			/* if not: blow it up */
			char newBuffer[] = new char[zzCurrentPos * 2];
			System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
			zzBuffer = newBuffer;
		}

		/* finally: fill the buffer with new input */
		int numRead = zzReader.read(zzBuffer, zzEndRead, zzBuffer.length
				- zzEndRead);

		if (numRead > 0) {
			zzEndRead += numRead;
			return false;
		}
		// unlikely but not impossible: read 0 characters, but not at end of
		// stream
		if (numRead == 0) {
			int c = zzReader.read();
			if (c == -1) {
				return true;
			} else {
				zzBuffer[zzEndRead++] = (char) c;
				return false;
			}
		}

		// numRead < 0
		return true;
	}

	/**
	 * Closes the input stream.
	 */
	public final void yyclose() throws java.io.IOException {
		zzAtEOF = true; /* indicate end of file */
		zzEndRead = zzStartRead; /* invalidate buffer */

		if (zzReader != null)
			zzReader.close();
	}

	/**
	 * Resets the scanner to read from a new input stream. Does not close the
	 * old reader.
	 * 
	 * All internal variables are reset, the old input stream <b>cannot</b> be
	 * reused (internal buffer is discarded and lost). Lexical state is set to
	 * <tt>ZZ_INITIAL</tt>.
	 * 
	 * @param reader
	 *            the new input stream
	 */
	public final void yyreset(java.io.Reader reader) {
		zzReader = reader;
		zzAtBOL = true;
		zzAtEOF = false;
		zzEOFDone = false;
		zzEndRead = zzStartRead = 0;
		zzCurrentPos = zzMarkedPos = 0;
		yyline = yychar = yycolumn = 0;
		zzLexicalState = YYINITIAL;
	}

	/**
	 * Returns the current lexical state.
	 */
	public final int yystate() {
		return zzLexicalState;
	}

	/**
	 * Enters a new lexical state
	 * 
	 * @param newState
	 *            the new lexical state
	 */
	public final void yybegin(int newState) {
		zzLexicalState = newState;
	}

	/**
	 * Returns the text matched by the current regular expression.
	 */
	public final String yytext() {
		return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
	}

	/**
	 * Returns the character at position <tt>pos</tt> from the matched text.
	 * 
	 * It is equivalent to yytext().charAt(pos), but faster
	 * 
	 * @param pos
	 *            the position of the character to fetch. A value from 0 to
	 *            yylength()-1.
	 * 
	 * @return the character at position pos
	 */
	public final char yycharat(int pos) {
		return zzBuffer[zzStartRead + pos];
	}

	/**
	 * Returns the length of the matched text region.
	 */
	public final int yylength() {
		return zzMarkedPos - zzStartRead;
	}

	/**
	 * Reports an error that occured while scanning.
	 * 
	 * In a wellformed scanner (no or only correct usage of yypushback(int) and
	 * a match-all fallback rule) this method will only be called with things
	 * that "Can't Possibly Happen". If this method is called, something is
	 * seriously wrong (e.g. a JFlex bug producing a faulty scanner etc.).
	 * 
	 * Usual syntax/scanner level error handling should be done in error
	 * fallback rules.
	 * 
	 * @param errorCode
	 *            the code of the errormessage to display
	 */
	private void zzScanError(int errorCode) {
		String message;
		try {
			message = ZZ_ERROR_MSG[errorCode];
		} catch (ArrayIndexOutOfBoundsException e) {
			message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
		}

		throw new Error(message);
	}

	/**
	 * Pushes the specified amount of characters back into the input stream.
	 * 
	 * They will be read again by then next call of the scanning method
	 * 
	 * @param number
	 *            the number of characters to be read again. This number must
	 *            not be greater than yylength()!
	 */
	public void yypushback(int number) {
		if (number > yylength())
			zzScanError(ZZ_PUSHBACK_2BIG);

		zzMarkedPos -= number;
	}

	/**
	 * Resumes scanning until the next regular expression is matched, the end of
	 * input is encountered or an I/O-Error occurs.
	 * 
	 * @return the next token
	 * @exception java.io.IOException
	 *                if any I/O-Error occurs
	 */
	public java_cup.runtime.Symbol nextToken() throws java.io.IOException {
		int zzInput;
		int zzAction;

		// cached fields:
		int zzCurrentPosL;
		int zzMarkedPosL;
		int zzEndReadL = zzEndRead;
		char[] zzBufferL = zzBuffer;
		char[] zzCMapL = ZZ_CMAP;

		int[] zzTransL = ZZ_TRANS;
		int[] zzRowMapL = ZZ_ROWMAP;
		int[] zzAttrL = ZZ_ATTRIBUTE;

		while (true) {
			zzMarkedPosL = zzMarkedPos;

			yychar += zzMarkedPosL - zzStartRead;

			zzAction = -1;

			zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

			zzState = ZZ_LEXSTATE[zzLexicalState];

			zzForAction: {
				while (true) {

					if (zzCurrentPosL < zzEndReadL)
						zzInput = zzBufferL[zzCurrentPosL++];
					else if (zzAtEOF) {
						zzInput = YYEOF;
						break zzForAction;
					} else {
						// store back cached positions
						zzCurrentPos = zzCurrentPosL;
						zzMarkedPos = zzMarkedPosL;
						boolean eof = zzRefill();
						// get translated positions and possibly new buffer
						zzCurrentPosL = zzCurrentPos;
						zzMarkedPosL = zzMarkedPos;
						zzBufferL = zzBuffer;
						zzEndReadL = zzEndRead;
						if (eof) {
							zzInput = YYEOF;
							break zzForAction;
						} else {
							zzInput = zzBufferL[zzCurrentPosL++];
						}
					}
					int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
					if (zzNext == -1)
						break zzForAction;
					zzState = zzNext;

					int zzAttributes = zzAttrL[zzState];
					if ((zzAttributes & 1) == 1) {
						zzAction = zzState;
						zzMarkedPosL = zzCurrentPosL;
						if ((zzAttributes & 8) == 8)
							break zzForAction;
					}

				}
			}

			// store back cached position
			zzMarkedPos = zzMarkedPosL;

			switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
			case 31: {
				return tok(sym.ADD, null);
			}
			case 79:
				break;
			case 21: {
				return tok(sym.ON, null);
			}
			case 80:
				break;
			case 72: {
				return tok(sym.DROPCOLUMN, null);
			}
			case 81:
				break;
			case 42: {
				return tok(sym.DESC, null);
			}
			case 82:
				break;
			case 11: {
				return tok(sym.LT, null);
			}
			case 83:
				break;
			case 67: {
				return tok(sym.REFERENCES, null);
			}
			case 84:
				break;
			case 55: {
				return tok(sym.VALUES, null);
			}
			case 85:
				break;
			case 5: {
				stringvalue.setLength(0);
				yybegin(STRINGSTATE);
			}
			case 86:
				break;
			case 62: {
				return tok(sym.ORDERBY, null);
			}
			case 87:
				break;
			case 78: {
				return tok(sym.ALTERCOLUMN, null);
			}
			case 88:
				break;
			case 2: {
				return tok(sym.ID, yytext().toLowerCase());
			}
			case 89:
				break;
			case 74: {
				return tok(sym.INSERTINTO, null);
			}
			case 90:
				break;
			case 41: {
				return tok(sym.TRUE, null);
			}
			case 91:
				break;
			case 57: {
				return tok(sym.DOUBLE, null);
			}
			case 92:
				break;
			case 24: {
				return tok(sym.LE, null);
			}
			case 93:
				break;
			case 13: {
				return tok(sym.DIVIDE, null);
			}
			case 94:
				break;
			case 66: {
				return tok(sym.DROPVIEW, null);
			}
			case 95:
				break;
			case 73: {
				return tok(sym.FOREIGNKEY, null);
			}
			case 96:
				break;
			case 69: {
				return tok(sym.DROPTABLE, null);
			}
			case 97:
				break;
			case 7: {
				return tok(sym.LPAREN, null);
			}
			case 98:
				break;
			case 32: {
				return tok(sym.MAX, null);
			}
			case 99:
				break;
			case 6: {
				return tok(sym.DOT, null);
			}
			case 100:
				break;
			case 51: {
				return tok(sym.FALSE, null);
			}
			case 101:
				break;
			case 68: {
				return tok(sym.DROPINDEX, null);
			}
			case 102:
				break;
			case 30: {
				return tok(sym.MIN, null);
			}
			case 103:
				break;
			case 63: {
				return tok(sym.GROUPBY, null);
			}
			case 104:
				break;
			case 36: {
				return tok(sym.INT, null);
			}
			case 105:
				break;
			case 75: {
				return tok(sym.ALTERTABLE, null);
			}
			case 106:
				break;
			case 26: {
				stringvalue.append("'");
			}
			case 107:
				break;
			case 60: {
				return tok(sym.VARCHAR, null);
			}
			case 108:
				break;
			case 44: {
				return tok(sym.NULL, null);
			}
			case 109:
				break;
			case 10: {
				return tok(sym.EQ, null);
			}
			case 110:
				break;
			case 54: {
				return tok(sym.HAVING, null);
			}
			case 111:
				break;
			case 53: {
				return tok(sym.UNIQUE, null);
			}
			case 112:
				break;
			case 40: {
				return tok(sym.FROM, null);
			}
			case 113:
				break;
			case 28: {
				return tok(sym.ALL, null);
			}
			case 114:
				break;
			case 23: {
				return tok(sym.NEQ, null);
			}
			case 115:
				break;
			case 20: {
				return tok(sym.AS, null);
			}
			case 116:
				break;
			case 38: {
				return tok(sym.REALVALUE, new Double(yytext()));
			}
			case 117:
				break;
			case 47: {
				return tok(sym.COUNT, null);
			}
			case 118:
				break;
			case 12: {
				return tok(sym.STAR, null);
			}
			case 119:
				break;
			case 70: {
				return tok(sym.CREATEVIEW, null);
			}
			case 120:
				break;
			case 77: {
				return tok(sym.CREATETABLE, null);
			}
			case 121:
				break;
			case 29: {
				return tok(sym.SET, null);
			}
			case 122:
				break;
			case 61: {
				return tok(sym.DEFAULT, null);
			}
			case 123:
				break;
			case 56: {
				return tok(sym.DELETE, null);
			}
			case 124:
				break;
			case 43: {
				return tok(sym.LIKE, null);
			}
			case 125:
				break;
			case 34: {
				return tok(sym.ANY, null);
			}
			case 126:
				break;
			case 37: {
				return tok(sym.NOT, null);
			}
			case 127:
				break;
			case 1: {
				stringvalue.append(yytext());
			}
			case 128:
				break;
			case 64: {
				return tok(sym.DISTINCT, null);
			}
			case 129:
				break;
			case 18: {
				return tok(sym.OR, null);
			}
			case 130:
				break;
			case 27: {
				return tok(sym.ASC, null);
			}
			case 131:
				break;
			case 15: {
				return tok(sym.MINUS, null);
			}
			case 132:
				break;
			case 22: {
				return tok(sym.GE, null);
			}
			case 133:
				break;
			case 76: {
				return tok(sym.CREATEINDEX, null);
			}
			case 134:
				break;
			case 8: {
				return tok(sym.RPAREN, null);
			}
			case 135:
				break;
			case 9: {
				return tok(sym.GT, null);
			}
			case 136:
				break;
			case 33: {
				return tok(sym.SUM, null);
			}
			case 137:
				break;
			case 25: {
				return tok(sym.AND, null);
			}
			case 138:
				break;
			case 71: {
				return tok(sym.PRIMARYKEY, null);
			}
			case 139:
				break;
			case 50: {
				return tok(sym.UNION, null);
			}
			case 140:
				break;
			case 39: {
				return tok(sym.CHAR, null);
			}
			case 141:
				break;
			case 49: {
				return tok(sym.FLOAT, null);
			}
			case 142:
				break;
			case 45: {
				return tok(sym.BOOL, null);
			}
			case 143:
				break;
			case 59: {
				return tok(sym.DECIMAL, null);
			}
			case 144:
				break;
			case 52: {
				return tok(sym.SELECT, null);
			}
			case 145:
				break;
			case 4: {
				return tok(sym.INTVALUE, new Integer(yytext()));
			}
			case 146:
				break;
			case 17: {
				yybegin(YYINITIAL);
				return tok(sym.STRINGVALUE, stringvalue.toString());
			}
			case 147:
				break;
			case 14: {
				return tok(sym.PLUS, null);
			}
			case 148:
				break;
			case 35: {
				return tok(sym.AVG, null);
			}
			case 149:
				break;
			case 65: {
				return tok(sym.NOTNULL, null);
			}
			case 150:
				break;
			case 19: {
				return tok(sym.IN, null);
			}
			case 151:
				break;
			case 48: {
				return tok(sym.WHERE, null);
			}
			case 152:
				break;
			case 16: {
				return tok(sym.COMMA, null);
			}
			case 153:
				break;
			case 46: {
				return tok(sym.CHECK, null);
			}
			case 154:
				break;
			case 58: {
				return tok(sym.UPDATE, null);
			}
			case 155:
				break;
			case 3: {
			}
			case 156:
				break;
			default:
				if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
					zzAtEOF = true;
					{
						{
							if (yystate() == STRINGSTATE)
								err("String error");
							return tok(sym.EOF, null);
						}
					}
				} else {
					zzScanError(ZZ_NO_MATCH);
				}
			}
		}
	}

}
