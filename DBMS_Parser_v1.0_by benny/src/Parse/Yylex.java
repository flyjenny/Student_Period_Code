/* The following code was generated by JFlex 1.4.3 on 11-7-8 下午4:05 */

package Parse;

import ErrorMsg.ErrorMsg;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 11-7-8 下午4:05 from the specification file
 * <tt>/home/micro2fly/workspace/lex_v1.8.flex</tt>
 */
class Yylex implements Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRINGSTATE = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\2\35\1\0\2\35\22\0\1\7\6\0\1\40\1\43\1\44"+
    "\1\50\1\52\1\54\1\53\1\42\1\51\12\37\2\0\1\47\1\46"+
    "\1\45\2\0\1\5\1\14\1\1\1\12\1\4\1\30\1\32\1\34"+
    "\1\10\1\36\1\27\1\15\1\25\1\11\1\20\1\21\1\31\1\2"+
    "\1\33\1\6\1\22\1\16\1\17\1\13\1\26\1\36\4\0\1\41"+
    "\1\0\1\5\1\14\1\1\1\12\1\4\1\30\1\32\1\34\1\10"+
    "\1\36\1\27\1\15\1\23\1\24\1\20\1\21\1\31\1\2\1\33"+
    "\1\6\1\22\1\16\1\17\1\13\1\26\1\36\1\0\1\3\uff83\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\0\3\2\1\3\17\2\1\4"+
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\1\1\21\1\2\1\0"+
    "\2\2\1\0\1\2\1\22\1\23\3\0\1\24\6\0"+
    "\1\23\1\0\1\23\4\2\1\23\1\2\1\0\2\24"+
    "\1\0\3\2\1\0\3\2\1\0\1\2\1\0\1\2"+
    "\1\0\1\2\1\0\1\2\1\22\2\25\1\2\2\0"+
    "\2\2\1\0\3\2\1\0\4\2\2\0\2\2\1\0"+
    "\1\2\1\0\1\26\1\27\1\30\1\31\1\0\1\2"+
    "\4\0\1\2\1\0\2\2\1\0\1\2\5\0\1\32"+
    "\1\0\1\33\1\0\1\34\1\0\1\35\1\36\1\37"+
    "\1\33\3\0\1\40\1\41\2\0\1\42\2\0\2\34"+
    "\3\0\1\37\1\0\1\35\1\0\1\41\1\43\1\0"+
    "\1\44\1\0\1\36\1\33\1\0\1\33\2\0\2\45"+
    "\3\0\1\40\1\0\1\32\2\0\1\33\1\44\1\41"+
    "\1\36\1\2\1\33\1\42\1\32\1\2\2\43\1\2"+
    "\2\45\1\2\1\0\1\2\5\0\1\2\1\0\7\2"+
    "\2\0\2\2\1\0\3\2\1\0\2\2\1\37\1\35"+
    "\1\0\1\2\3\0\3\2\1\0\1\2\1\34\1\0"+
    "\1\34\1\2\1\40\1\2\1\46\1\0\1\2\1\0"+
    "\2\47\2\0\1\2\1\47\1\2\1\47\1\0\1\2"+
    "\1\50\1\51\2\0\1\50\2\0\2\50\1\51\4\0"+
    "\1\52\1\47\1\50\1\53\5\0\1\54\12\0\1\54"+
    "\3\0\1\50\1\0\1\55\1\51\1\53\2\0\2\52"+
    "\1\0\1\52\3\0\1\53\3\0\1\55\1\0\1\47"+
    "\1\0\1\2\1\51\1\2\1\54\1\2\1\52\1\0"+
    "\1\52\1\2\1\52\2\2\1\52\2\2\1\55\1\53"+
    "\1\0\5\2\1\0\3\2\3\50\4\2\1\0\2\2"+
    "\1\0\1\2\2\56\3\57\1\56\1\0\1\2\11\0"+
    "\1\56\1\60\2\0\1\56\1\60\1\61\1\0\1\62"+
    "\4\0\2\61\5\0\1\62\3\0\1\63\1\0\1\62"+
    "\2\0\2\63\1\0\2\61\1\57\5\0\1\63\2\62"+
    "\1\61\1\57\2\2\1\0\1\2\1\0\4\2\1\0"+
    "\2\2\1\60\2\2\1\62\2\2\2\63\1\61\4\2"+
    "\1\0\1\2\1\0\1\2\15\0\1\64\3\0\2\65"+
    "\1\0\1\64\2\0\1\66\1\67\1\70\1\0\1\66"+
    "\1\71\2\65\1\64\2\70\2\72\1\0\1\66\1\0"+
    "\1\65\1\72\2\0\2\64\1\66\1\65\1\71\1\2"+
    "\1\70\1\2\2\70\2\2\1\71\1\67\1\2\1\67"+
    "\1\2\1\65\1\72\1\2\1\64\1\66\2\0\1\2"+
    "\10\0\1\73\2\74\6\0\2\75\5\0\2\75\1\73"+
    "\1\75\1\2\1\74\2\2\5\0\1\2\1\76\6\0"+
    "\1\77\3\0\1\76\1\0\2\100\2\0\1\101\1\0"+
    "\1\100\5\0\1\2\2\0\1\102\2\0\1\102\13\0"+
    "\2\103\2\0\1\104\1\105\1\104\7\0\1\106\2\0"+
    "\1\106\1\107\1\110\1\111\1\112\1\0\2\113\1\112"+
    "\1\114\1\115\1\116";

  private static int [] zzUnpackAction() {
    int [] result = new int[622];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\55\0\132\0\207\0\264\0\341\0\u010e\0\u013b"+
    "\0\u0168\0\u0195\0\u01c2\0\u01ef\0\u021c\0\u0249\0\u0276\0\u02a3"+
    "\0\u02d0\0\u02fd\0\u032a\0\u0357\0\u0384\0\u03b1\0\u03de\0\u040b"+
    "\0\u0438\0\u0465\0\u0465\0\u0465\0\u0465\0\u0492\0\u0465\0\u04bf"+
    "\0\u0465\0\u0465\0\u0465\0\u0465\0\u0465\0\u04ec\0\u0519\0\u0546"+
    "\0\u0573\0\u05a0\0\u05cd\0\u05fa\0\u0627\0\u0654\0\u0681\0\u06ae"+
    "\0\u06db\0\u0708\0\u0735\0\u0762\0\u078f\0\u07bc\0\u07e9\0\u0816"+
    "\0\u0843\0\u0870\0\u089d\0\u08ca\0\u08f7\0\u0924\0\u0951\0\u097e"+
    "\0\u09ab\0\u09d8\0\u0a05\0\u0a32\0\u0a5f\0\u0a8c\0\u0ab9\0\u0ae6"+
    "\0\u0b13\0\u0b40\0\u0b6d\0\u0b9a\0\u0bc7\0\u0bf4\0\u0c21\0\u0c4e"+
    "\0\u0c7b\0\u0ca8\0\u0cd5\0\u0d02\0\u0d2f\0\u0d5c\0\u0d89\0\341"+
    "\0\u0db6\0\u0de3\0\u0e10\0\u0e3d\0\u0e6a\0\u0e97\0\u0ec4\0\u0ef1"+
    "\0\u0f1e\0\u0f4b\0\u0f78\0\u0fa5\0\u0fd2\0\u0fff\0\u102c\0\u1059"+
    "\0\u1086\0\u10b3\0\u10e0\0\u110d\0\u113a\0\u0465\0\u0465\0\u0465"+
    "\0\u0465\0\u1167\0\u1194\0\u11c1\0\u11ee\0\u121b\0\u1248\0\u1275"+
    "\0\u12a2\0\u12cf\0\u12fc\0\u1329\0\u1356\0\u1383\0\u13b0\0\u13dd"+
    "\0\u140a\0\u1437\0\u1464\0\u1491\0\u14be\0\u14eb\0\u1518\0\u1545"+
    "\0\u0465\0\u1572\0\u0465\0\u159f\0\u15cc\0\u15f9\0\u1626\0\u0465"+
    "\0\u0465\0\u1653\0\u1680\0\u0465\0\u16ad\0\u1464\0\u16da\0\u0465"+
    "\0\u1707\0\u1734\0\u1761\0\u178e\0\u17bb\0\u17e8\0\u1815\0\u1842"+
    "\0\u0465\0\u186f\0\u0465\0\u189c\0\u0465\0\u18c9\0\u18f6\0\u0465"+
    "\0\u1923\0\u1950\0\u197d\0\u19aa\0\u19d7\0\u1a04\0\u1a31\0\u1a5e"+
    "\0\u1a5e\0\u0465\0\u1a8b\0\u1ab8\0\u18f6\0\341\0\341\0\341"+
    "\0\u1ae5\0\341\0\341\0\341\0\u1b12\0\u189c\0\341\0\u1b3f"+
    "\0\u1b6c\0\u1b99\0\u1bc6\0\u1bf3\0\u1c20\0\u1c4d\0\u1c7a\0\u1ca7"+
    "\0\u1cd4\0\u1d01\0\u1d2e\0\u1d5b\0\u1d88\0\u1db5\0\u1de2\0\u1e0f"+
    "\0\u1e3c\0\u1e69\0\u1e96\0\u1ec3\0\u1ef0\0\u1f1d\0\u1f4a\0\u1f77"+
    "\0\u1fa4\0\u1fd1\0\u1ffe\0\u202b\0\u2058\0\u2085\0\341\0\341"+
    "\0\u20b2\0\u20df\0\u210c\0\u2139\0\u2166\0\u2193\0\u21c0\0\u21ed"+
    "\0\u221a\0\u2247\0\u2274\0\u2274\0\341\0\u22a1\0\341\0\u22ce"+
    "\0\u113a\0\u22fb\0\u2328\0\u2355\0\u0465\0\u2382\0\u23af\0\u23dc"+
    "\0\u2409\0\u2355\0\u2436\0\341\0\u2463\0\u2490\0\u24bd\0\u24ea"+
    "\0\u2517\0\u2544\0\u2571\0\u2571\0\u24ea\0\u259e\0\u0465\0\u0465"+
    "\0\u25cb\0\u25f8\0\u2625\0\u2652\0\u267f\0\u26ac\0\u26d9\0\u2706"+
    "\0\u2733\0\u2760\0\u278d\0\u27ba\0\u27e7\0\u0465\0\u2814\0\u2841"+
    "\0\u286e\0\u289b\0\u26ac\0\u28c8\0\u28f5\0\u2922\0\u294f\0\u297c"+
    "\0\u29a9\0\u29d6\0\u2a03\0\u2a30\0\u2a5d\0\u2a8a\0\u0465\0\u2ab7"+
    "\0\u0465\0\u2ae4\0\u2b11\0\u0465\0\u2b3e\0\u2b6b\0\u2b98\0\u2bc5"+
    "\0\u2bf2\0\u2c1f\0\u2760\0\u2c4c\0\u2c79\0\u2ca6\0\u2cd3\0\u2ab7"+
    "\0\u2d00\0\u2d00\0\u2d2d\0\341\0\u2d5a\0\341\0\u2d87\0\u2db4"+
    "\0\u2de1\0\u2760\0\u2e0e\0\u2e3b\0\u2e68\0\u2e95\0\341\0\u2ec2"+
    "\0\u2eef\0\341\0\341\0\u2f1c\0\u2f49\0\u2f76\0\u2fa3\0\u2fd0"+
    "\0\u2ffd\0\u302a\0\u3057\0\u3084\0\u30b1\0\341\0\u30de\0\u2a8a"+
    "\0\u310b\0\u3138\0\u3165\0\u3192\0\u31bf\0\u31ec\0\u3219\0\u3246"+
    "\0\u3273\0\u0465\0\u3246\0\u3246\0\u0465\0\341\0\341\0\u32a0"+
    "\0\u32cd\0\u32fa\0\u3327\0\u3354\0\u3381\0\u33ae\0\u33db\0\u3408"+
    "\0\u3435\0\u3462\0\u3408\0\u0465\0\u348f\0\u34bc\0\u34e9\0\u3516"+
    "\0\u3543\0\u3570\0\u359d\0\u35ca\0\u35f7\0\u3624\0\u3651\0\u367e"+
    "\0\u36ab\0\u36d8\0\u3705\0\u3732\0\u375f\0\u359d\0\u0465\0\u378c"+
    "\0\u3516\0\u37b9\0\u0465\0\u37e6\0\u3813\0\u3840\0\u386d\0\u389a"+
    "\0\u3516\0\u38c7\0\u33ae\0\u0465\0\u35ca\0\u38f4\0\u3921\0\u394e"+
    "\0\u397b\0\u39a8\0\u39d5\0\u3a02\0\u37b9\0\u37e6\0\u3a2f\0\u3a5c"+
    "\0\u3a89\0\u3ab6\0\u3ae3\0\u3b10\0\u3b3d\0\u3b6a\0\u3b97\0\u3bc4"+
    "\0\u3bf1\0\u3c1e\0\u3c4b\0\341\0\u3c78\0\u3ca5\0\341\0\u3cd2"+
    "\0\u3cff\0\u3462\0\341\0\341\0\u3d2c\0\u3d59\0\u3d86\0\u3db3"+
    "\0\u3de0\0\u3e0d\0\u3e3a\0\u3e67\0\u3e94\0\u3ec1\0\u3eee\0\u3f1b"+
    "\0\u3f48\0\u3f75\0\u3fa2\0\u3fcf\0\u3ffc\0\u4029\0\u4056\0\u4083"+
    "\0\u40b0\0\u0465\0\u40dd\0\u410a\0\u4137\0\u4164\0\u4191\0\u41be"+
    "\0\u410a\0\u41eb\0\u4218\0\u40b0\0\u0465\0\u3de0\0\u4245\0\u0465"+
    "\0\u0465\0\u4218\0\u0465\0\u4272\0\u3e3a\0\u0465\0\u429f\0\u3de0"+
    "\0\u42cc\0\u4029\0\u42f9\0\u3ec1\0\u0465\0\u4326\0\u4353\0\u4380"+
    "\0\u3e3a\0\u4056\0\u410a\0\u40b0\0\u43ad\0\u43da\0\u4407\0\u4434"+
    "\0\341\0\u4461\0\u448e\0\341\0\u4056\0\u44bb\0\341\0\u44e8"+
    "\0\341\0\341\0\u4515\0\341\0\341\0\u4542\0\u456f\0\u459c"+
    "\0\u45c9\0\u45f6\0\u4623\0\u4650\0\u467d\0\u46aa\0\u46d7\0\u4704"+
    "\0\u0465\0\u0465\0\u4731\0\u4731\0\u475e\0\u478b\0\u47b8\0\u47e5"+
    "\0\u4812\0\u483f\0\u0465\0\u486c\0\u4899\0\u48c6\0\u48f3\0\u4920"+
    "\0\u456f\0\u4812\0\341\0\341\0\u494d\0\341\0\u497a\0\u49a7"+
    "\0\u49d4\0\u4a01\0\u4a2e\0\u4a5b\0\u4a88\0\u4ab5\0\u0465\0\u4ae2"+
    "\0\u4b0f\0\u4b3c\0\u4b69\0\u4b96\0\u4bc3\0\u0465\0\u4bf0\0\u4c1d"+
    "\0\u4c4a\0\u4c77\0\u4ca4\0\u0465\0\u4a88\0\u4cd1\0\u4cfe\0\u0465"+
    "\0\u4c77\0\341\0\u4d2b\0\u4d58\0\u4d85\0\u4db2\0\u4ddf\0\u4e0c"+
    "\0\u4e39\0\u4e66\0\u4e93\0\u4ec0\0\u4eed\0\u0465\0\u4f1a\0\u4f47"+
    "\0\u4f74\0\u4fa1\0\u4fce\0\u4ffb\0\u5028\0\u5055\0\u5082\0\u50af"+
    "\0\u50dc\0\u0465\0\341\0\u5109\0\u5136\0\u5136\0\u0465\0\u0465"+
    "\0\u5163\0\u5190\0\u51bd\0\u51ea\0\u5217\0\u5244\0\u5271\0\u529e"+
    "\0\u52cb\0\u52f8\0\u0465\0\u0465\0\u0465\0\u0465\0\u0465\0\u5325"+
    "\0\u5325\0\u0465\0\u52cb\0\u0465\0\u0465\0\u0465";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[622];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\6\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\13\1\24\2\6\1\25"+
    "\1\6\1\26\1\27\1\30\1\11\1\6\1\31\1\32"+
    "\1\0\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\40\46\1\47\14\46\1\0"+
    "\1\6\1\50\1\51\3\6\1\0\10\6\1\52\13\6"+
    "\1\53\1\0\2\6\1\0\1\6\14\0\2\6\1\54"+
    "\1\55\2\6\1\0\25\6\1\0\2\6\1\0\1\6"+
    "\15\0\1\56\1\57\1\60\1\61\2\0\1\62\1\63"+
    "\1\64\2\0\1\65\1\66\1\0\1\67\1\70\1\71"+
    "\1\0\1\63\6\0\1\72\1\73\21\0\2\6\1\0"+
    "\3\6\1\0\25\6\1\0\2\6\1\0\1\6\14\0"+
    "\2\6\1\74\3\6\1\0\1\6\1\75\1\76\2\6"+
    "\1\77\1\100\5\6\1\75\6\6\1\101\1\6\1\0"+
    "\2\6\1\0\1\6\14\0\1\6\1\102\1\103\3\6"+
    "\1\0\25\6\1\0\2\6\1\0\1\6\22\0\1\11"+
    "\25\0\1\11\20\0\2\6\1\104\3\6\1\0\1\6"+
    "\1\105\12\6\1\105\10\6\1\0\2\6\1\0\1\6"+
    "\14\0\2\6\1\106\3\6\1\0\10\6\1\107\1\6"+
    "\1\110\12\6\1\0\2\6\1\0\1\6\14\0\1\6"+
    "\1\111\1\112\1\113\2\6\1\0\1\114\7\6\1\115"+
    "\14\6\1\0\2\6\1\0\1\6\14\0\2\6\1\116"+
    "\3\6\1\0\10\6\1\117\14\6\1\0\2\6\1\0"+
    "\1\6\14\0\2\6\1\120\3\6\1\0\1\121\24\6"+
    "\1\0\2\6\1\0\1\6\14\0\2\6\1\122\1\6"+
    "\1\123\1\6\1\0\25\6\1\0\2\6\1\0\1\6"+
    "\14\0\2\6\1\124\3\6\1\0\24\6\1\125\1\0"+
    "\2\6\1\0\1\6\14\0\1\6\1\126\1\127\3\6"+
    "\1\0\1\6\1\130\12\6\1\130\10\6\1\0\2\6"+
    "\1\0\1\6\14\0\1\6\1\131\1\132\3\6\1\0"+
    "\25\6\1\0\2\6\1\0\1\6\14\0\2\6\1\133"+
    "\3\6\1\0\1\6\1\134\7\6\1\135\2\6\1\134"+
    "\10\6\1\0\2\6\1\0\1\6\14\0\2\6\1\136"+
    "\1\6\1\137\1\6\1\0\1\140\24\6\1\0\2\6"+
    "\1\0\1\6\14\0\1\6\1\141\1\142\1\6\1\143"+
    "\1\6\1\0\5\6\1\144\2\6\1\145\14\6\1\0"+
    "\2\6\1\0\1\6\14\0\1\6\1\146\1\147\3\6"+
    "\1\0\25\6\1\0\2\6\1\0\1\6\14\0\2\6"+
    "\1\150\1\151\2\6\1\0\12\6\1\152\12\6\1\0"+
    "\2\6\1\0\1\6\14\0\2\6\1\153\1\6\1\154"+
    "\1\6\1\0\25\6\1\0\2\6\1\0\1\6\52\0"+
    "\1\31\2\0\1\155\135\0\1\156\53\0\1\157\1\160"+
    "\6\0\40\46\1\0\14\46\40\0\1\161\15\0\2\6"+
    "\1\162\1\163\2\6\1\0\25\6\1\0\2\6\1\0"+
    "\1\6\16\0\1\164\1\165\1\166\14\0\1\167\33\0"+
    "\2\6\1\167\3\6\1\0\12\6\1\170\12\6\1\0"+
    "\2\6\1\0\1\6\14\0\2\6\1\171\1\172\1\173"+
    "\1\6\1\0\25\6\1\0\2\6\1\0\1\6\16\0"+
    "\1\174\24\0\1\174\25\0\2\6\1\174\3\6\1\0"+
    "\20\6\1\175\4\6\1\0\2\6\1\0\1\6\16\0"+
    "\1\176\1\162\3\0\1\177\1\0\1\200\5\0\1\201"+
    "\1\0\1\202\33\0\1\203\1\204\1\205\1\206\1\166"+
    "\1\207\1\0\1\210\1\211\1\212\1\213\1\0\1\214"+
    "\1\215\1\0\1\216\1\0\1\217\1\220\1\211\1\220"+
    "\1\221\1\222\1\223\1\0\1\224\1\225\22\0\1\226"+
    "\1\0\1\227\2\0\1\230\6\0\1\231\12\0\1\223"+
    "\2\0\1\232\23\0\1\233\1\234\7\0\1\213\1\0"+
    "\1\235\1\215\41\0\1\236\5\0\1\211\12\0\1\211"+
    "\2\0\1\222\3\0\1\237\24\0\1\240\2\0\1\241"+
    "\1\0\1\242\1\0\1\243\13\0\1\221\4\0\1\244"+
    "\24\0\1\245\6\0\1\245\45\0\1\246\2\0\1\247"+
    "\6\0\1\250\2\0\1\251\37\0\1\224\26\0\1\224"+
    "\24\0\1\252\1\253\2\0\1\254\11\0\1\255\1\0"+
    "\1\256\35\0\1\257\6\0\1\257\45\0\1\260\11\0"+
    "\1\261\5\0\1\220\1\0\1\220\30\0\1\262\1\0"+
    "\1\262\54\0\1\263\1\264\1\166\50\0\1\262\1\0"+
    "\1\265\2\0\1\247\3\0\1\245\2\0\1\250\10\0"+
    "\1\221\3\0\1\224\23\0\2\6\1\221\3\6\1\0"+
    "\2\6\1\266\13\6\1\267\6\6\1\0\2\6\1\0"+
    "\1\6\14\0\2\6\1\245\3\6\1\0\2\6\1\270"+
    "\22\6\1\0\2\6\1\0\1\6\14\0\2\6\1\265"+
    "\2\6\1\271\1\0\5\6\1\272\17\6\1\0\2\6"+
    "\1\0\1\6\14\0\2\6\1\224\3\6\1\0\22\6"+
    "\1\273\2\6\1\0\2\6\1\0\1\6\14\0\1\274"+
    "\1\6\1\262\3\6\1\0\25\6\1\0\2\6\1\0"+
    "\1\6\14\0\2\6\1\202\3\6\1\0\12\6\1\275"+
    "\12\6\1\0\2\6\1\0\1\6\16\0\1\202\16\0"+
    "\1\202\35\0\1\276\2\0\1\241\24\0\1\244\22\0"+
    "\2\6\1\276\2\6\1\277\1\0\23\6\1\300\1\6"+
    "\1\0\2\6\1\0\1\6\16\0\1\301\2\0\1\254"+
    "\6\0\1\261\40\0\2\6\1\254\2\6\1\302\1\0"+
    "\25\6\1\0\2\6\1\0\1\6\14\0\2\6\1\261"+
    "\3\6\1\0\5\6\1\303\17\6\1\0\2\6\1\0"+
    "\1\6\14\0\2\6\1\304\3\6\1\0\10\6\1\305"+
    "\14\6\1\0\2\6\1\0\1\6\14\0\1\226\1\0"+
    "\1\306\11\0\1\307\2\0\1\304\1\0\1\310\5\0"+
    "\1\311\2\0\1\312\22\0\1\313\1\6\1\314\3\6"+
    "\1\0\5\6\1\315\12\6\1\316\2\6\1\317\1\6"+
    "\1\0\2\6\1\0\1\6\14\0\2\6\1\237\3\6"+
    "\1\0\23\6\1\320\1\6\1\0\2\6\1\0\1\6"+
    "\14\0\2\6\1\310\3\6\1\0\12\6\1\321\12\6"+
    "\1\0\2\6\1\0\1\6\16\0\1\255\14\0\1\255"+
    "\35\0\2\6\1\255\3\6\1\0\10\6\1\322\14\6"+
    "\1\0\2\6\1\0\1\6\16\0\1\222\23\0\1\222"+
    "\26\0\2\6\1\222\3\6\1\0\17\6\1\323\5\6"+
    "\1\0\2\6\1\0\1\6\15\0\1\233\1\324\11\0"+
    "\1\325\40\0\1\6\1\326\1\324\3\6\1\0\5\6"+
    "\1\327\17\6\1\0\2\6\1\0\1\6\16\0\2\330"+
    "\51\0\2\6\1\330\1\331\2\6\1\0\25\6\1\0"+
    "\2\6\1\0\1\6\14\0\2\6\1\200\3\6\1\0"+
    "\2\6\1\332\22\6\1\0\2\6\1\0\1\6\16\0"+
    "\1\200\6\0\1\200\43\0\2\6\1\177\3\6\1\0"+
    "\1\333\24\6\1\0\2\6\1\0\1\6\16\0\1\177"+
    "\4\0\1\177\47\0\1\334\4\0\1\242\1\0\1\257"+
    "\43\0\2\6\1\242\3\6\1\0\1\335\24\6\1\0"+
    "\2\6\1\0\1\6\14\0\2\6\1\257\3\6\1\0"+
    "\2\6\1\336\22\6\1\0\2\6\1\0\1\6\16\0"+
    "\1\213\5\0\1\211\1\0\1\213\10\0\1\211\31\0"+
    "\2\6\1\213\3\6\1\0\3\6\1\337\21\6\1\0"+
    "\2\6\1\0\1\6\14\0\2\6\1\211\3\6\1\0"+
    "\1\6\1\340\12\6\1\340\10\6\1\0\2\6\1\0"+
    "\1\6\14\0\2\6\1\341\3\6\1\0\10\6\1\342"+
    "\14\6\1\0\2\6\1\0\1\6\15\0\1\252\1\343"+
    "\11\0\1\344\2\0\1\345\35\0\2\6\1\344\3\6"+
    "\1\0\5\6\1\346\17\6\1\0\2\6\1\0\1\6"+
    "\14\0\2\6\1\251\3\6\1\0\10\6\1\347\14\6"+
    "\1\0\2\6\1\0\1\6\14\0\1\6\1\350\1\252"+
    "\3\6\1\0\25\6\1\0\2\6\1\0\1\6\14\0"+
    "\2\6\1\351\3\6\1\0\10\6\1\352\14\6\1\0"+
    "\2\6\1\0\1\6\16\0\1\351\14\0\1\351\37\0"+
    "\1\353\2\0\1\230\6\0\1\354\5\0\1\220\1\0"+
    "\1\220\30\0\2\6\1\353\2\6\1\355\1\0\5\6"+
    "\1\356\17\6\1\0\2\6\1\0\1\6\14\0\2\6"+
    "\1\220\3\6\1\0\13\6\1\357\1\6\1\357\7\6"+
    "\1\0\2\6\1\0\1\6\16\0\1\215\12\0\1\215"+
    "\37\0\2\6\1\215\3\6\1\0\6\6\1\360\16\6"+
    "\1\0\2\6\1\0\1\6\52\0\1\361\20\0\1\362"+
    "\1\0\1\362\50\0\2\6\1\362\1\6\1\363\1\6"+
    "\1\0\25\6\1\0\2\6\1\0\1\6\14\0\1\364"+
    "\1\365\1\366\1\0\1\362\3\0\1\367\12\0\1\367"+
    "\31\0\1\364\1\0\1\370\1\0\1\362\51\0\2\365"+
    "\54\0\1\367\5\0\1\367\12\0\1\367\31\0\2\6"+
    "\1\367\3\6\1\0\1\6\1\371\12\6\1\371\10\6"+
    "\1\0\2\6\1\0\1\6\14\0\1\364\1\365\1\372"+
    "\52\0\1\373\1\6\1\364\3\6\1\0\25\6\1\0"+
    "\2\6\1\0\1\6\14\0\1\6\1\374\1\365\3\6"+
    "\1\0\25\6\1\0\2\6\1\0\1\6\16\0\2\375"+
    "\51\0\2\6\1\375\1\376\2\6\1\0\25\6\1\0"+
    "\2\6\1\0\1\6\16\0\1\377\1\u0100\1\362\13\0"+
    "\1\u0101\1\u0102\1\u0103\1\0\1\u0103\32\0\1\u0104\17\0"+
    "\1\u0104\1\0\1\u0104\32\0\2\u0105\53\0\1\u0106\15\0"+
    "\1\u0101\1\u0102\1\u0107\1\0\1\u0107\32\0\2\u0108\53\0"+
    "\1\u0109\4\0\1\u0109\45\0\1\u010a\1\0\1\u010b\1\u010c"+
    "\51\0\1\u010d\1\u010e\1\u010f\1\u0110\1\u0111\1\u0112\1\u0113"+
    "\1\u0114\1\367\2\0\1\u0115\1\u0116\2\0\1\u0117\1\u0101"+
    "\1\u0118\1\u0103\1\367\1\u0103\3\0\1\u0119\1\0\1\u011a"+
    "\22\0\1\364\1\u011b\1\u011c\1\0\1\362\52\0\2\u011d"+
    "\2\0\1\u0113\50\0\1\u011e\14\0\1\u0117\2\0\1\u0104"+
    "\1\0\1\u0104\3\0\1\u0119\26\0\1\u011f\1\u0105\1\u0120"+
    "\52\0\1\u0121\1\u0122\10\0\1\u0116\4\0\1\u0123\10\0"+
    "\1\u011a\24\0\1\u0124\4\0\1\u0124\47\0\1\u0125\1\0"+
    "\1\u0126\7\0\1\u0127\3\0\1\u0101\1\u0102\1\u0107\1\0"+
    "\1\u0107\32\0\1\u0128\1\u0108\4\0\1\367\2\0\1\u0115"+
    "\7\0\1\367\33\0\2\u0129\53\0\1\u012a\1\375\1\u012b"+
    "\50\0\1\u012c\1\0\1\u012d\1\u012e\1\0\1\u0112\47\0"+
    "\1\u012c\1\0\1\u012f\1\u0130\1\u012b\2\0\1\u0109\47\0"+
    "\2\u0122\51\0\1\u012c\1\0\1\u012c\52\0\1\u010a\1\0"+
    "\1\u010a\52\0\1\u010a\1\0\1\u0131\4\0\1\u0124\11\0"+
    "\1\u0123\10\0\1\u011a\24\0\1\u0132\16\0\1\u0123\10\0"+
    "\1\u011a\24\0\1\u0133\1\u0129\1\0\1\u0112\51\0\1\u0112"+
    "\2\0\1\u0112\51\0\1\u0134\1\u012e\13\0\1\u0117\10\0"+
    "\1\u0119\26\0\1\u0135\14\0\1\u0117\10\0\1\u0119\26\0"+
    "\2\u012e\53\0\1\u0136\1\u011d\1\u0126\52\0\2\u011d\53\0"+
    "\1\u0126\1\0\1\u0126\52\0\2\u010c\53\0\1\u0137\1\u010c"+
    "\2\0\1\u0113\1\0\1\367\2\0\1\u0115\1\u0127\6\0"+
    "\1\367\37\0\1\u0113\50\0\1\u0127\11\0\1\u0127\42\0"+
    "\1\u0138\5\0\1\367\2\0\1\u0115\7\0\1\367\33\0"+
    "\1\u0120\1\0\1\u0120\52\0\1\u0116\11\0\1\u0116\40\0"+
    "\1\364\1\u010e\1\u0139\52\0\1\364\1\u011b\1\u013a\52\0"+
    "\2\6\1\u011d\1\u013b\2\6\1\0\25\6\1\0\2\6"+
    "\1\0\1\6\14\0\2\6\1\u0108\1\u013c\2\6\1\0"+
    "\25\6\1\0\2\6\1\0\1\6\14\0\2\6\1\u012e"+
    "\1\u013d\2\6\1\0\25\6\1\0\2\6\1\0\1\6"+
    "\16\0\1\u0116\3\0\1\u0113\5\0\1\u0116\40\0\2\6"+
    "\1\0\3\6\1\u0113\25\6\1\0\2\6\1\0\1\6"+
    "\14\0\2\6\1\u0116\3\6\1\0\5\6\1\u013e\17\6"+
    "\1\0\2\6\1\0\1\6\16\0\1\u0101\15\0\1\u0101"+
    "\34\0\2\6\1\u0101\3\6\1\0\11\6\1\u013f\13\6"+
    "\1\0\2\6\1\0\1\6\14\0\1\u012c\1\0\1\u0140"+
    "\1\u0141\1\u012b\1\u0112\1\0\1\u0109\3\0\1\u0115\4\0"+
    "\1\u0101\36\0\2\u0141\53\0\1\u0115\10\0\1\u0115\43\0"+
    "\1\u012b\1\0\1\u012b\50\0\1\u012c\1\0\1\u0142\2\0"+
    "\1\u0112\47\0\2\6\1\u0109\3\6\1\0\1\u0143\24\6"+
    "\1\0\2\6\1\0\1\6\14\0\1\u012c\1\0\1\u0144"+
    "\1\u0141\1\u012b\2\0\1\u0109\45\0\2\6\1\u0141\1\u0145"+
    "\2\6\1\0\25\6\1\0\2\6\1\0\1\6\14\0"+
    "\2\6\1\u012b\1\6\1\u0146\1\6\1\0\25\6\1\0"+
    "\2\6\1\0\1\6\14\0\1\u0147\1\6\1\u012c\3\6"+
    "\1\0\25\6\1\0\2\6\1\0\1\6\14\0\2\6"+
    "\1\u0112\2\6\1\u0148\1\0\25\6\1\0\2\6\1\0"+
    "\1\6\14\0\2\6\1\u0115\3\6\1\0\4\6\1\u0149"+
    "\20\6\1\0\2\6\1\0\1\6\14\0\2\6\1\u0127"+
    "\3\6\1\0\5\6\1\u014a\17\6\1\0\2\6\1\0"+
    "\1\6\14\0\2\6\1\u0129\1\u014b\2\6\1\0\25\6"+
    "\1\0\2\6\1\0\1\6\14\0\1\u010a\1\0\1\u014c"+
    "\16\0\1\u0123\35\0\1\u0123\16\0\1\u0123\33\0\1\u014d"+
    "\1\6\1\u010a\3\6\1\0\25\6\1\0\2\6\1\0"+
    "\1\6\14\0\2\6\1\u0123\3\6\1\0\12\6\1\u014e"+
    "\12\6\1\0\2\6\1\0\1\6\15\0\2\u011b\52\0"+
    "\1\6\1\u014f\1\u011b\3\6\1\0\25\6\1\0\2\6"+
    "\1\0\1\6\14\0\2\6\1\u0105\1\u0150\2\6\1\0"+
    "\25\6\1\0\2\6\1\0\1\6\14\0\2\6\1\u0104"+
    "\3\6\1\0\13\6\1\u0151\1\6\1\u0151\7\6\1\0"+
    "\2\6\1\0\1\6\16\0\1\u0152\1\0\1\u0120\12\0"+
    "\1\u0117\10\0\1\u0119\24\0\2\6\1\u0135\3\6\1\0"+
    "\10\6\1\u0153\10\6\1\u0154\3\6\1\0\2\6\1\0"+
    "\1\6\14\0\2\6\1\u0120\1\6\1\u0155\1\6\1\0"+
    "\25\6\1\0\2\6\1\0\1\6\16\0\1\u0107\17\0"+
    "\1\u0107\1\0\1\u0107\30\0\2\6\1\u0107\3\6\1\0"+
    "\13\6\1\u0156\1\6\1\u0156\7\6\1\0\2\6\1\0"+
    "\1\6\16\0\1\u0157\1\u010c\1\u0126\15\0\1\u0107\1\0"+
    "\1\u0107\5\0\1\u011a\24\0\1\u011a\27\0\1\u011a\24\0"+
    "\1\u0158\1\0\1\u0126\15\0\1\u0107\1\0\1\u0107\30\0"+
    "\2\6\1\u011a\3\6\1\0\23\6\1\u0159\1\6\1\0"+
    "\2\6\1\0\1\6\14\0\2\6\1\u0126\1\6\1\u015a"+
    "\1\6\1\0\25\6\1\0\2\6\1\0\1\6\14\0"+
    "\2\6\1\u010c\1\u015b\2\6\1\0\25\6\1\0\2\6"+
    "\1\0\1\6\16\0\1\u0102\16\0\1\u0102\33\0\2\6"+
    "\1\u0102\3\6\1\0\12\6\1\u015c\12\6\1\0\2\6"+
    "\1\0\1\6\16\0\2\u015d\51\0\2\6\1\u015d\1\u015e"+
    "\2\6\1\0\25\6\1\0\2\6\1\0\1\6\14\0"+
    "\2\6\1\u0124\3\6\1\0\1\u015f\24\6\1\0\2\6"+
    "\1\0\1\6\16\0\1\u0160\2\0\1\u0160\47\0\2\6"+
    "\1\u0160\2\6\1\u0161\1\0\25\6\1\0\2\6\1\0"+
    "\1\6\16\0\1\u0162\23\0\1\u0162\30\0\1\u0163\2\0"+
    "\1\u0164\20\0\1\u0162\30\0\1\u0165\2\0\1\u0165\51\0"+
    "\1\u0163\2\0\1\u0160\20\0\1\u0162\26\0\2\6\1\u0165"+
    "\2\6\1\u0166\1\0\25\6\1\0\2\6\1\0\1\6"+
    "\14\0\2\6\1\u0162\3\6\1\0\17\6\1\u0167\5\6"+
    "\1\0\2\6\1\0\1\6\15\0\2\u0168\52\0\1\6"+
    "\1\u0169\1\u0168\3\6\1\0\25\6\1\0\2\6\1\0"+
    "\1\6\15\0\1\u016a\1\u016b\1\0\1\u016c\1\u0160\1\u016d"+
    "\11\0\1\u016e\35\0\2\u016a\60\0\1\u016d\50\0\1\u016e"+
    "\15\0\1\u016e\36\0\1\u016c\1\0\1\u016c\52\0\1\u016e"+
    "\3\0\1\u016d\11\0\1\u016e\36\0\1\u016f\17\0\1\u016f"+
    "\1\0\1\u016f\32\0\1\u0170\30\0\1\u0170\23\0\1\u0171"+
    "\4\0\1\u0172\23\0\1\u0170\23\0\1\u0172\4\0\1\u0172"+
    "\47\0\1\u0173\23\0\1\u0162\4\0\1\u0170\23\0\2\u0174"+
    "\51\0\1\u0175\1\u0176\1\u0177\1\u0178\1\u016c\1\u0179\1\u016d"+
    "\1\u017a\1\u017b\3\0\1\u017c\3\0\1\u016e\1\u017d\1\u016f"+
    "\1\u017b\1\u016f\1\0\1\u0162\4\0\1\u0170\21\0\1\u0175"+
    "\1\u0176\1\u017e\2\0\1\u017f\1\0\1\u0172\47\0\1\u0180"+
    "\2\0\1\u0181\13\0\1\u0182\35\0\1\u0183\4\0\1\u0183"+
    "\47\0\1\u0184\3\0\1\u0113\1\0\1\u0184\12\0\1\u0184"+
    "\33\0\1\u0185\5\0\1\u0186\11\0\1\u016f\1\u0186\1\u016f"+
    "\32\0\1\u017c\11\0\1\u017c\42\0\1\u0187\5\0\1\u0187"+
    "\12\0\1\u0187\33\0\1\u0188\1\u0189\14\0\1\u016e\36\0"+
    "\1\u018a\16\0\1\u018a\35\0\2\u018b\53\0\1\u0163\1\u0174"+
    "\1\0\1\u0160\20\0\1\u0162\27\0\2\u018c\54\0\1\u018d"+
    "\1\0\1\u016c\3\0\1\u0187\10\0\1\u018a\1\0\1\u0187"+
    "\32\0\1\u016a\1\u018e\2\0\1\u018f\51\0\1\u018f\2\0"+
    "\1\u018f\47\0\1\u0175\1\0\1\u0190\1\u0191\1\0\1\u017f"+
    "\47\0\1\u0175\1\0\1\u0192\2\0\1\u017f\51\0\2\u0189"+
    "\53\0\1\u0186\5\0\1\u0186\12\0\1\u0186\33\0\1\u0193"+
    "\2\0\1\u0194\1\u016d\11\0\1\u016e\36\0\1\u0194\2\0"+
    "\1\u0194\51\0\1\u0195\2\0\1\u0165\6\0\1\u017c\41\0"+
    "\1\u0168\1\u0196\16\0\1\u0182\35\0\1\u0182\16\0\1\u0182"+
    "\34\0\1\u0197\1\u0198\4\0\1\u0183\46\0\2\u0197\52\0"+
    "\1\u0175\1\u0168\1\u0199\2\0\1\u017f\13\0\1\u0182\1\u016f"+
    "\1\0\1\u016f\30\0\1\u0175\1\u0168\1\u019a\2\0\1\u017f"+
    "\51\0\1\u019b\1\u0191\4\0\1\u0186\12\0\1\u0186\7\0"+
    "\1\u0170\23\0\2\u0191\52\0\1\u0197\1\u019c\5\0\1\u0187"+
    "\10\0\1\u018a\1\0\1\u0187\33\0\1\u019d\5\0\1\u0187"+
    "\10\0\1\u018a\1\0\1\u0187\32\0\1\u018c\1\u019e\2\0"+
    "\1\u0194\51\0\1\u019f\2\0\1\u0165\1\0\1\u0172\4\0"+
    "\1\u017c\42\0\1\u0162\1\u0174\22\0\1\u0162\26\0\1\6"+
    "\1\u01a0\1\u018c\3\6\1\0\25\6\1\0\2\6\1\0"+
    "\1\6\14\0\1\6\1\u01a1\1\u0197\3\6\1\0\25\6"+
    "\1\0\2\6\1\0\1\6\14\0\2\6\1\0\3\6"+
    "\1\u016d\25\6\1\0\2\6\1\0\1\6\16\0\1\u01a2"+
    "\2\0\1\u017f\1\u016d\1\u0183\4\0\1\u017c\4\0\1\u0182"+
    "\1\u016f\1\0\1\u016f\32\0\1\u017f\2\0\1\u017f\47\0"+
    "\2\6\1\u016f\3\6\1\0\13\6\1\u01a3\1\6\1\u01a3"+
    "\7\6\1\0\2\6\1\0\1\6\16\0\1\u01a4\2\0"+
    "\1\u017f\13\0\1\u0182\1\u016f\1\0\1\u016f\30\0\2\6"+
    "\1\u017f\2\6\1\u01a5\1\0\25\6\1\0\2\6\1\0"+
    "\1\6\14\0\2\6\1\u0182\3\6\1\0\12\6\1\u01a6"+
    "\12\6\1\0\2\6\1\0\1\6\14\0\2\6\1\u0183"+
    "\3\6\1\0\1\u01a7\24\6\1\0\2\6\1\0\1\6"+
    "\14\0\2\6\1\u017c\3\6\1\0\5\6\1\u01a8\17\6"+
    "\1\0\2\6\1\0\1\6\16\0\1\u01a9\1\u0189\27\0"+
    "\1\u0170\21\0\2\6\1\u0170\3\6\1\0\24\6\1\u01aa"+
    "\1\0\2\6\1\0\1\6\14\0\2\6\1\u0189\1\u01ab"+
    "\2\6\1\0\25\6\1\0\2\6\1\0\1\6\14\0"+
    "\2\6\1\u0174\1\u01ac\2\6\1\0\25\6\1\0\2\6"+
    "\1\0\1\6\14\0\1\6\1\u01ad\1\u016a\3\6\1\0"+
    "\25\6\1\0\2\6\1\0\1\6\14\0\2\6\1\u016c"+
    "\1\6\1\u01ae\1\6\1\0\25\6\1\0\2\6\1\0"+
    "\1\6\16\0\1\u019d\2\0\1\u018f\2\0\1\u0187\10\0"+
    "\1\u018a\1\0\1\u0187\31\0\2\6\1\u0187\3\6\1\0"+
    "\1\6\1\u01af\12\6\1\u01af\10\6\1\0\2\6\1\0"+
    "\1\6\14\0\2\6\1\u018a\3\6\1\0\12\6\1\u01b0"+
    "\12\6\1\0\2\6\1\0\1\6\14\0\2\6\1\u018f"+
    "\2\6\1\u01b1\1\0\25\6\1\0\2\6\1\0\1\6"+
    "\16\0\1\u01b2\1\u018b\1\0\1\u0194\1\0\1\u0172\45\0"+
    "\2\6\1\u018b\1\u01b3\2\6\1\0\25\6\1\0\2\6"+
    "\1\0\1\6\14\0\2\6\1\u0194\2\6\1\u01b4\1\0"+
    "\25\6\1\0\2\6\1\0\1\6\14\0\2\6\1\u0172"+
    "\3\6\1\0\1\u01b5\24\6\1\0\2\6\1\0\1\6"+
    "\14\0\2\6\1\u016e\3\6\1\0\11\6\1\u01b6\13\6"+
    "\1\0\2\6\1\0\1\6\14\0\1\u0175\1\0\1\u0175"+
    "\52\0\1\u01b7\1\6\1\u0175\3\6\1\0\25\6\1\0"+
    "\2\6\1\0\1\6\14\0\2\6\1\u0186\3\6\1\0"+
    "\1\6\1\u01b8\12\6\1\u01b8\10\6\1\0\2\6\1\0"+
    "\1\6\16\0\2\u01b9\51\0\2\6\1\u01b9\1\u01ba\2\6"+
    "\1\0\25\6\1\0\2\6\1\0\1\6\16\0\2\u01bb"+
    "\51\0\2\6\1\u01bb\1\u01bc\2\6\1\0\25\6\1\0"+
    "\2\6\1\0\1\6\22\0\1\u01bd\47\0\1\u01be\1\u01bf"+
    "\1\u01b9\2\0\1\u01bd\47\0\2\u01be\52\0\1\u01c0\1\0"+
    "\1\u01c1\2\0\1\u01c2\1\u016d\1\u01c3\5\0\1\u01c4\45\0"+
    "\1\u01c5\50\0\1\u01c6\1\0\1\u01c6\52\0\1\u01c7\1\0"+
    "\1\u01c7\52\0\1\u01c8\1\0\1\u01c7\24\0\1\u01c9\25\0"+
    "\1\u01c9\26\0\1\u01c9\25\0\1\u01ca\2\0\1\u01ca\51\0"+
    "\1\u01cb\1\u01bb\1\0\1\u01cc\1\u01cd\47\0\1\u01be\1\u01ce"+
    "\1\u01cf\1\u01d0\1\u01d1\1\u01cd\1\0\1\u01d2\3\0\1\u01d3"+
    "\6\0\1\u01d2\5\0\1\u01d4\1\u01d5\24\0\1\u01d5\27\0"+
    "\1\u01d5\24\0\2\u01d6\53\0\1\u01d7\5\0\1\u01d2\12\0"+
    "\1\u01d2\5\0\1\u01c9\25\0\1\u01d8\26\0\1\u01d8\25\0"+
    "\2\u01d9\53\0\1\u01da\1\u01db\10\0\1\u01d3\42\0\1\u01dc"+
    "\1\u01dd\1\0\1\u01d1\1\u01cd\22\0\1\u01c9\25\0\2\u01de"+
    "\53\0\1\u01df\1\u01e0\10\0\1\u01d3\42\0\2\u01e0\53\0"+
    "\1\u01d3\11\0\1\u01d3\42\0\1\u01d2\5\0\1\u01d2\12\0"+
    "\1\u01d2\33\0\1\u01e1\16\0\1\u01e1\35\0\1\u01e2\1\0"+
    "\1\u01c6\24\0\1\u01d8\25\0\1\u01d5\3\0\1\u01c5\23\0"+
    "\1\u01d5\24\0\2\u01db\57\0\1\u01e3\47\0\1\u01be\1\u01e4"+
    "\1\u01db\53\0\2\u01e5\2\0\1\u01bd\50\0\2\u01e5\53\0"+
    "\1\u01ca\1\u01de\1\0\1\u01ca\24\0\1\u01d5\24\0\1\u01ca"+
    "\1\u01de\1\0\1\u01ca\51\0\1\u01e6\1\u01bb\10\0\1\u01d3"+
    "\42\0\1\u01cc\2\0\1\u01cc\51\0\1\u01e7\2\0\1\u01cc"+
    "\2\0\1\u01d2\12\0\1\u01d2\33\0\1\u01e8\1\u01dd\1\u01c6"+
    "\1\u01ca\6\0\1\u01d3\42\0\1\u01e9\1\u01dd\1\0\1\u01ca"+
    "\51\0\1\u01ea\1\0\1\u01c7\24\0\1\u01d8\1\u01d5\24\0"+
    "\1\u01eb\1\u01db\1\0\1\u01cc\51\0\1\u01ec\1\u01d9\25\0"+
    "\1\u01c9\23\0\2\6\1\0\3\6\1\u01e3\25\6\1\0"+
    "\2\6\1\0\1\6\14\0\2\6\1\u01cc\2\6\1\u01ed"+
    "\1\0\25\6\1\0\2\6\1\0\1\6\16\0\1\u01ee"+
    "\1\u01de\1\u01c6\3\0\1\u01d2\3\0\1\u01d3\6\0\1\u01d2"+
    "\31\0\2\6\1\u01c6\1\6\1\u01ef\1\6\1\0\25\6"+
    "\1\0\2\6\1\0\1\6\16\0\1\u01f0\1\u01de\1\u01c6"+
    "\7\0\1\u01d3\40\0\2\6\1\u01de\1\u01f1\2\6\1\0"+
    "\25\6\1\0\2\6\1\0\1\6\14\0\2\6\1\u01d3"+
    "\3\6\1\0\5\6\1\u01f2\17\6\1\0\2\6\1\0"+
    "\1\6\14\0\2\6\1\u01d2\3\6\1\0\1\6\1\u01f3"+
    "\12\6\1\u01f3\10\6\1\0\2\6\1\0\1\6\14\0"+
    "\2\6\1\u01d9\1\u01f4\2\6\1\0\25\6\1\0\2\6"+
    "\1\0\1\6\16\0\1\u01f5\1\0\1\u01c7\25\0\1\u01d5"+
    "\22\0\2\6\1\u01c7\1\6\1\u01f6\1\6\1\0\25\6"+
    "\1\0\2\6\1\0\1\6\14\0\2\6\1\u01d5\3\6"+
    "\1\0\23\6\1\u01f7\1\6\1\0\2\6\1\0\1\6"+
    "\14\0\2\6\1\0\3\6\1\u01bd\25\6\1\0\2\6"+
    "\1\0\1\6\14\0\1\6\1\u01f8\1\u01be\3\6\1\0"+
    "\25\6\1\0\2\6\1\0\1\6\14\0\2\6\1\u01db"+
    "\1\u01f9\2\6\1\0\25\6\1\0\2\6\1\0\1\6"+
    "\14\0\2\6\1\u01e5\1\u01fa\2\6\1\0\25\6\1\0"+
    "\2\6\1\0\1\6\14\0\2\6\1\u01c9\3\6\1\0"+
    "\22\6\1\u01fb\2\6\1\0\2\6\1\0\1\6\14\0"+
    "\2\6\1\0\3\6\1\u01c5\25\6\1\0\2\6\1\0"+
    "\1\6\14\0\2\6\1\u01ca\2\6\1\u01fc\1\0\25\6"+
    "\1\0\2\6\1\0\1\6\14\0\2\6\1\u01d8\3\6"+
    "\1\0\22\6\1\u01fd\2\6\1\0\2\6\1\0\1\6"+
    "\22\0\1\u01fe\46\0\2\6\1\0\3\6\1\u01fe\25\6"+
    "\1\0\2\6\1\0\1\6\16\0\1\u01ff\5\0\1\u01ff"+
    "\12\0\1\u01ff\31\0\2\6\1\u01ff\3\6\1\0\1\6"+
    "\1\u0200\12\6\1\u0200\10\6\1\0\2\6\1\0\1\6"+
    "\16\0\1\u0201\3\0\1\u01bd\4\0\1\u0201\43\0\1\u0202"+
    "\22\0\1\u0202\31\0\1\u0202\3\0\1\u01fe\16\0\1\u0202"+
    "\31\0\1\u0203\14\0\1\u0203\37\0\1\u0204\1\0\1\u0205"+
    "\2\0\1\u0206\1\u0207\6\0\1\u0203\3\0\1\u0207\33\0"+
    "\1\u0205\1\0\1\u0205\52\0\1\u0207\5\0\1\u0207\12\0"+
    "\1\u0207\33\0\1\u0206\4\0\1\u0206\47\0\1\u0208\3\0"+
    "\1\u01c5\4\0\1\u0208\43\0\1\u0209\11\0\1\u0209\41\0"+
    "\2\u020a\53\0\1\u020a\1\u020b\5\0\1\u020c\12\0\1\u020c"+
    "\33\0\1\u020c\5\0\1\u020c\12\0\1\u020c\33\0\1\u01ff"+
    "\3\0\1\u020d\1\0\1\u01ff\12\0\1\u01ff\37\0\1\u020d"+
    "\46\0\1\u020e\1\0\1\u020f\2\0\1\u0210\1\u01cd\4\0"+
    "\1\u0201\41\0\1\u0211\1\u020a\1\u0212\2\0\1\u0213\1\u0214"+
    "\1\0\1\u0215\3\0\1\u0209\6\0\1\u0215\1\0\1\u0202"+
    "\31\0\1\u01ff\3\0\1\u01fe\1\0\1\u01ff\12\0\1\u01ff"+
    "\32\0\1\u020a\1\u0209\11\0\1\u0209\40\0\1\u0211\1\0"+
    "\1\u0211\54\0\1\u0213\2\0\1\u0213\47\0\1\u0211\1\0"+
    "\1\u0216\5\0\1\u020c\12\0\1\u020c\33\0\1\u0215\3\0"+
    "\1\u020d\1\0\1\u0215\12\0\1\u0215\33\0\1\u0213\2\0"+
    "\1\u0213\1\u01fe\50\0\1\u0217\11\0\1\u0217\40\0\1\u020e"+
    "\1\0\1\u0218\2\0\1\u0210\1\u01e3\50\0\1\u0219\2\0"+
    "\1\u0213\2\0\1\u01ff\12\0\1\u01ff\31\0\1\u0211\1\0"+
    "\1\u0211\3\0\1\u020d\50\0\1\u0219\2\0\1\u0213\2\0"+
    "\1\u01ff\3\0\1\u0209\6\0\1\u01ff\31\0\2\6\1\0"+
    "\3\6\1\u020d\25\6\1\0\2\6\1\0\1\6\14\0"+
    "\1\u0211\1\0\1\u021a\2\0\1\u0213\6\0\1\u0209\40\0"+
    "\2\6\1\u0209\3\6\1\0\5\6\1\u021b\17\6\1\0"+
    "\2\6\1\0\1\6\16\0\1\u0213\2\0\1\u0213\6\0"+
    "\1\u0209\40\0\2\6\1\u0213\2\6\1\u021c\1\0\25\6"+
    "\1\0\2\6\1\0\1\6\14\0\1\u021d\1\6\1\u0211"+
    "\3\6\1\0\25\6\1\0\2\6\1\0\1\6\14\0"+
    "\1\6\1\u021e\1\u020a\3\6\1\0\25\6\1\0\2\6"+
    "\1\0\1\6\14\0\2\6\1\u0202\3\6\1\0\16\6"+
    "\1\u021f\6\6\1\0\2\6\1\0\1\6\14\0\2\6"+
    "\1\u020c\3\6\1\0\1\6\1\u0220\12\6\1\u0220\10\6"+
    "\1\0\2\6\1\0\1\6\16\0\1\u0221\2\0\1\u0222"+
    "\1\u01fe\1\u0223\5\0\1\u0224\37\0\1\u0225\1\0\1\u0225"+
    "\52\0\1\u0226\1\6\1\u0225\3\6\1\0\25\6\1\0"+
    "\2\6\1\0\1\6\16\0\1\u0227\22\0\1\u0227\35\0"+
    "\1\u0228\50\0\1\u0229\11\0\1\u0229\42\0\1\u022a\1\u022b"+
    "\5\0\1\u022c\1\0\1\u022d\1\u0229\42\0\1\u022d\10\0"+
    "\1\u022d\43\0\2\u022b\53\0\1\u022c\6\0\1\u022c\45\0"+
    "\1\u022e\22\0\1\u022e\35\0\1\u022f\50\0\1\u0230\3\0"+
    "\1\u020d\1\u0230\47\0\1\u0231\14\0\1\u0231\37\0\1\u0232"+
    "\1\0\1\u0233\12\0\1\u0231\5\0\1\u0227\31\0\1\u0233"+
    "\1\0\1\u0233\52\0\1\u0234\2\0\1\u0234\47\0\1\u0225"+
    "\1\0\1\u0235\2\0\1\u0234\1\u0228\50\0\1\u0236\2\0"+
    "\1\u0222\1\u0214\1\u0237\5\0\1\u0224\37\0\1\u0225\1\0"+
    "\1\u0225\3\0\1\u022f\50\0\1\u0234\2\0\1\u0234\1\u022f"+
    "\50\0\1\u0238\11\0\1\u0238\42\0\1\u0239\1\0\1\u0233"+
    "\12\0\1\u0231\35\0\2\6\1\u0234\2\6\1\u023a\1\0"+
    "\25\6\1\0\2\6\1\0\1\6\14\0\2\6\1\0"+
    "\3\6\1\u0228\25\6\1\0\2\6\1\0\1\6\14\0"+
    "\2\6\1\0\3\6\1\u022f\25\6\1\0\2\6\1\0"+
    "\1\6\16\0\1\u023b\1\0\1\u023c\2\0\1\u023d\1\u023e"+
    "\12\0\1\u023e\33\0\1\u023c\1\0\1\u023c\52\0\1\u023e"+
    "\5\0\1\u023e\12\0\1\u023e\33\0\1\u023d\4\0\1\u023d"+
    "\47\0\2\u023f\51\0\2\6\1\u023f\1\u0240\2\6\1\0"+
    "\25\6\1\0\2\6\1\0\1\6\16\0\1\u0241\3\0"+
    "\1\u0228\17\0\1\u0241\30\0\1\u0242\16\0\1\u0242\35\0"+
    "\1\u0243\1\u0244\10\0\1\u0245\1\0\1\u0246\2\0\1\u0242"+
    "\35\0\1\u0246\13\0\1\u0246\40\0\2\u0244\53\0\1\u0245"+
    "\11\0\1\u0245\42\0\1\u0247\3\0\1\u022f\17\0\1\u0247"+
    "\30\0\1\u0248\5\0\1\u0248\12\0\1\u0248\33\0\1\u0249"+
    "\11\0\1\u0249\42\0\1\u024a\10\0\1\u024b\1\u0249\42\0"+
    "\1\u024b\10\0\1\u024b\43\0\1\u024c\1\0\1\u023c\2\0"+
    "\1\u023d\1\u024d\12\0\1\u024d\33\0\1\u024d\5\0\1\u024d"+
    "\12\0\1\u024d\33\0\1\u024e\1\u024f\5\0\1\u0250\1\0"+
    "\1\u0251\43\0\1\u0251\10\0\1\u0251\43\0\2\u024f\53\0"+
    "\1\u0250\6\0\1\u0250\45\0\1\u0252\27\0\1\u0252\22\0"+
    "\2\6\1\u0252\3\6\1\0\23\6\1\u0253\1\6\1\0"+
    "\2\6\1\0\1\6\16\0\2\u0254\53\0\1\u0255\17\0"+
    "\1\u0255\1\0\1\u0255\32\0\1\u0256\1\u0257\6\0\1\u0258"+
    "\7\0\1\u0255\1\0\1\u0255\32\0\1\u0258\7\0\1\u0258"+
    "\44\0\2\u0257\53\0\2\u0259\53\0\1\u025a\2\0\1\u025a"+
    "\51\0\1\u025b\16\0\1\u025b\35\0\1\u025c\11\0\1\u025d"+
    "\4\0\1\u025b\35\0\1\u025d\11\0\1\u025d\42\0\1\u025e"+
    "\1\u024f\1\0\1\u025a\3\0\1\u0250\1\0\1\u0251\43\0"+
    "\1\u025f\2\0\1\u025a\3\0\1\u0250\45\0\1\u0260\1\u0261"+
    "\10\0\1\u0262\1\0\1\u0263\40\0\1\u0263\13\0\1\u0263"+
    "\40\0\2\u0261\53\0\1\u0262\11\0\1\u0262\42\0\1\u0264"+
    "\22\0\1\u0264\31\0\1\u0265\5\0\1\u0265\12\0\1\u0265"+
    "\33\0\1\u0266\22\0\1\u0266\31\0\1\u0267\14\0\1\u0267"+
    "\37\0\1\u0268\17\0\1\u0268\1\0\1\u0268\32\0\1\u0269"+
    "\1\u026a\16\0\1\u0268\1\0\1\u0268\32\0\2\u026a\53\0"+
    "\1\u0260\1\u0261\10\0\1\u0262\1\0\1\u0263\1\u0267\37\0"+
    "\1\u026b\1\u0261\13\0\1\u0267\37\0\1\u026c\1\u026d\6\0"+
    "\1\u026c\44\0\1\u026c\7\0\1\u026c\44\0\2\u026d\53\0"+
    "\1\u026e\20\0\2\u026e\27\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[21330];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\3\1\1\0\24\1\4\11\1\1\1\11\1\1"+
    "\5\11\3\1\1\0\2\1\1\0\3\1\3\0\1\1"+
    "\6\0\1\1\1\0\7\1\1\0\2\1\1\0\3\1"+
    "\1\0\3\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\5\1\2\0\2\1\1\0\3\1\1\0\4\1"+
    "\2\0\2\1\1\0\1\1\1\0\4\11\1\0\1\1"+
    "\4\0\1\1\1\0\2\1\1\0\1\1\5\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\11\1\1\1\11"+
    "\1\1\3\0\2\11\2\0\1\11\2\0\1\1\1\11"+
    "\3\0\1\1\1\0\1\1\1\0\1\1\1\11\1\0"+
    "\1\11\1\0\1\11\1\1\1\0\1\11\2\0\2\1"+
    "\3\0\1\1\1\0\1\11\2\0\17\1\1\0\1\1"+
    "\5\0\1\1\1\0\7\1\2\0\2\1\1\0\3\1"+
    "\1\0\4\1\1\0\1\1\3\0\3\1\1\0\2\1"+
    "\1\0\5\1\1\0\1\1\1\0\1\11\1\1\2\0"+
    "\4\1\1\0\3\1\2\0\1\1\2\0\1\1\2\11"+
    "\4\0\4\1\5\0\1\11\12\0\1\1\3\0\1\1"+
    "\1\0\1\11\1\1\1\11\2\0\1\11\1\1\1\0"+
    "\1\1\3\0\1\1\3\0\1\1\1\0\1\1\1\0"+
    "\6\1\1\0\12\1\1\0\5\1\1\0\12\1\1\0"+
    "\2\1\1\0\1\1\1\11\2\1\1\11\2\1\1\0"+
    "\1\1\11\0\1\1\1\11\2\0\3\1\1\0\1\1"+
    "\4\0\2\1\5\0\1\11\3\0\1\11\1\0\1\1"+
    "\2\0\2\1\1\0\1\1\1\11\1\1\5\0\7\1"+
    "\1\0\1\1\1\0\4\1\1\0\17\1\1\0\1\1"+
    "\1\0\1\1\15\0\1\11\3\0\2\1\1\0\1\1"+
    "\2\0\1\1\1\11\1\1\1\0\2\11\1\1\1\11"+
    "\2\1\1\11\2\1\1\0\1\1\1\0\1\1\1\11"+
    "\2\0\26\1\2\0\1\1\10\0\2\11\1\1\6\0"+
    "\1\1\1\11\5\0\10\1\5\0\1\1\1\11\6\0"+
    "\1\11\3\0\1\1\1\0\1\11\1\1\2\0\1\11"+
    "\1\0\1\1\5\0\1\1\2\0\1\1\2\0\1\11"+
    "\13\0\1\11\1\1\2\0\1\1\2\11\7\0\1\1"+
    "\2\0\5\11\1\0\1\1\1\11\1\1\3\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[622];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	private int count;
	private ErrorMsg errorMsg;
	StringBuffer stringvalue = new StringBuffer();

	private void err(int pos, String s){
		errorMsg.error(pos,s);
	}

	private void err(String s){
		err(yychar,s);
	}

	private java_cup.runtime.Symbol tok(int kind, Object value) 
	{
		return new java_cup.runtime.Symbol(kind, yychar, yychar+yylength(), value);
	}

	Yylex(java.io.InputStream s, ErrorMsg e){
		this(s);
		errorMsg = e;
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Yylex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 160) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol nextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 30: 
          { return tok(sym.ADD,null);
          }
        case 79: break;
        case 21: 
          { return tok(sym.ON, null);
          }
        case 80: break;
        case 72: 
          { return tok(sym.DROPCOLUMN,null);
          }
        case 81: break;
        case 42: 
          { return tok(sym.DESC,null);
          }
        case 82: break;
        case 11: 
          { return tok(sym.LT,null);
          }
        case 83: break;
        case 67: 
          { return tok(sym.REFERENCES,null);
          }
        case 84: break;
        case 55: 
          { return tok(sym.VALUES,null);
          }
        case 85: break;
        case 5: 
          { stringvalue.setLength(0);yybegin(STRINGSTATE);
          }
        case 86: break;
        case 62: 
          { return tok(sym.ORDERBY,null);
          }
        case 87: break;
        case 78: 
          { return tok(sym.ALTERCOLUMN,null);
          }
        case 88: break;
        case 2: 
          { return tok(sym.ID,yytext().toLowerCase());
          }
        case 89: break;
        case 74: 
          { return tok(sym.INSERTINTO,null);
          }
        case 90: break;
        case 41: 
          { return tok(sym.TRUE,null);
          }
        case 91: break;
        case 57: 
          { return tok(sym.DOUBLE,null);
          }
        case 92: break;
        case 24: 
          { return tok(sym.LE,null);
          }
        case 93: break;
        case 13: 
          { return tok(sym.DIVIDE,null);
          }
        case 94: break;
        case 66: 
          { return tok(sym.DROPVIEW,null);
          }
        case 95: break;
        case 73: 
          { return tok(sym.FOREIGNKEY,null);
          }
        case 96: break;
        case 69: 
          { return tok(sym.DROPTABLE,null);
          }
        case 97: break;
        case 7: 
          { return tok(sym.LPAREN,null);
          }
        case 98: break;
        case 31: 
          { return tok(sym.MAX,null);
          }
        case 99: break;
        case 6: 
          { return tok(sym.DOT,null);
          }
        case 100: break;
        case 51: 
          { return tok(sym.FALSE,null);
          }
        case 101: break;
        case 68: 
          { return tok(sym.DROPINDEX,null);
          }
        case 102: break;
        case 29: 
          { return tok(sym.MIN,null);
          }
        case 103: break;
        case 63: 
          { return tok(sym.GROUPBY,null);
          }
        case 104: break;
        case 35: 
          { return tok(sym.INT,null);
          }
        case 105: break;
        case 75: 
          { return tok(sym.ALTERTABLE,null);
          }
        case 106: break;
        case 25: 
          { stringvalue.append("'");
          }
        case 107: break;
        case 60: 
          { return tok(sym.VARCHAR,null);
          }
        case 108: break;
        case 44: 
          { return tok(sym.NULL,null);
          }
        case 109: break;
        case 10: 
          { return tok(sym.EQ,null);
          }
        case 110: break;
        case 54: 
          { return tok(sym.HAVING,null);
          }
        case 111: break;
        case 53: 
          { return tok(sym.UNIQUE,null);
          }
        case 112: break;
        case 40: 
          { return tok(sym.FROM,null);
          }
        case 113: break;
        case 27: 
          { return tok(sym.ALL,null);
          }
        case 114: break;
        case 23: 
          { return tok(sym.NEQ,null);
          }
        case 115: break;
        case 19: 
          { return tok(sym.AS,null);
          }
        case 116: break;
        case 38: 
          { return tok(sym.REALVALUE,new Double(yytext()));
          }
        case 117: break;
        case 47: 
          { return tok(sym.COUNT,null);
          }
        case 118: break;
        case 12: 
          { return tok(sym.STAR,null);
          }
        case 119: break;
        case 70: 
          { return tok(sym.CREATEVIEW,null);
          }
        case 120: break;
        case 77: 
          { return tok(sym.CREATETABLE,null);
          }
        case 121: break;
        case 28: 
          { return tok(sym.SET,null);
          }
        case 122: break;
        case 61: 
          { return tok(sym.DEFAULT,null);
          }
        case 123: break;
        case 56: 
          { return tok(sym.DELETE,null);
          }
        case 124: break;
        case 43: 
          { return tok(sym.LIKE,null);
          }
        case 125: break;
        case 33: 
          { return tok(sym.ANY,null);
          }
        case 126: break;
        case 37: 
          { return tok(sym.NOT,null);
          }
        case 127: break;
        case 1: 
          { stringvalue.append(yytext());
          }
        case 128: break;
        case 64: 
          { return tok(sym.DISTINCT,null);
          }
        case 129: break;
        case 18: 
          { return tok(sym.OR,null);
          }
        case 130: break;
        case 26: 
          { return tok(sym.ASC,null);
          }
        case 131: break;
        case 15: 
          { return tok(sym.MINUS,null);
          }
        case 132: break;
        case 22: 
          { return tok(sym.GE,null);
          }
        case 133: break;
        case 76: 
          { return tok(sym.CREATEINDEX,null);
          }
        case 134: break;
        case 8: 
          { return tok(sym.RPAREN,null);
          }
        case 135: break;
        case 9: 
          { return tok(sym.GT,null);
          }
        case 136: break;
        case 32: 
          { return tok(sym.SUM,null);
          }
        case 137: break;
        case 36: 
          { return tok(sym.AND,null);
          }
        case 138: break;
        case 71: 
          { return tok(sym.PRIMARYKEY,null);
          }
        case 139: break;
        case 50: 
          { return tok(sym.UNION,null);
          }
        case 140: break;
        case 39: 
          { return tok(sym.CHAR,null);
          }
        case 141: break;
        case 49: 
          { return tok(sym.FLOAT,null);
          }
        case 142: break;
        case 45: 
          { return tok(sym.BOOL,null);
          }
        case 143: break;
        case 59: 
          { return tok(sym.DECIMAL,null);
          }
        case 144: break;
        case 52: 
          { return tok(sym.SELECT,null);
          }
        case 145: break;
        case 4: 
          { return tok(sym.INTVALUE,new Integer(yytext()));
          }
        case 146: break;
        case 17: 
          { yybegin(YYINITIAL);return tok(sym.STRINGVALUE,stringvalue.toString());
          }
        case 147: break;
        case 14: 
          { return tok(sym.PLUS,null);
          }
        case 148: break;
        case 34: 
          { return tok(sym.AVG,null);
          }
        case 149: break;
        case 65: 
          { return tok(sym.NOTNULL, null);
          }
        case 150: break;
        case 20: 
          { return tok(sym.IN,null);
          }
        case 151: break;
        case 48: 
          { return tok(sym.WHERE,null);
          }
        case 152: break;
        case 16: 
          { return tok(sym.COMMA,null);
          }
        case 153: break;
        case 46: 
          { return tok(sym.CHECK,null);
          }
        case 154: break;
        case 58: 
          { return tok(sym.UPDATE,null);
          }
        case 155: break;
        case 3: 
          { 
          }
        case 156: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              { 	{
		if (yystate()==STRINGSTATE)  err("String error");
		return tok(sym.EOF, null);
    }
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
